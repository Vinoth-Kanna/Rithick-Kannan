############### Check and Change DB Path ########################
############### Check Version Number ############################

from csv import writer
import shutil
from sqlite3.dbapi2 import Time
import tkinter
from tkinter import font
from tkinter.constants import CENTER, E, SINGLE, W
from tkinter import *
from turtle import width
from typing import final
import babel.numbers
import numpy

import pandas as pd
from os import startfile, stat
import getpass
import sqlite3
from tkinter import Listbox, Tk
from tkinter import Label
from tkinter import Button
from tkinter import Entry
from tkinter import messagebox
from tkinter import StringVar
from tkinter import END
from PIL import ImageTk, Image
from tkinter import Canvas
from tkinter import ttk
from ttkwidgets.autocomplete import AutocompleteCombobox

from tkcalendar import Calendar,DateEntry

from datetime import datetime 
from datetime import date
import openpyxl
import xlsxwriter
import xlwings as xw
from tkinter import filedialog as fd

import win32gui
import os

from tkinter import ttk as objTTK
from functools import partial
import datetime as objDateTime

############ Timer for View ##############

class TimerRun():
    def __init__(self):
        pass
        
    def start_clock(self, CanCur):
        global TimerLabel
        TimerLabel = Label(CanCur, text="Timer: " + "00:00:00",width=15,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"))
        TimerLabel.place(x=1030, y=2)

        self.label = TimerLabel
        self.StartTime = datetime.now()
        self.reset_clock()

        global RunningTimer
        RunningTimer = True
        
        global NPTimer
        NPTimer = datetime.min - datetime.min
        self.update_clock()
            
    def hide_clock(self):
        global RunningTimer
        RunningTimer = False
        global TimerLabel
        TimerLabel.place_forget()

    def reset_clock(self):
        global RunningTimer
        RunningTimer = False
        self.label.config(text="Timer: " + "00:00:00")

    def stop_clock(self):
        global RunningTimer
        RunningTimer = False

    def existing_clock(self):
        global RunningTimer
        RunningTimer = True
        self.update_clock()

    def continue_clock(self, NPTotal):
        global RunningTimer
        RunningTimer = True
        global NPTimer
        NPTimer = NPTotal - datetime.min
        self.update_clock()
    
    def update_clock(self):
        try:
            global NPTimer
            now = datetime.now()
            diff = str(now - self.StartTime - NPTimer)[0:7]
            
            self.label.configure(text="Timer: " + diff)
            
            global RunningTimer
            if RunningTimer == True:
                self.label.after(1000, self.update_clock)
        except:
            pass
            

######## Treeview Sorting #################

class MyTreeview(objTTK.Treeview):
    def heading(self, column, sort_by=None, **kwargs):
        if sort_by and not hasattr(kwargs, 'command'):
            func = getattr(self, f"_sort_by_{sort_by}", None)
            if func:
                kwargs['command'] = partial(func, column, False)
        
        return super().heading(column, **kwargs)
    
    def _sort(self, column, reverse, data_type, callback):
        l = [(self.set(k, column), k) for k in self.get_children('')]
        l.sort(key=lambda t: data_type(t[0]), reverse=reverse)
        for index, (_, k) in enumerate(l):
            self.move(k, '', index)
    
        self.heading(column, command=partial(callback, column, not reverse))
    
    def _sort_by_num(self, column, reverse):
        self._sort(column, reverse, int, self._sort_by_num)
    
    def _sort_by_name(self, column, reverse):
        self._sort(column, reverse, str, self._sort_by_name)
    
    def _sort_by_date(self, column, reverse):
        def _str_to_datetime(string):
            return objDateTime.datetime.strptime(string, "%d/%m/%Y %H:%M")
            
        self._sort(column, reverse, _str_to_datetime, self._sort_by_date)

ImgPath = r"" 
######## Live DB Path ##########
ProDBPath = r""
SupportDBPath = r""

######## Testing DB Path ##########
# ProDBPath = r""
# SupportDBPath = r""

def ClosePage(Window):
    Msgbox = messagebox.askyesnocancel('Logout?','''Are you sure want to Logout for the day?
    
    Yes = Logout for the day!
    No = Just Closing the Application''',icon = 'warning')

    if Msgbox == True:

        Record = ('Logout', '', '', '', Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("INSERT INTO tblNonPro (NPReason, NPActivity, NPTransName, NPComments, EntryBy, EntryDate, NPStartTime, NPEndTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?);")
        UpdateQueryfun(ProDBPath, query, Record)

        MyWindow = Window
        try:
            MyWindow.destroy()
        except:
            MyWindow.destroy()

    elif Msgbox == False:

        Record = ('Exit', '', '', '', Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("INSERT INTO tblNonPro (NPReason, NPActivity, NPTransName, NPComments, EntryBy, EntryDate, NPStartTime, NPEndTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?);")
        UpdateQueryfun(ProDBPath, query, Record)

        MyWindow = Window
        try:
            MyWindow.destroy()
        except:
            MyWindow.destroy()
    else:
        pass

def SelectQueryfun(DBPath, query, record=''):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query, record)
    data = []
    for row in c.fetchall():
        data.append(row[0])
    conn.close()
    return data

def ViewQueryfun(DBPath, query):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query)
    data = []
    for row in c.fetchall():
        data.append(row)
    conn.close()
    return data

def UpdateQueryfun(DBPath, query, Record):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query, Record)
    conn.commit()
    conn.close()

def UpdateQueryReturn(DBPath, query, Record):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query, Record)
    conn.commit()
    c.execute("SELECT last_insert_rowid();")
    result = c.fetchall()
    IssueID = result[0][0]
    conn.close()
    return IssueID

Var_UserID = getpass.getuser()
Temp = ViewQueryfun(SupportDBPath, "SELECT EmpName, Admin, Analyst, PeerReviewer from tblUserAccess WHERE UserID = '" + Var_UserID.lower() + "' AND Active = 'Yes';")

if len(Temp) > 0:
    Var_UserName = Temp[0][0]
    Var_Admin = Temp[0][1]
    Var_Analyst = Temp[0][2]
    Var_PR = Temp[0][3]

    if Var_Analyst == 'Yes' and Var_PR == 'Yes':
        EmpLevel = 'Both'
    elif Var_Analyst == 'Yes' and Var_PR == 'No':
        EmpLevel = 'Analyst'
    elif Var_Analyst == 'No' and Var_PR == 'Yes':
        EmpLevel = 'PR'
    else:
        EmpLevel = 'View'

def AcceptNum(inStr,acttyp):
    if acttyp == '1': #insert
        if not inStr.isdigit():
            return False
    return True

def AcceptDecimal(inp):
    try:
        if inp == '' or float(inp) >= 0:
            return True
        else:
            return False
    except:
        return False

def DropDown_Validation(NameList, EntryObj):
    if EntryObj.get() not in NameList:
        Validation = 'Failed'
    else:
        Validation = 'Passed'

    return Validation

def DropDown_Check(event, NameList, EntryObj, msghead, msgdetails):
    if EntryObj.get() != '':
        if EntryObj.get() not in NameList:
            messagebox.showerror(msghead, msgdetails)
            EntryObj.focus_set()
            EntryObj.delete(0, END)
        else:
            pass

def Date_Validation(Date_Entry):
    inputDate = Date_Entry.get()
    try:
        day, month, year = inputDate.split('/')
        datetime(int(year), int(month), int(day))
        isValidDate = True
    except ValueError:
        isValidDate = False

    if (isValidDate):
        Validation = 'Passed'
    else:
        Validation = 'Failed'

    return Validation

def Date_Validation2(Date_Entry):
    inputDate = Date_Entry.get()
    try:
        day, month, year = inputDate.split('-')
        datetime(int(year), int(month), int(day))
        isValidDate = True
    except ValueError:
        isValidDate = False

    if (isValidDate):
        Validation = 'Passed'
    else:
        Validation = 'Failed'

    return Validation

def Date_Check(event, Date_Entry):
    inputDate = Date_Entry.get()
    try:
        day, month, year = inputDate.split('/')
        datetime(int(year), int(month), int(day))
        isValidDate = True
    except ValueError:
        isValidDate = False

    if inputDate != '':
        if (isValidDate):
            pass
        else:
            messagebox.showerror('Date Error', 'This typed date is not valid! Please check')
            Date_Entry.focus_set()
            Date_Entry.delete(0, END)

def ViewDashfn(DBPath, query,DashTree):
    DashTree.tag_configure("evenrow",background='white')
    DashTree.tag_configure("oddrow",background='lightblue')

    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query)
    rows=c.fetchall()

    rowid = 0
    for row in rows:
        if row[0] != None:
            rowid = rowid + 1
            if rowid % 2 == 0:
                DashTree.insert("", tkinter.END, values=row, tags=('oddrow',))
            else:
                DashTree.insert("", tkinter.END, values=row, tags=('evenrow',))

    conn.close() 

def HyperlinkOpen(event, HyperlinkPath):
    os.startfile(HyperlinkPath, 'open')

global ActiveJobPage
ActiveJobPage = False

def focusNext(widget):
    widget.tk_focusNext().focus_set()
    return 'break'

def focusPrev(widget):
    widget.tk_focusPrev().focus_set()
    return 'break'

def ReviewID_Check(DBPath, query,record):
    result = SelectQueryfun(DBPath, query, record)
    if result[0] != 0:
        Duplicate = True
    else:
        Duplicate = False

    return Duplicate

def UserStatsCheck(RBCan, Project):

    global ActiveJobPage
    if ActiveJobPage == False:
        UserStats(RBCan, Project)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            UserStats(RBCan, Project)    

def UserStats(RBCan, Project):

    if Project == 'RB':
        global WorkQueueRB_B, CreateRB_B, AdminRB_B, ArchiveRB_B, UserStatsRB_B
        WorkQueueRB_B.config(bg='sky blue')
        CreateRB_B.config(bg='sky blue')
        AdminRB_B.config(bg='sky blue')
        ArchiveRB_B.config(bg='sky blue')
        UserStatsRB_B.config(bg='#E7E6E6')
    elif Project == 'OIMIO':
        global WorkQueueOIMIO_B, CreateOIMIO_B, AdminOIMIO_B, ArchiveOIMIO_B, UserStatsOIMIO_B
        WorkQueueOIMIO_B.config(bg='sky blue')
        CreateOIMIO_B.config(bg='sky blue')
        AdminOIMIO_B.config(bg='sky blue')
        ArchiveOIMIO_B.config(bg='sky blue')
        UserStatsOIMIO_B.config(bg='#E7E6E6')
    elif Project == 'Rabo':
        global WorkQueueRabo_B, CreateRabo_B, AdminRabo_B, ArchiveRabo_B, UserStatsRabo_B
        WorkQueueRabo_B.config(bg='sky blue')
        CreateRabo_B.config(bg='sky blue')
        AdminRabo_B.config(bg='sky blue')
        ArchiveRabo_B.config(bg='sky blue')
        UserStatsRabo_B.config(bg='#E7E6E6')

    StatsCan=Canvas(RBCan,bg="white", width=1170, height=535, highlightthickness=0)
    StatsCan.place(x=10, y=45)
    
    Label1 = Label(StatsCan, text="Date*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label1_0 = Label(StatsCan, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))

    today = date.today()
    Entry1 = DateEntry(StatsCan,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy',maxdate=today)
    Entry1.delete(0, END)
    Entry1.set_date(today)
    Entry1.bind("<FocusOut>", lambda event: Date_Check(event, Entry1))
    
    Label2 = Label(StatsCan, text="Login Time : ",width=45,height=1,fg="#054457", bg="white",font=("Calibri",11,"bold"),anchor='w')
    Label3 = Label(StatsCan, text="Logout Time : ",width=45,height=1,fg="#054457", bg="white",font=("Calibri",11,"bold"),anchor='w')
    
    def Validate_Clear():
        LabelList = [Label1]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_SubmitUS():
        Validate_Clear()

        DateLabelList = [Label1]
        DateEntryList = [Entry1]

        if Entry1.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

        if Submit:
            SubmitUS()

    def SubmitUS():
        if Entry1.get_date() == '':
            messagebox.showerror('Validation Check','Please select date!')
            return False

        record = (Entry1.get_date().strftime('%d-%m-%Y'), Var_UserID)
        query = "SELECT MIN(NPStartTime) FROM tblNonPro WHERE NPReason = 'Login' AND EntryDate = ? AND EntryBy = ?"
        InTime = SelectQueryfun(ProDBPath, query, record)

        query = "SELECT MAX(NPEndTime) FROM tblNonPro WHERE EntryDate = ? AND EntryBy = ?"
        OutTime = SelectQueryfun(ProDBPath, query, record)
                
        if InTime[0] !=None:
            InTime = InTime[0]
            OutTime = OutTime[0]
        else:
            InTime = 'NA'
            OutTime = 'NA'

        if Entry1.get_date().strftime('%d-%m-%Y') == date.today().strftime('%d-%m-%Y'):
            OutTime = 'NA'

        Label2.config(text= "Login Time : " + InTime)
        Label3.config(text= "Logout Time : " + OutTime)

        Header1 = Label(StatsCan, text="Work Queue Details",width=20,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"), anchor='w')
        Header1.place(x=600, y=200)

        arrlbHeader = ["Projects", "Analysis", "Peer Review", "On Hold", "Completed"]
        Statstree1 = MyTreeview(StatsCan, columns=arrlbHeader, show="headings", height=4)

        Statstree1.column("#1", anchor=tkinter.CENTER, width=100)
        Statstree1.heading("#1", text="Projects")
        Statstree1.column("#2", anchor=tkinter.CENTER, width=110)
        Statstree1.heading("#2", text="Analysis")
        Statstree1.column("#3", anchor=tkinter.CENTER, width=110)
        Statstree1.heading("#3", text="Peer Review")
        Statstree1.column("#4", anchor=tkinter.CENTER, width=100)
        Statstree1.heading("#4", text="On Hold")
        Statstree1.column("#5", anchor=tkinter.CENTER, width=100)
        Statstree1.heading("#5", text="Completed")
        
        Statstree1.place(x=600, y=230)

        Header2 = Label(StatsCan, text="Production Hours",width=20,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"), anchor='w')
        Header2.place(x=50, y=200)

        arrlbHeader = ["Projects", "Create", "Analysis", "Peer Review"]
        Statstree2 = MyTreeview(StatsCan, columns=arrlbHeader, show="headings", height=4)

        Statstree2.column("#1", anchor=tkinter.CENTER, width=100)
        Statstree2.heading("#1", text="Projects")
        Statstree2.column("#2", anchor=tkinter.CENTER, width=110)
        Statstree2.heading("#2", text="Create")
        Statstree2.column("#3", anchor=tkinter.CENTER, width=110)
        Statstree2.heading("#3", text="Analysis")
        Statstree2.column("#4", anchor=tkinter.CENTER, width=100)
        Statstree2.heading("#4", text="Peer Review")
        
        Statstree2.place(x=50, y=230)

        Header3 = Label(StatsCan, text="Non-Production Hours",width=20,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"), anchor='w')
        Header3.place(x=50, y=370)

        arrlbHeader = ["Category", "Hours"]
        Statstree3 = MyTreeview(StatsCan, columns=arrlbHeader, show="headings", height=3)

        Statstree3.column("#1", anchor=tkinter.CENTER, width=100)
        Statstree3.heading("#1", text="Category")
        Statstree3.column("#2", anchor=tkinter.CENTER, width=110)
        Statstree3.heading("#2", text="Hours")
        
        Statstree3.place(x=50, y=400)

        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        DateSelected = datetime.strptime(Entry1.get().replace("/", "-"), "%d-%m-%Y")

        ###################### RB ######################

        query_RB = """SELECT * FROM tblIssuesStatusRB WHERE TableName NOT IN ('Admin', 'Reopen');"""
        
        conn = sqlite3.connect(ProDBPath)
        df_RB = pd.read_sql_query(query_RB, conn)
        conn.close()

        df_RB['EntryDate']=pd.to_datetime(df_RB['EntryDate'], format='%d-%m-%Y')
        
        Filtered_RB = df_RB.loc[(df_RB['EntryDate']<=DateSelected)]
        Lookup_RB = Filtered_RB.groupby(['ReviewID']).agg({'StatusID':'max'}).reset_index()
        Merge_RB = Filtered_RB.merge(Lookup_RB, left_on=['StatusID', 'ReviewID'], right_on=['StatusID', 'ReviewID'], how='inner')

        Completed_RB = Merge_RB.loc[(Merge_RB['Stage']=='Job Completed') & (Merge_RB['EntryBy']==Var_UserID) & (Merge_RB['EntryDate']==DateSelected)]
        Pending_RB = Merge_RB.loc[(Merge_RB['Stage']!='Job Completed') & (Merge_RB['Status']!='Unassigned') & (Merge_RB['EntryBy']==Var_UserID) | (Merge_RB['Assignee']==Var_UserName) & (Merge_RB['EntryDate']<=DateSelected)]
        Analysis_RB = Pending_RB.loc[(Pending_RB['EntryStage']=='Analysis')]
        PR_RB = Pending_RB.loc[(Pending_RB['EntryStage']=='Peer Reviewer')]
        Hold_RB = Pending_RB.loc[(Pending_RB['EntryStatus']=='On Hold')]
        
        ###################### OIMIO ######################

        query_OIMIO = """SELECT * FROM tblIssuesStatusOIMIO WHERE TableName NOT IN ('Admin', 'Reopen');"""
        conn = sqlite3.connect(ProDBPath)
        df_OIMIO = pd.read_sql_query(query_OIMIO, conn)
        conn.close()

        df_OIMIO['EntryDate']=pd.to_datetime(df_OIMIO['EntryDate'], format='%d-%m-%Y')

        Filtered_OIMIO = df_OIMIO.loc[(df_OIMIO['EntryDate']<=DateSelected)]
        Lookup_OIMIO = Filtered_OIMIO.groupby(['ReviewID']).agg({'StatusID':'max'}).reset_index()
        Merge_OIMIO = Filtered_OIMIO.merge(Lookup_OIMIO, left_on=['StatusID', 'ReviewID'], right_on=['StatusID', 'ReviewID'], how='inner')

        Completed_OIMIO = Merge_OIMIO.loc[(Merge_OIMIO['Stage']=='Job Completed') & (Merge_OIMIO['EntryBy']==Var_UserID) & (Merge_OIMIO['EntryDate']==DateSelected)]
        Pending_OIMIO = Merge_OIMIO.loc[(Merge_OIMIO['Stage']!='Job Completed') & (Merge_OIMIO['Status']!='Unassigned') & (Merge_OIMIO['EntryBy']==Var_UserID) | (Merge_OIMIO['Assignee']==Var_UserName) & (Merge_OIMIO['EntryDate']<=DateSelected)]
        Analysis_OIMIO = Pending_OIMIO.loc[(Pending_OIMIO['EntryStage']=='Analysis')]
        PR_OIMIO = Pending_OIMIO.loc[(Pending_OIMIO['EntryStage']=='Peer Reviewer')]
        Hold_OIMIO = Pending_OIMIO.loc[(Pending_OIMIO['EntryStatus']=='On Hold')]

        ###################### Rabo ######################

        query_Rabo = """SELECT * FROM tblIssuesStatusRabo WHERE TableName NOT IN ('Admin', 'Reopen');"""
        conn = sqlite3.connect(ProDBPath)
        df_Rabo = pd.read_sql_query(query_Rabo, conn)
        conn.close()
        
        df_Rabo['EntryDate']=pd.to_datetime(df_Rabo['EntryDate'], format='%d-%m-%Y')

        Filtered_Rabo = df_Rabo.loc[(df_Rabo['EntryDate']<=DateSelected)]
        Lookup_Rabo = Filtered_Rabo.groupby(['ReviewID']).agg({'StatusID':'max'}).reset_index()
        Merge_Rabo = Filtered_Rabo.merge(Lookup_Rabo, left_on=['StatusID', 'ReviewID'], right_on=['StatusID', 'ReviewID'], how='inner')

        Completed_Rabo = Merge_Rabo.loc[(Merge_Rabo['Stage']=='Job Completed') & (Merge_Rabo['EntryBy']==Var_UserID) & (Merge_Rabo['EntryDate']==DateSelected)]
        Pending_Rabo = Merge_Rabo.loc[(Merge_Rabo['Stage']!='Job Completed') & (Merge_Rabo['Status']!='Unassigned') & (Merge_Rabo['EntryBy']==Var_UserID) | (Merge_Rabo['Assignee']==Var_UserName) & (Merge_Rabo['EntryDate']<=DateSelected)]
        Analysis_Rabo = Pending_Rabo.loc[(Pending_Rabo['EntryStage']=='Analysis')]
        PR_Rabo = Pending_Rabo.loc[(Pending_Rabo['EntryStage']=='Peer Reviewer')]
        Hold_Rabo = Pending_Rabo.loc[(Pending_Rabo['EntryStatus']=='On Hold')]

        Count_Project = {'Projects':['Roland Berger', 'OIMIO', 'Rabo Bank'],
                    'Analysis':[len(Analysis_RB), len(Analysis_OIMIO), len(Analysis_Rabo)],
                    'Peer Review':[len(PR_RB), len(PR_OIMIO), len(PR_Rabo)],
                    'On Hold':[len(Hold_RB), len(Hold_OIMIO), len(Hold_Rabo)],
                    'Completed':[len(Completed_RB), len(Completed_OIMIO), len(Completed_Rabo)]
                    }  

        Count_Project_df = pd.DataFrame(Count_Project)
        Count_Project_List = Count_Project_df.values.tolist()

        for row in Count_Project_List:
            Statstree1.insert("", END, values=row) 

        conn = sqlite3.connect(ProDBPath)
        df_RB = pd.read_sql_query(query_RB, conn)
        df_RB['Project'] = 'Roland Berger'
        conn.close()

        conn = sqlite3.connect(ProDBPath)
        df_OIMIO = pd.read_sql_query(query_OIMIO, conn)
        df_OIMIO['Project'] = 'OIMIO'
        conn.close()

        conn = sqlite3.connect(ProDBPath)
        df_Rabo = pd.read_sql_query(query_Rabo, conn)
        df_Rabo['Project'] = 'Rabo Bank'
        conn.close()

        AllProjects = pd.concat([df_RB, df_OIMIO, df_Rabo], ignore_index=True, sort=False)
        
        AllProjects['EntryDate']=pd.to_datetime(AllProjects['EntryDate'], format='%d-%m-%Y')
        AllProjects = pd.DataFrame(AllProjects.loc[(AllProjects['EntryDate']==DateSelected) & (AllProjects['EntryBy']==Var_UserID)])
        ReportsProduction = pd.DataFrame(AllProjects.loc[(AllProjects['EntryDate']==DateSelected) & (AllProjects['EntryBy']==Var_UserID)])

        if len(AllProjects) > 0:
            AllProjects['EntryStartTime']=pd.to_datetime(AllProjects['EntryStartTime'], format='%d-%m-%Y %H:%M:%S')
            AllProjects['EntryEndTime']=pd.to_datetime(AllProjects['EntryEndTime'], format='%d-%m-%Y %H:%M:%S')
            AllProjects['NPHours']=pd.to_timedelta(AllProjects['NPHours'])
            
            AllProjects['ProductionHours'] = AllProjects['EntryEndTime'] - AllProjects['EntryStartTime']
            AllProjects['ProductionHours'] = pd.to_timedelta(AllProjects['ProductionHours'])
            AllProjects['FinalProductionHours'] = AllProjects['ProductionHours'] - AllProjects['NPHours']
            AllProjects = pd.DataFrame(AllProjects.groupby(['TableName', 'Project'], as_index=False).agg({'FinalProductionHours':'sum'}))
            AllProjects['FinalProductionHours'] = AllProjects['FinalProductionHours'].astype('str').str.replace('0 days', '').str.strip()
            
            Hours_Project = pd.DataFrame(AllProjects.pivot(columns='TableName', values='FinalProductionHours', index=['Project']))
            Hours_Project = Hours_Project.rename_axis(None)
            Hours_Project = Hours_Project.reset_index(drop=False)
            
            if 'Create' not in Hours_Project.columns:
                i = 0
                CreateList = []
                for i in range(len(Hours_Project['index'])):
                    CreateList = CreateList + ['00:00:00']

                Hours_Project['Create'] = CreateList

            if 'Analysis' not in Hours_Project.columns:
                i = 0
                AnalysisList = []
                for i in range(len(Hours_Project['index'])):
                    AnalysisList = AnalysisList + ['00:00:00']

                Hours_Project['Analysis'] = AnalysisList

            if 'PR' not in Hours_Project.columns:
                i = 0
                PRList = []
                for i in range(len(Hours_Project['index'])):
                    PRList = PRList + ['00:00:00']

                Hours_Project['PR'] = PRList

            Hours_Project = Hours_Project[['index', 'Create', 'Analysis', 'PR']]
            Hours_Project_List = Hours_Project.values.tolist()

            for row in Hours_Project_List:
                Statstree2.insert("", END, values=row)

        query_NP = """SELECT * FROM tblNonPro;"""
        conn = sqlite3.connect(ProDBPath)
        df_NP = pd.read_sql_query(query_NP, conn)
        conn.close()

        df_NP['EntryDate']=pd.to_datetime(df_NP['EntryDate'], format='%d-%m-%Y')
        df_NP = pd.DataFrame(df_NP.loc[(df_NP['EntryDate']==DateSelected) & (df_NP['EntryBy']==Var_UserID)])
        ReportsNP = pd.DataFrame(df_NP.loc[(df_NP['EntryDate']==DateSelected) & (df_NP['EntryBy']==Var_UserID)])

        if len(df_NP) > 0:
            df_NP['NPStartTime']=pd.to_datetime(df_NP['NPStartTime'], format='%d-%m-%Y %H:%M:%S')
            df_NP['NPEndTime']=pd.to_datetime(df_NP['NPEndTime'], format='%d-%m-%Y %H:%M:%S')

            df_NP['NPHours'] = df_NP['NPEndTime'] - df_NP['NPStartTime']
            df_NP['Category'] = numpy.where(df_NP['NPReason']=='Break', 'Break', 'Diverted')
            
            df_NP = pd.DataFrame(df_NP.groupby(['Category'], as_index=False).agg({'NPHours':'sum'}))
            
            df_NP['NPHours'] = df_NP['NPHours'].astype('str').str.replace('0 days', '00:00:00').str.strip()
            df_NP['NPHours'] = df_NP['NPHours'].astype('str').str.replace('00:00:00 ', '').str.strip()
            NP_List = df_NP.values.tolist()

            for row in NP_List:
                Statstree3.insert("", END, values=row)

        def UserReport():
            Header4.config(foreground='#054457')
            Submit = True
            if Entry4.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False
            else:
                result = DropDown_Validation(Entry4_Values, Entry4)
                if result == 'Failed':
                    Header4.config(foreground='red')
                    Entry4.focus_set()
                    messagebox.showerror('Validation Check',Entry4_msg)
                    Submit = False
                    
            if Submit:
                if Entry4.get() == 'Production':
                    xw.view(ReportsProduction, table=False)
                    messagebox.showinfo('Production Report','Production Raw Data Report Exported!')
                elif Entry4.get() == 'Non-Production':
                    ReportsNP
                    xw.view(ReportsNP, table=False)
                    messagebox.showinfo('Non-Production Report','Non-Production Raw Data Report Exported!')
                

        Header4 = Label(StatsCan, text="User Reports",width=12,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"),anchor='w')
        Entry4_Values = ['Production', 'Non-Production']
        Entry4 = AutocompleteCombobox(StatsCan, width=15, completevalues=Entry4_Values)
        Entry4_msg = 'This typed Category is not available in the list, please check!'

        Header4.place(x=600, y=370)
        Entry4.place(x=600, y=400)
    
        ReportB = Button(StatsCan, text=">", width=2, command=lambda:UserReport(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')
        ReportB.place(x=720, y=395)

    SubmitB = Button(StatsCan, text=">", width=2, command=lambda:Validate_SubmitUS(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')
        
    Label1.place(x=50, y=100)
    Label1_0.place(x=80, y=80)
    Entry1.place(x=95, y=100)

    def ClearPage(event):
        pass

    Entry1.bind("<<ComboboxSelected>>", ClearPage)
    Entry1.bind("<FocusOut>", ClearPage)

    Label2.place(x=600, y=100)
    Label3.place(x=900, y=100)

    SubmitB.place(x=195, y=95)

############################################################################## Roland Berger Start ###########################################################################################
############################################################################## Roland Berger Start ###########################################################################################
############################################################################## Roland Berger Start ###########################################################################################
############################################################################## Roland Berger Start ###########################################################################################
############################################################################## Roland Berger Start ###########################################################################################

########################################################## This is Create Issue Page for RB ########################################################

def CreateIssueRBCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        CreateIssueRB(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            CreateIssueRB(RBCan, Timer1)

def CreateIssueRB(RBCan, Timer1):

    global WorkQueueRB_B, CreateRB_B, AdminRB_B, ArchiveRB_B, UserStatsRB_B

    WorkQueueRB_B.config(bg='sky blue')
    CreateRB_B.config(bg='#E7E6E6')
    AdminRB_B.config(bg='sky blue')
    ArchiveRB_B.config(bg='sky blue')
    UserStatsRB_B.config(bg='sky blue')
    
    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False

    global NPTotalHours
    NPTotalHours = datetime.min

    ProjectsCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ProjectsCan.place(x=5, y=40)
    
    ProjectLabel = Label(ProjectsCan, text="Roland Berger",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)
    
    CreateLabel = Label(ProjectsCan, text="Create Issue",width=18,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    CreateLabel.place(x=550, y=5)

    Can1=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
    Can1.place(x=10, y=40)
    
    RBGeneral_V_Entry1 = StringVar()
    RBGeneral_V_Entry2 = StringVar()
    RBGeneral_V_Entry3 = StringVar()
    RBGeneral_V_Entry4 = StringVar()
    RBGeneral_V_Entry7_1 = StringVar()
    RBGeneral_V_Entry7_2 = StringVar()
    RBGeneral_V_Entry9 = StringVar()
    RBGeneral_V_Entry9_1 = StringVar()
    RBGeneral_V_Entry9_2 = StringVar()
        
    Timer1.start_clock(Can1)

    StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

    def Validate_Clear():
        LabelList = [Label2, Label3, Label4, Label5, Label6, Label7, Label7_1, Label7_2, Label9, Label9_1, Label9_2, Label10]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_SubmitIssueRB():
        Validate_Clear()

        AllLabelList = [Label5, Label7_1, Label7_2, Label9_1, Label9_2, Label10]
        AllEntryList = [Entry5, Entry7_1, Entry7_2, Entry9_1, Entry9_2, Entry10]
        AllEntryValues = [Entry5_Values, Entry7_1_Values, Entry7_2_Values, Entry9_1_Values, Entry9_2_Values, Entry10_Values]
        AllEntryMessage = [Entry5_msg, Entry7_1_msg, Entry7_2_msg, Entry9_1_msg, Entry9_2_msg, Entry10_msg]

        DateLabelList = [Label7, Label9]
        DateEntryList = [Entry7, Entry9]

        if Entry1.get() == '' or int(Entry2.get()) == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry7.get() == '' or Entry7_1.get() == '' or Entry7_2.get() == '' or Entry9.get() == '' or Entry9_1.get() == '' or Entry9_2.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            query = "SELECT EXISTS(SELECT 1 FROM tblIssuesMainRB WHERE ReviewID = (?));"
            record = [int(Entry2.get())]
            ReviewIDResult = ReviewID_Check(ProDBPath,query,record)

            if ReviewIDResult:
                Label2.config(foreground='red')
                messagebox.showerror('Duplicate Review ID','This Review ID '+ Entry2.get() + ' is already available! please check')
                Entry2.focus_set()
                Submit = False
                return False

            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                SubmitIssueRB()

    def SubmitIssueRB():
        global NPTotalHours
        if Entry10.get() == '':
            Status = 'Unassigned'
        else:
            Status = 'Assigned'
        
        EntryStatus = 'Created'
        Stage = 'Analysis'

        DateReceived = Entry7.get() + " " + Entry7_1.get() + ":" + Entry7_2.get()
        DueDate = Entry9.get() + " " + Entry9_1.get() + ":" + Entry9_2.get()

        Record = (Entry1.get(),	int(Entry2.get()), Entry3.get(), Entry4.get(), Entry5.get(), DateReceived, DueDate, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesGenRB (ProjectName, ReviewID, EntityName, LegalForm, Country, DateReceived, DueDate, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath,query, Record)

        Record = (IssueID, Entry1.get(), int(Entry2.get()), Entry3.get(), Entry4.get(), Entry5.get(), DateReceived, DueDate, Entry10.get(), Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesMainRB (IssueID, ProjectName, ReviewID, EntityName, LegalForm, Country, DateReceived, DueDate, CurAssignee, CurStatus, CurStage, UpdatedBy, UpdatedTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        UpdateQueryfun(ProDBPath,query, Record)
        
        Record = ('Create', IssueID, int(Entry2.get()), Entry10.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')
        query = ("""INSERT INTO tblIssuesStatusRB (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        UpdateQueryfun(ProDBPath,query, Record)
        NPTotalHours = datetime.min
        
        global ActiveJobPage
        ActiveJobPage = False

        ClearIssueRB()
        Timer1.stop_clock()
        messagebox.showinfo('Completed','Issue Created Successfully!')

        WorkQueueRBCheck(RBCan, Timer1)
            
    def ClearIssueRB():
        Validate_Clear()
        Entry2.delete(0, END)
        Entry3.delete(0, END)
        Entry4.delete(0, END)
        Entry5.set('')
        Entry7.delete(0, END)
        Entry7_1.delete(0, END)
        Entry7_2.delete(0, END)
        Entry9.delete(0, END)
        Entry9_1.delete(0, END)
        Entry9_2.delete(0, END)
        Entry10.set('')
    
    Label1 = Label(Can1, text="Project*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can1, text="Review ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can1, text="Entity Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can1, text="Legal Form*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can1, text="Country*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label6 = Label(Can1, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label7 = Label(Can1, text="Date Received*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7_1 = Label(Can1, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label7_1_1 = Label(Can1, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label7_2 = Label(Can1, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
        
    Label8 = Label(Can1, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label9 = Label(Can1, text="Due Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9_1 = Label(Can1, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label9_1_1 = Label(Can1, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label9_2 = Label(Can1, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
        
    Label10 = Label(Can1, text="Assignee",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    Entry1 = Entry(Can1,textvariable=RBGeneral_V_Entry1,font=("Calibri",10),width=22)
    Entry1.insert(0, 'Roland Berger')
    Entry1.config(state = "disabled")

    Entry2 = Entry(Can1,validate="key", textvariable=RBGeneral_V_Entry2,bg="white",font=("Calibri",10),width=22)
    Entry2['validatecommand'] = (Entry2.register(AcceptNum),'%P','%d')
    
    Entry3 = Entry(Can1,textvariable=RBGeneral_V_Entry3,bg="white",font=("Calibri",10),width=22)
    Entry4 = Entry(Can1,textvariable=RBGeneral_V_Entry4,bg="white",font=("Calibri",10),width=22)

    Entry5_Values = SelectQueryfun(SupportDBPath, "Select CountryName from tblCountries;")
    Entry5 = AutocompleteCombobox(Can1, width=23, completevalues=Entry5_Values)
    Entry5_msg = 'This typed Country is not available in the list, please check!'
    
    today = date.today()
    Entry7 = DateEntry(Can1,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy',maxdate=today)
    Entry7.delete(0, END)
    Entry7.set_date(datetime.now().strftime('%d/%m/%Y'))
    
    Entry7_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry7_1 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry7_1,bg="white",font=("Calibri",10),width=2)
    Entry7_1['validatecommand'] = (Entry7_1.register(AcceptNum),'%P','%d')
    Entry7_1_msg = 'This typed hour is not correct, please check!'
    
    Entry7_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry7_2 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry7_2,bg="white",font=("Calibri",10),width=2)
    Entry7_2['validatecommand'] = (Entry7_2.register(AcceptNum),'%P','%d')
    Entry7_2_msg = 'This typed minute is not correct, please check!'
    
    today = date.today()
    Entry9 = DateEntry(Can1,textvariable=RBGeneral_V_Entry9,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry9.delete(0, END)
    
    Entry9_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry9_1 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry9_1,bg="white",font=("Calibri",10),width=2)
    Entry9_1['validatecommand'] = (Entry9_1.register(AcceptNum),'%P','%d')
    Entry9_1_msg = 'This typed hour is not correct, please check!'
    
    Entry9_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry9_2 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry9_2,bg="white",font=("Calibri",10),width=2)
    Entry9_2['validatecommand'] = (Entry9_2.register(AcceptNum),'%P','%d')
    Entry9_2_msg = 'This typed minute is not correct, please check!'
             
    Entry10_Values = SelectQueryfun(SupportDBPath, "SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' AND Analyst = 'Yes' ORDER BY EmpName ASC;")
    Entry10 = AutocompleteCombobox(Can1, width=23, completevalues=Entry10_Values)
    Entry10_msg = 'This typed Name is not available in the list, please check!'
        
    Label1.place(x=200, y=20+50)
    Label2.place(x=650, y=20+50)
    Label3.place(x=200, y=100+50)
    Label4.place(x=650, y=100+50)
    Label5.place(x=200, y=180+50)

    Label6.place(x=760, y=160+50)
    Label7.place(x=650, y=180+50)
    Label7_1.place(x=870, y=160+50)
    Label7_2.place(x=900, y=160+50)

    Label8.place(x=310, y=240+50)
    Label9.place(x=200, y=260+50)
    Label9_1.place(x=420, y=240+50)
    Label9_2.place(x=450, y=240+50)

    Label10.place(x=650, y=260+50)
        
    Entry1.place(x=330, y=20+50)
    Entry2.place(x=780, y=20+50)
    Entry3.place(x=330, y=100+50)
    Entry4.place(x=780, y=100+50)
    Entry5.place(x=330, y=180+50)
    
    Entry7.place(x=780, y=180+50)
    Entry7_1.place(x=880, y=180+50)
    Label7_1_1.place(x=895, y=180+50)
    Entry7_2.place(x=910, y=180+50)

    Entry9.place(x=330, y=260+50)
    Entry9_1.place(x=430, y=260+50)
    Label9_1_1.place(x=445, y=260+50)
    Entry9_2.place(x=460, y=260+50)
    
    Entry10.place(x=780, y=260+50)
        
    SubmitB = Button(Can1, text="Create", width=15, height=1, command=lambda:Validate_SubmitIssueRB(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')
    CancelB = Button(Can1, text="Clear", width=15, height=1, command=lambda:ClearIssueRB(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')           

    SubmitB.place(x=420, y=420)
    CancelB.place(x=620, y=420)

########################################################## This is Selected Issue Page for RB ########################################################

def ViewGeneralRB(Can2, ReviewID, Tname, RBCan):

    global GeneralRB_B, AnalysisRB_B, PeerRB_B

    GeneralRB_B.config(bg='sky blue',fg='black')
    AnalysisRB_B.config(bg='#006E8E',fg='white')
    PeerRB_B.config(bg='#006E8E',fg='white')

    global ActiveDashboard
    ActiveDashboard = False

    Can3=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can3.place(x=5, y=35)

    RBGeneral_V_Entry1 = StringVar()
    RBGeneral_V_Entry2 = StringVar()
    RBGeneral_V_Entry3 = StringVar()
    RBGeneral_V_Entry4 = StringVar()
    RBGeneral_V_Entry7_1 = StringVar()
    RBGeneral_V_Entry7_2 = StringVar()
    RBGeneral_V_Entry9_1 = StringVar()
    RBGeneral_V_Entry9_2 = StringVar()
        
    Label1 = Label(Can3, text="Project*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can3, text="Review ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can3, text="Entity Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can3, text="Legal Form*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can3, text="Country*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label6 = Label(Can3, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label7 = Label(Can3, text="Date Received*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7_1 = Label(Can3, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label7_1_1 = Label(Can3, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label7_2 = Label(Can3, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    
    Label8 = Label(Can3, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label9 = Label(Can3, text="Due Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9_1 = Label(Can3, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label9_1_1 = Label(Can3, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label9_2 = Label(Can3, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    
    Label10 = Label(Can3, text="Assignee",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    query = ("SELECT * FROM tblIssuesMainRB WHERE ReviewID = '" + ReviewID + "';")
    result = ViewQueryfun(ProDBPath, query)

    Entry1 = Entry(Can3,textvariable=RBGeneral_V_Entry1,font=("Calibri",10), width=22)
    Entry1.insert(0, result[0][1])
    Entry1.config(state = "disabled")
    
    Entry2 = Entry(Can3,textvariable=RBGeneral_V_Entry2,font=("Calibri",10), width=22)
    Entry2.insert(0, result[0][2])
    Entry2.config(state = "disabled")
    
    Entry3 = Entry(Can3,textvariable=RBGeneral_V_Entry3,bg="white",font=("Calibri",10), width=22)
    Entry3.insert(0, result[0][3])
    
    Entry4 = Entry(Can3,textvariable=RBGeneral_V_Entry4,bg="white",font=("Calibri",10), width=22)
    Entry4.insert(0, result[0][4])
    
    Entry5_Values = SelectQueryfun(SupportDBPath, "Select CountryName from tblCountries;")
    Entry5 = AutocompleteCombobox(Can3, width=23, completevalues=Entry5_Values)
    Entry5.set(result[0][5])
    Entry5_msg = 'This typed Country is not available in the list, please check!'
        
    ReceivedDate = result[0][6].split(' ')
    HourMin = ReceivedDate[1].split(':')

    Entry7 = DateEntry(Can3,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry7.set_date(ReceivedDate[0])
    Entry7.config(state = "disabled")

    Entry7_1 = Entry(Can3,textvariable=RBGeneral_V_Entry7_1,bg="white",font=("Calibri",10), width=2)
    Entry7_1.insert(0, HourMin[0])
    Entry7_1.config(state = "disabled")

    Entry7_2 = Entry(Can3,textvariable=RBGeneral_V_Entry7_2,bg="white",font=("Calibri",10), width=2)
    Entry7_2.insert(0, HourMin[1])
    Entry7_2.config(state = "disabled")

    ReceivedDate = result[0][7].split(' ')
    HourMin = ReceivedDate[1].split(':')

    Entry9 = DateEntry(Can3,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry9.set_date(ReceivedDate[0])
    Entry9.config(state = "disabled")

    Entry9_1 = Entry(Can3,textvariable=RBGeneral_V_Entry9_1,bg="white",font=("Calibri",10), width=2)
    Entry9_1.insert(0, HourMin[0])
    Entry9_1.config(state = "disabled")

    Entry9_2 = Entry(Can3,textvariable=RBGeneral_V_Entry9_2,bg="white",font=("Calibri",10), width=2)
    Entry9_2.insert(0, HourMin[1])
    Entry9_2.config(state = "disabled")
        
    query = ("""SELECT ID, Assignee, MAX(StatusID), TableName 
                FROM tblIssuesStatusRB 
                WHERE TableName = 'Create';""")
    
    result = ViewQueryfun(ProDBPath, query)

    Entry10 = ttk.Combobox(Can3,font=("Calibri",10))
    Entry10.set(result[0][1])
    Entry10.config(state = "disabled")

    Label1.place(x=200, y=20+50)
    Label2.place(x=650, y=20+50)
    Label3.place(x=200, y=100+50)
    Label4.place(x=650, y=100+50)
    Label5.place(x=200, y=180+50)
    Label6.place(x=760, y=160+50)
    Label7.place(x=650, y=180+50)
    Label7_1.place(x=870, y=160+50)
    Label7_2.place(x=900, y=160+50)
    Label8.place(x=310, y=240+50)
    Label9.place(x=200, y=260+50)
    Label9_1.place(x=420, y=240+50)
    Label9_2.place(x=450, y=240+50)
    Label10.place(x=650, y=260+50)
    
    Entry1.place(x=330, y=20+50)
    Entry2.place(x=780, y=20+50)
    Entry3.place(x=330, y=100+50)
    Entry4.place(x=780, y=100+50)
    Entry5.place(x=330, y=180+50)
    Entry7.place(x=780, y=180+50)
    Entry7_1.place(x=880, y=180+50)
    Label7_1_1.place(x=895, y=180+50)
    Entry7_2.place(x=910, y=180+50)
    Entry9.place(x=330, y=260+50)
    Entry9_1.place(x=430, y=260+50)
    Label9_1_1.place(x=445, y=260+50)
    Entry9_2.place(x=460, y=260+50)
    Entry10.place(x=780, y=260+50)

    def Validate_Clear():
        LabelList = [Label3, Label4, Label5]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_SubmitIssueRB():
        Validate_Clear()

        AllLabelList = [Label5]
        AllEntryList = [Entry5]
        AllEntryValues = [Entry5_Values]
        AllEntryMessage = [Entry5_msg]

        if Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry7.get() == '' or Entry7_1.get() == '' or Entry7_2.get() == '' or Entry9.get() == '' or Entry9_1.get() == '' or Entry9_2.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            if Submit:
                SubmitIssueRB()

    def SubmitIssueRB():
        
        DateReceived = Entry7.get() + " " + Entry7_1.get() + ":" + Entry7_2.get()
        DueDate = Entry9.get() + " " + Entry9_1.get() + ":" + Entry9_2.get()
        
        Record = (Entry1.get(),	Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), DateReceived, DueDate, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesGenRB (ProjectName, ReviewID, EntityName, LegalForm, Country, DateReceived, DueDate, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)

        Record = (IssueID, Entry3.get(), Entry4.get(), Entry5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry2.get())
        query = ("""UPDATE tblIssuesMainRB SET IssueID = ?, EntityName = ?, LegalForm = ?, Country = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
        UpdateQueryfun(ProDBPath, query, Record)
                
        messagebox.showinfo('Updated','Issue Updated Successfully!')

    def ClearIssueRB():
        Validate_Clear()
        Entry3.delete(0, END)
        Entry4.set('')
        Entry5.set('')
        Entry5.set('Medium')
        
    SubmitB = Button(Can3, text="Update", width=15, height=1, command=lambda:Validate_SubmitIssueRB(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')
    CancelB = Button(Can3, text="Clear", width=15, height=1, command=lambda:ClearIssueRB(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2') 
    CancelB.config(state = "disabled")          

    SubmitB.place(x=420, y=400)
    CancelB.place(x=620, y=400)

    if Tname == 'Archive':
        global ActiveJobPage
        ActiveJobPage = False
        
        Entry1.config(state = "normal")
        Entry2.config(state = "normal")
        Entry7.config(state = "normal")
        Entry7_1.config(state = "normal")
        Entry7_2.config(state = "normal")
        Entry9.config(state = "normal")
        Entry9_1.config(state = "normal")
        Entry9_2.config(state = "normal")
        Entry10.config(state = "normal")
                
        SubmitB.config(state = 'disabled')
        CancelB.config(state = 'disabled')

########################################################## This is Analysis Page for RB ########################################################

def ViewAnalysisRB(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = ''):

    global GeneralRB_B, AnalysisRB_B, PeerRB_B

    GeneralRB_B.config(bg='#006E8E',fg='white')
    AnalysisRB_B.config(bg='sky blue',fg='black')
    PeerRB_B.config(bg='#006E8E',fg='white')
    
    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False
    
    Can4=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can4.place(x=5, y=35)
        
    EntryDate = datetime.now().strftime('%d-%m-%Y')
    StartTime = StartTime

    def Validate_Clear():
        LabelList = [Label2, Label3, Label4, Label5, Label6, Label7, DocCost_L, Label8, Label9, Label10, Label11, Label12]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label4, Label5, Label6, Label7, Label10]
        AllEntryList = [Entry4, Entry5, Entry6, Entry7, Entry10]
        AllEntryValues = [Entry4_Values, Entry5_Values, Entry6_Values, Entry7_Values, Entry10_Values]
        AllEntryMessage = [Entry4_msg, Entry5_msg, Entry6_msg, Entry7_msg, Entry10_msg]

        DateLabelList = [Label12]
        DateEntryList = [Entry12]

        Submit = True

        if Entry10.get() != 'In Process':
            if Entry8.get()[:2] != r'\\':
                Label8.config(foreground='red')
                Entry8.focus_set()
                messagebox.showerror('Validation Check','File Path should be a valid network path, please check the path!')
                return False

            if not os.path.isdir(Entry8.get()):
                Label8.config(foreground='red')
                Entry8.focus_set()
                messagebox.showerror('Validation Check','File Path is not valid path, please check the path!')
                return False

            if Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or DocCost_E.get() == '' or Entry8.get() == '' or Entry10.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

            elif Entry10.get() == "RM" or Entry10.get() == "On Hold":
                if Entry11.get(1.0, END).strip() == '' or Entry12.get() == '':
                    messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                    return False

        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='red')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[i])
                    Submit = False
                    break
        
        for i in range(0,len(DateEntryList)):
            if DateEntryList[i].get() != '':
                result = Date_Validation(DateEntryList[i])
                if result == 'Failed':
                    DateLabelList[i].config(foreground='red')
                    DateEntryList[i].focus_set()
                    messagebox.showerror('Date Error','This typed date is not valid! Please check')
                    Submit = False
                    break

        if Submit:
            SubmitAnaRB()
        
    def SubmitAnaRB():
        global NPTotalHours
        global ActiveJobPage

        if Entry10.get() == "RM" or Entry10.get() == "On Hold":
            if Entry10.get() == 'Completed':
                EntryStatus = 'Completed'
                Status = 'Unassigned'
                Stage = 'Peer Reviewer'
                Assignee = ''
            else:
                EntryStatus = Entry10.get()
                Status = Entry10.get()
                Stage = 'Analysis'
                Assignee = Var_UserName

            EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

            Record = (ReviewID, Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), DocCost_E.get(), Entry8.get(), Entry9.get(1.0, END).strip(),
                        Entry10.get(), Entry11.get(1.0, END).strip(), Entry12.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
            query = ("""INSERT INTO tblIssuesAnaRB (ReviewID, Individual, Entity, RiskLevel, RiskFactors, Sanctions, PEP, DocCost, FileLinks, Comments, Status, Reason, DatetoBank, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
            
            AnalysisID = UpdateQueryReturn(ProDBPath,query, Record)

            if Tname == 2 or T4Stage == 'Analysis':
                Record = ('Analysis', AnalysisID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')            
                query = ("INSERT INTO tblIssuesStatusRB (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
                UpdateQueryfun(ProDBPath,query, Record)

                Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                query = ("""UPDATE tblIssuesMainRB SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                UpdateQueryfun(ProDBPath,query, Record)

                NPTotalHours = datetime.min
                ActiveJobPage = False
                Cancel()
                Timer1.stop_clock()
            
            messagebox.showinfo('Completed','Analysis Updated Successfully!')
            if Tname == 2 or T4Stage == 'Analysis':
                WorkQueueRBCheck(RBCan, Timer1)

        else:
            if Entry10.get() == 'Completed':
                EntryStatus = 'Completed'
                Status = 'Unassigned'
                Stage = 'Peer Reviewer'
                Assignee = ''
            else:
                EntryStatus = Entry10.get()
                Status = Entry10.get()
                Stage = 'Analysis'
                Assignee = Var_UserName

            EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

            Record = (ReviewID, Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), DocCost_E.get(), Entry8.get(), Entry9.get(1.0, END).strip(),
                        Entry10.get(), Entry11.get(1.0, END).strip(), Entry12.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
            query = ("""INSERT INTO tblIssuesAnaRB (ReviewID, Individual, Entity, RiskLevel, RiskFactors, Sanctions, PEP, DocCost, FileLinks, Comments, Status, Reason, DatetoBank, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
            
            AnalysisID = UpdateQueryReturn(ProDBPath,query, Record)

            if Tname == 2 or T4Stage == 'Analysis':
                Record = ('Analysis', AnalysisID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')            
                query = ("INSERT INTO tblIssuesStatusRB (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
                UpdateQueryfun(ProDBPath,query, Record)

                Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                query = ("""UPDATE tblIssuesMainRB SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                UpdateQueryfun(ProDBPath,query, Record)

                NPTotalHours = datetime.min
                ActiveJobPage = False
                Cancel()
                Timer1.stop_clock()
            
            messagebox.showinfo('Completed','Analysis Updated Successfully!')
            if Tname == 2 or T4Stage == 'Analysis':
                WorkQueueRBCheck(RBCan, Timer1)

    def Cancel():
        Validate_Clear()
        Entry2.delete(0, END)
        Entry3.delete(0, END)
        Entry4.delete(0, END)
        Entry5.set('')
        Entry6.delete(0, END)
        Entry7.delete(0, END)

        DocCost_E.delete(0, END)
        Entry8.delete(0, END)

        Entry9.delete(1.0, END)
        Entry10.set('')
        Entry11.delete(1.0, END)
        Entry12.delete(0, END)
        
        Entry11.config(state='normal')
        Entry12.config(state='normal')
        Entry11.delete(1.0, END)
        Entry12.delete(0, END)
        Label11.config(text="Reason")
        Label12.config(text="Date Communicated to Bank")
        Entry11.config(state='disabled')
        Entry12.config(state='disabled')
        
    def StatusSelected(event):
        TempStatus = Entry10.get()

        if TempStatus == "RM" or TempStatus == "On Hold":
            Label11.config(text='Reason*')
            Label12.config(text='Date Communicated to Bank*')
            Entry11.config(state='normal')
            Entry12.config(state='normal')
            
        else:
            Entry11.config(state='normal')
            Entry12.config(state='normal')
            Entry11.delete(1.0, END)
            Entry12.delete(0, END)

            Label11.config(text='Reason')
            Label12.config(text='Date Communicated to Bank')
            Entry11.config(state='disabled')
            Entry12.config(state='disabled')

    RBAnalysis_V_Entry2 = StringVar()
    RBAnalysis_V_Entry3 = StringVar()
    RBAnalysis_V_Entry8 = StringVar()
    RBAnalysis_V_DocCost_E = StringVar()

    Label1 = Label(Can4, text="No of Layers*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can4, text="Individual*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label3 = Label(Can4, text="Entity*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label4 = Label(Can4, text="Risk Level*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can4, text="Risk Factors*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can4, text="Sanctions*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7 = Label(Can4, text="PEP*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    DocCost_L = Label(Can4, text="Document Cost*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label8 = Label(Can4, text="File Path*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    Label9 = Label(Can4, text="Comments",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10 = Label(Can4, text="Status*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label11 = Label(Can4, text="Reason*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label12_0 = Label(Can4, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label12 = Label(Can4, text="Date Communicated to Bank*",width=16,height=2,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=125,anchor='e')

    Entry2 = Entry(Can4,validate='key',textvariable=RBAnalysis_V_Entry2,bg="white",font=("Calibri",10),width=10)
    Entry2['validatecommand'] = (Entry2.register(AcceptNum),'%P','%d')
    Entry3 = Entry(Can4,validate='key',textvariable=RBAnalysis_V_Entry3,bg="white",font=("Calibri",10),width=10)
    Entry3['validatecommand'] = (Entry3.register(AcceptNum),'%P','%d')

    Entry4_Values = SelectQueryfun(SupportDBPath,"SELECT RiskName FROM tblRiskLevel WHERE Project = 'RB';")
    Entry4 = AutocompleteCombobox(Can4, font=("Calibri",10), width=10, completevalues=Entry4_Values)
    Entry4_msg = 'This typed Risk Level is not available in the list, please check!'
    
    Entry5_Values = SelectQueryfun(SupportDBPath,"SELECT RiskFactor FROM tblRiskFactors WHERE Project = 'RB';")
    Entry5 = AutocompleteCombobox(Can4, font=("Calibri",10), width=10, completevalues=Entry5_Values)
    Entry5_msg = 'This typed Risk Factor is not available in the list, please check!'
    
    Entry6_Values = ['Yes', 'No']
    Entry6 = AutocompleteCombobox(Can4, font=("Calibri",10), width=10, completevalues=Entry6_Values)
    Entry6_msg = 'This typed Option is not available in the list, please check!'
    
    Entry7_Values = ['Yes', 'No']
    Entry7 = AutocompleteCombobox(Can4, font=("Calibri",10), width=10, completevalues=Entry7_Values)
    Entry7_msg = 'This typed Option is not available in the list, please check!'
    
    DocCost_E = Entry(Can4,validate='key',textvariable=RBAnalysis_V_DocCost_E,bg="white",font=("Calibri",10),width=12)
    DocCost_E['validatecommand'] = (DocCost_E.register(AcceptDecimal),'%P')

    Entry8 = Entry(Can4,textvariable=RBAnalysis_V_Entry8,bg="white",font=("Calibri",10),width=45)
    
    Entry9 = Text(Can4,bg="white",font=("Calibri",10),width=65,height=2)
    Entry9.bind('<Tab>', lambda event: focusNext(Entry9))
    Entry9.bind('<Shift-Tab>', lambda event: focusPrev(Entry9))

    Entry10_Values = SelectQueryfun(SupportDBPath,"SELECT StatusName FROM tblStatusSelect WHERE StatusName != 'Revert Back' AND Project = 'RB';")
    Entry10 = AutocompleteCombobox(Can4, font=("Calibri",10), width=22, completevalues=Entry10_Values)
    Entry10_msg = 'This typed Status is not available in the list, please check!'
    Entry10.bind("<<ComboboxSelected>>", StatusSelected)
    Entry10.bind("<FocusOut>", StatusSelected)
    
    Entry11 = Text(Can4,bg="white",font=("Calibri",10),width=28,height=3)
    Entry11.bind('<Tab>', lambda event: focusNext(Entry11))
    Entry11.bind('<Shift-Tab>', lambda event: focusPrev(Entry11))

    today = date.today()
    Entry12 = DateEntry(Can4,width=15,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy',maxdate=today)
    Entry12.delete(0, END)
    
    Button1 = Button(Can4, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(Can4, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')

    Button1.place(x=450, y=430)
    Button2.place(x=650, y=430)

    StatusSelected(Event)

    query = ("SELECT * FROM tblIssuesAnaRB WHERE ReviewID = '" + ReviewID + "' ORDER BY AnalysisID DESC;")
    result = ViewQueryfun(ProDBPath, query)
    if len(result) > 0:
        Entry2.insert(0,result[0][2])
        Entry3.insert(0,result[0][3])
        Entry4.insert(0,result[0][4])
        Entry5.set(result[0][5])
        Entry6.insert(0,result[0][6])
        Entry7.insert(0,result[0][7])
        DocCost_E.insert(0,result[0][8])
        Entry8.insert(0,result[0][9])
        Entry9.insert(1.0,result[0][10])
        Entry10.set(result[0][11])

        StatusSelected(Event)

        Entry11.insert(1.0,result[0][12])

        DateValue = result[0][13]
        if DateValue == '' or DateValue == None:
            Entry12.delete(0,END)
        else:
            Entry12.set_date(result[0][13])
    
    if Tname == 3 or T4Stage == 'Peer Reviewer':
        Entry9.config(state = "normal")
        Entry9.bind("<Key>", lambda a: "break")
        Entry10.config(state = "disabled")
        
        Button1.config(text="Update")
        Button2.config(state = 'disabled')

    if Tname == 'Archive':
        ActiveJobPage = False
        
        Button1.config(state = 'disabled')
        Button2.config(state = 'disabled')
        
    Label1.place(x=280, y=30)
    Label2.place(x=410, y=10)
    Label3.place(x=500, y=10)
    Label4.place(x=280, y=80)
    Label5.place(x=630, y=80)
    Label6.place(x=280, y=130)
    Label7.place(x=630, y=130)

    DocCost_L.place(x=280, y=180)
    Label8.place(x=630, y=180)

    Label9.place(x=280, y=235)
    Label10.place(x=280, y=295)
        
    Entry2.place(x=410, y=30)
    Entry3.place(x=500, y=30)
    Entry4.place(x=410, y=80)
    Entry5.place(x=760, y=80)
    Entry6.place(x=410, y=130)
    Entry7.place(x=760, y=130)

    DocCost_E.place(x=410, y=180)
    Entry8.place(x=760, y=180)

    Entry9.place(x=410, y=230)
    Entry10.place(x=410, y=295)

    Label11.place(x=280, y=360)
    Label12.place(x=630, y=350)
    Entry11.place(x=410, y=350)
    Label12_0.place(x=750, y=340)
    Entry12.place(x=760, y=360)

    Entry9_vsb = ttk.Scrollbar(Can4, orient="vertical", command=Entry9.yview)
    Entry9_vsb.place(x=865, y=230, height=35)
    Entry9.configure(yscrollcommand=Entry9_vsb.set)

    Entry11_vsb = ttk.Scrollbar(Can4, orient="vertical", command=Entry11.yview)
    Entry11_vsb.place(x=610, y=350, height=50)
    Entry11.configure(yscrollcommand=Entry11_vsb.set)
    
    TempStatus = Entry10.get()

    if TempStatus == "RM" or TempStatus == "On Hold":
        Label11.config(text='Reason*')
        Label12.config(text='Date Communicated to Bank*')
        Entry11.config(state='normal')
        Entry12.config(state='normal')
    else:
        Entry11.config(state='normal')
        Entry12.config(state='normal')
        Entry11.delete(1.0, END)
        Entry12.delete(0, END)

        Label11.config(text='Reason')
        Label12.config(text='Date Communicated to Bank')
        Entry11.config(state='disabled')
        Entry12.config(state='disabled')

########################################################## This is Peer Reviewer Page for RB ########################################################

def ViewPeerRB(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = ''):

    global GeneralRB_B, AnalysisRB_B, PeerRB_B

    GeneralRB_B.config(bg='#006E8E',fg='white')
    AnalysisRB_B.config(bg='#006E8E',fg='white')
    PeerRB_B.config(bg='sky blue',fg='black')

    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False

    Can5=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can5.place(x=5, y=35)

    EntryDate = datetime.now().strftime('%d-%m-%Y')
    StartTime = StartTime

    def Validate_Clear():
        LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label14, Label15, Label16, Label17, Label18, Label19]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label14, Label15, Label16]
        AllEntryList = [Entry1, Entry2, Entry3, Entry4, Entry5, Entry6, Entry7, Entry8, Entry9, Entry10, Entry11, Entry12, Entry13, Entry14, Entry15, Entry16]
        AllEntryValues = [Entry1_Values]
        AllEntryMessage = [Entry1_msg]
        
        Submit = True

        if Entry18.get() == 'On Hold' and Entry19.get(1.0, END).strip() == '':
            Label19.config(foreground='red')
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        if Entry18.get() != 'In Process':
            if (Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or 
                Entry9.get() == '' or Entry10.get() == '' or Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == '' or Entry14.get() == '' or Entry15.get() == '' or Entry16.get() == '' or 
                Entry18.get() == ''):
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[0], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='red')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[0])
                    Submit = False
                    break
        
        if Entry18.get() != '':
            result = DropDown_Validation(Entry18_Values, Entry18)
            if result == 'Failed':
                Label18.config(foreground='red')
                Entry18.focus_set()
                messagebox.showerror('Validation Check',AllEntryMessage[0])
                Submit = False
      
        if Submit:
            SubmitPRRB()
        
    def SubmitPRRB():
        global NPTotalHours
        global ActiveJobPage
        
        if Entry18.get() == 'Completed':
            EntryStatus = 'Completed'
            Status = 'Completed'
            Stage = 'Job Completed'
            Assignee = ''
        elif Entry18.get() == 'Revert Back':
            EntryStatus = 'Revert Back'
            Status = 'Revert Back'
            Stage = 'Analysis'
            Assignee = ''
        else:
            EntryStatus = Entry18.get()
            Status = Entry18.get()
            Stage = 'Peer Reviewer'
            Assignee = Var_UserName

        EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

        Record = (ReviewID, Entry1.get(), Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(), 
                    Entry11.get(), Entry12.get(), Entry13.get(), Entry14.get(), Entry15.get(), Entry16.get(), Entry17.get(1.0, END).strip(), Entry18.get(), Entry19.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesPRRB (ReviewID, LegalName, TradeNames, LegalForm, RegNumber, RegAddress, OprAddress, SBICodes, NatureofBusiness, LegalRep, OwnershipStructure, EntityChecks, 
                    PersonChecks, KYCnetFields, KYCnetFA, KYCnetTree, AdminErrors, Comments, Status, Reason, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        
        PRID = UpdateQueryReturn(ProDBPath, query, Record)

        if Tname == 3 or T4Stage == 'Peer Reviewer':
            Record = ('PR', PRID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Peer Reviewer')            
            query = ("INSERT INTO tblIssuesStatusRB (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
            UpdateQueryfun(ProDBPath, query, Record)

            Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
            query = ("""UPDATE tblIssuesMainRB SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
            UpdateQueryfun(ProDBPath, query, Record)

            NPTotalHours = datetime.min
            ActiveJobPage = False
            Cancel()
            Timer1.stop_clock()

        messagebox.showinfo('Completed','Peer Reviewer Updated Successfully!')
        if Tname == 3 or T4Stage == 'Peer Reviewer':
            WorkQueueRBCheck(RBCan, Timer1)

    def Cancel():
        Entry1.set('')
        Entry2.set('')
        Entry3.set('')
        Entry4.set('')
        Entry5.set('')
        Entry6.set('')
        Entry7.set('')
        Entry8.set('')
        Entry9.set('')
        Entry10.set('')
        Entry11.set('')
        Entry12.set('')
        Entry13.set('')
        Entry14.set('')
        Entry15.set('')
        Entry16.set('')
        Entry17.delete(1.0, END)
        Entry18.set('')
        Entry19.delete(1.0, END)
        StatusSelected(Event)

    Label1 = Label(Can5, text="Legal Name*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can5, text="Trade Names*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can5, text="Legal Form*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can5, text="Registration number (or OGRN for Russian cases)*",width=25,height=2,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=150,anchor='e')
    Label5 = Label(Can5, text="Registered Address*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can5, text="Operational Address*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7 = Label(Can5, text="SBI Codes (OKVED Code for Russian Clients)*",width=25,height=2,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=150,anchor='e')
    Label8 = Label(Can5, text="Nature of Business*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9 = Label(Can5, text="Legal Representatives (Full name, DOB, when available and function)*",width=25,height=3,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=150,anchor='e')
    Label10 = Label(Can5, text="Ownership Structure*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label11 = Label(Can5, text="Entity Checks*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label12 = Label(Can5, text="Person Checks*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label13 = Label(Can5, text="KYCnet - Fields*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label14 = Label(Can5, text="KYCnet - FA*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label15 = Label(Can5, text="KYCnet Relation Tree*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label16 = Label(Can5, text="Administrative Errors (Typo, Spelling, Highlights etc)*",width=25,height=2,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=180,anchor='e')
    Label17 = Label(Can5, text="Comments",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label18 = Label(Can5, text="Status*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label19 = Label(Can5, text="Reason",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    def ApplyStyle(EntryName):
        style= ttk.Style()
        style.theme_use('default')
        style.configure("Style0.TCombobox", foreground= "black", background= "white")
        style.configure("Style1.TCombobox", foreground= "red", background= "white")
        style.configure("Style2.TCombobox", foreground= "green", background= "white")

        if EntryName.get() == 'Fail':
            EntryName.config(style='Style1.TCombobox')
        elif EntryName.get() == 'Pass':
            EntryName.config(style='Style2.TCombobox')
        else:
            EntryName.config(style='Style0.TCombobox')

    Entry1_Values = ['Pass', 'Fail']
    Entry1 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry1_msg = 'This typed text is not available in the list, please check!'
    Entry2 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry3 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry4 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry5 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry6 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry7 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry8 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry9 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry10 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry11 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry12 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry13 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry14 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry15 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry16 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
        
    Entry17 = Text(Can5,bg="white",font=("Calibri",10),width=30,height=10)
    Entry17.bind('<Tab>', lambda event: focusNext(Entry17))
    Entry17.bind('<Shift-Tab>', lambda event: focusPrev(Entry17))

    Entry18_Values = SelectQueryfun(SupportDBPath,"SELECT StatusName FROM tblStatusSelect WHERE Project = 'RB';")
    Entry18 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry18_Values)
    
    Entry19 = Text(Can5,bg="white",font=("Calibri",10),width=30,height=2)
    Entry19.bind('<Tab>', lambda event: focusNext(Entry19))
    Entry19.bind('<Shift-Tab>', lambda event: focusPrev(Entry19))
    
    Button1 = Button(Can5, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(Can5, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')

    Button1.place(x=450, y= 430)
    Button2.place(x=650, y= 430)

    Entry1.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry1))
    Entry2.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry2))
    Entry3.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry3))
    Entry4.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry4))
    Entry5.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry5))
    Entry6.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry6))
    Entry7.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry7))
    Entry8.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry8))
    Entry9.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry9))
    Entry10.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry10))
    Entry11.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry11))
    Entry12.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry12))
    Entry13.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry13))
    Entry14.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry14))
    Entry15.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry15))
    Entry16.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry16))
    
    Entry1.bind("<FocusOut>", lambda event: ApplyStyle(Entry1))
    Entry2.bind("<FocusOut>", lambda event: ApplyStyle(Entry2))
    Entry3.bind("<FocusOut>", lambda event: ApplyStyle(Entry3))
    Entry4.bind("<FocusOut>", lambda event: ApplyStyle(Entry4))
    Entry5.bind("<FocusOut>", lambda event: ApplyStyle(Entry5))
    Entry6.bind("<FocusOut>", lambda event: ApplyStyle(Entry6))
    Entry7.bind("<FocusOut>", lambda event: ApplyStyle(Entry7))
    Entry8.bind("<FocusOut>", lambda event: ApplyStyle(Entry8))
    Entry9.bind("<FocusOut>", lambda event: ApplyStyle(Entry9))
    Entry10.bind("<FocusOut>", lambda event: ApplyStyle(Entry10))
    Entry11.bind("<FocusOut>", lambda event: ApplyStyle(Entry11))
    Entry12.bind("<FocusOut>", lambda event: ApplyStyle(Entry12))
    Entry13.bind("<FocusOut>", lambda event: ApplyStyle(Entry13))
    Entry14.bind("<FocusOut>", lambda event: ApplyStyle(Entry14))
    Entry15.bind("<FocusOut>", lambda event: ApplyStyle(Entry15))
    Entry16.bind("<FocusOut>", lambda event: ApplyStyle(Entry16))
    
    query = ("SELECT * FROM tblIssuesPRRB WHERE ReviewID = '" + ReviewID + "' ORDER BY PRID DESC;")
    result = ViewQueryfun(ProDBPath, query)
    if len(result) > 0:
        Entry1.set(result[0][2])
        Entry2.set(result[0][3])
        Entry3.set(result[0][4])
        Entry4.set(result[0][5])
        Entry5.set(result[0][6])
        Entry6.set(result[0][7])
        Entry7.set(result[0][8])
        Entry8.set(result[0][9])
        Entry9.set(result[0][10])
        Entry10.set(result[0][11])
        Entry11.set(result[0][12])
        Entry12.set(result[0][13])
        Entry13.set(result[0][14])
        Entry14.set(result[0][15])
        Entry15.set(result[0][16])
        Entry16.set(result[0][17])
        Entry17.insert(1.0, result[0][18].strip())
        Entry18.set(result[0][19])
        Entry19.insert(1.0, result[0][20].strip())
    
    if Tname == 2 or T4Stage == 'Analysis' or Tname == 'Archive':
        if Tname == 'Archive':
            ActiveJobPage = False

        Button1.config(state='disabled')
        Button2.config(state='disabled')

    Label1.place(x=20, y=20)
    Label2.place(x=20, y=80)
    Label3.place(x=20, y=140)
    Label4.place(x=20, y=200)
    Label5.place(x=20, y=260)
    Label6.place(x=20, y=320)
    Label7.place(x=20, y=380)

    Label8.place(x=370, y=20)
    Label9.place(x=370, y=80)
    Label10.place(x=370, y=150)
    Label11.place(x=370, y=210)
    Label12.place(x=370, y=270)
    Label13.place(x=370, y=330)
    Label14.place(x=370, y=390)

    Label15.place(x=710, y=20)
    Label16.place(x=710, y=80)
    Label17.place(x=710, y=200)
    Label18.place(x=710, y=330)
    Label19.place(x=710, y=390)
    
    Entry1.place(x=210, y=20)
    Entry2.place(x=210, y=80)
    Entry3.place(x=210, y=140)
    Entry4.place(x=210, y=210)
    Entry5.place(x=210, y=260)
    Entry6.place(x=210, y=320)
    Entry7.place(x=210, y=390)

    Entry8.place(x=560, y=20)
    Entry9.place(x=560, y=90)
    Entry10.place(x=560, y=150)
    Entry11.place(x=560, y=210)
    Entry12.place(x=560, y=270)
    Entry13.place(x=560, y=330)
    Entry14.place(x=560, y=390)

    Entry15.place(x=900, y=20)
    Entry16.place(x=900, y=90)
    Entry17.place(x=900, y=140)
    Entry18.place(x=900, y=330)
    Entry19.place(x=900, y=385)

    Entry17_vsb = ttk.Scrollbar(Can5, orient="vertical", command=Entry17.yview)
    Entry17_vsb.place(x=1113, y=140, height=155)
    Entry17.configure(yscrollcommand=Entry17_vsb.set)

    Entry19_vsb = ttk.Scrollbar(Can5, orient="vertical", command=Entry19.yview)
    Entry19_vsb.place(x=1113, y=385, height=35)
    Entry19.configure(yscrollcommand=Entry19_vsb.set)

    def StatusSelected(event):
        TempStatus = Entry18.get()

        if TempStatus == "On Hold":
            Label19.config(text="Reason*")
            Entry19.config(state='normal')
            
        else:
            Label19.config(text="Reason")
            Entry19.delete(1.0, END)
            Entry19.config(state='disabled')
    
    Entry18.bind("<<ComboboxSelected>>", StatusSelected)
    Entry18.bind("<FocusOut>", StatusSelected)

    StatusSelected(Event)
    
    FTEList = [Entry1, Entry2, Entry3, Entry4, Entry5, Entry6, Entry7, Entry8, Entry9, Entry10, Entry11, Entry12, Entry13, Entry14, Entry15, Entry16]
    
    for e in FTEList:
        ApplyStyle(e)

def ViewIssuesRB(IssueCan, ReviewID, Tname, Stage, RBCan, Timer1):
    
    Can2=Canvas(IssueCan,bg="white", width=1160, height=500, highlightthickness=0)
    Can2.place(x=10, y=40)

    StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

    global GeneralRB_B, AnalysisRB_B, PeerRB_B

    GeneralRB_B = Button(Can2, text="General", width=15, height=1, command=lambda:ViewGeneralRB(Can2, ReviewID, Tname, RBCan),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')
    AnalysisRB_B = Button(Can2, text="Analysis", width=15, height=1, command=lambda:ViewAnalysisRB(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage=Stage),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')           
    PeerRB_B = Button(Can2, text="Peer Reviewer", width=15, height=1, command=lambda:ViewPeerRB(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage=Stage),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')
    
    GeneralRB_B.place(x=20, y=7)
    AnalysisRB_B.place(x=150, y=7)
    PeerRB_B.place(x=280, y=7)

    Timer1.start_clock(Can2)

    if Tname == 2:
        ViewAnalysisRB(Can2, ReviewID, Tname, RBCan, StartTime, Timer1)
    elif Tname == 3:
        ViewPeerRB(Can2, ReviewID, Tname, RBCan, StartTime, Timer1)
    elif Tname == 4:
        if Stage == 'Analysis':
            ViewAnalysisRB(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = Stage)
        elif Stage == 'Peer Reviewer':
            ViewPeerRB(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = Stage)
    elif Tname == 'Archive':
        Timer1.hide_clock()
        ViewGeneralRB(Can2, ReviewID, 'Archive', RBCan)

def SelectedIssueRB(RBCan, ReviewID, Tname, Stage, Timer1):
    global NPTotalHours
    NPTotalHours = datetime.min
    
    IssueCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    IssueCan.place(x=5, y=40)

    ProjectLabel = Label(IssueCan, text="Roland Berger",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)

    IssueLabel = Label(IssueCan, text=ReviewID + ' - ' + Stage, width=30,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    IssueLabel.place(x=500, y=5)

    if Tname == 'Archive':
        IssueLabel.config(text=ReviewID + ' - Review')
    
    ViewIssuesRB(IssueCan, ReviewID, Tname, Stage, RBCan, Timer1)

########################################################## This is Work Queue Page for RB ########################################################

def WorkQueueRBCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        WorkQueueRB(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            WorkQueueRB(RBCan, Timer1)

global ActiveDashboard
ActiveDashboard = False
        
def WorkQueueRB(RBCan, Timer1, Initial=''):

    global WorkQueueRB_B, CreateRB_B, AdminRB_B, ArchiveRB_B, UserStatsRB_B

    WorkQueueRB_B.config(bg='#E7E6E6')
    CreateRB_B.config(bg='sky blue')
    AdminRB_B.config(bg='sky blue')
    ArchiveRB_B.config(bg='sky blue')
    UserStatsRB_B.config(bg='sky blue')
    
    global NPTotalHours
    NPTotalHours = datetime.min
    
    ProjectsCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ProjectsCan.place(x=5, y=40)

    ProjectLabel = Label(ProjectsCan, text="Roland Berger",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)

    def SelectOption():
        selection = Projects_Option.get()

        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        if selection == 1:
            Can1=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
            Can1.place(x=10, y=40)

            Label1 = Label(Can1, text="ANALYSIS",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label2 = Label(Can1, text="PEER REVIEW",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label3 = Label(Can1, text="ON HOLD",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            
            Label1.place(x=100, y=10)
            Label2.place(x=450, y=10)
            Label3.place(x=850, y=10)

            TVFrame2=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame2.place(x=1, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "COUNTRY"]
            RBtree2 = MyTreeview(TVFrame2, columns=arrlbHeader, show="headings", height=22)

            RBtree2.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree2.heading("#1", text="REVIEW ID")
            RBtree2.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree2.heading("#2", text="DUE DATE")
            RBtree2.column("#3", anchor=tkinter.CENTER, width=80)
            RBtree2.heading("#3", text="STATUS")
            RBtree2.column("#4", anchor=tkinter.CENTER, width=128)
            RBtree2.heading("#4", text="ASSIGNED TO")
            RBtree2.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree2.heading("#5", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree2.column(arrlbHeader[iCount], stretch=True)

            TVFrame3=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame3.place(x=360, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "COUNTRY"]
            RBtree3 = MyTreeview(TVFrame3, columns=arrlbHeader, show="headings", height=22)

            RBtree3.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree3.heading("#1", text="REVIEW ID")
            RBtree3.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree3.heading("#2", text="DUE DATE")
            RBtree3.column("#3", anchor=tkinter.CENTER, width=80)
            RBtree3.heading("#3", text="STATUS")
            RBtree3.column("#4", anchor=tkinter.CENTER, width=128)
            RBtree3.heading("#4", text="ASSIGNED TO")
            RBtree3.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree3.heading("#5", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree3.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree3.column(arrlbHeader[iCount], stretch=True)

            TVFrame4=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame4.place(x=720, y=40, width=430, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "STAGE", "COUNTRY"]
            RBtree4 = MyTreeview(TVFrame4, columns=arrlbHeader, show="headings", height=22)

            RBtree4.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree4.heading("#1", text="REVIEW ID")
            RBtree4.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree4.heading("#2", text="DUE DATE")
            RBtree4.column("#3", anchor=tkinter.CENTER, width=75)
            RBtree4.heading("#3", text="STATUS")
            RBtree4.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#4", text="ASSIGNED TO")
            RBtree4.column("#5", anchor=tkinter.CENTER, width=100)
            RBtree4.heading("#5", text="STAGE")
            RBtree4.column("#6", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#6", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree4.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree4.column(arrlbHeader[iCount], stretch=True)
            
            RBtree2.place(x=0, y=0, height=445, width=340)
            RBtree3.place(x=0, y=0, height=445, width=340)
            RBtree4.place(x=0, y=0, height=445, width=425)

            Allworks_vsb2 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree2.yview)
            Allworks_vsb2.place(x=340, y=40, height=460)
            RBtree2.configure(yscrollcommand=Allworks_vsb2.set)

            Allworks_hsb2 = ttk.Scrollbar(TVFrame2, orient="horizontal", command=RBtree2.xview)
            Allworks_hsb2.place(x=0, y=445, width=340)
            RBtree2.configure(xscrollcommand=Allworks_hsb2.set)

            Allworks_vsb3 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree3.yview)
            Allworks_vsb3.place(x=700, y=40, height=460)
            RBtree3.configure(yscrollcommand=Allworks_vsb3.set)

            Allworks_hsb3 = ttk.Scrollbar(TVFrame3, orient="horizontal", command=RBtree3.xview)
            Allworks_hsb3.place(x=0, y=445, width=340)
            RBtree3.configure(xscrollcommand=Allworks_hsb3.set)

            Allworks_vsb4 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree3.yview)
            Allworks_vsb4.place(x=1145, y=40, height=460)
            RBtree4.configure(yscrollcommand=Allworks_vsb4.set)

            Allworks_hsb4 = ttk.Scrollbar(TVFrame4, orient="horizontal", command=RBtree4.xview)
            Allworks_hsb4.place(x=0, y=445, width=425)
            RBtree4.configure(xscrollcommand=Allworks_hsb4.set)
            
            ViewDashfn(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Assignee, Country FROM tblIssuesMainRB as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM');""",RBtree2)
            ViewDashfn(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Assignee, Country FROM tblIssuesMainRB as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM');""",RBtree3)
            ViewDashfn(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage, Country FROM tblIssuesMainRB as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID
                            WHERE Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM' );""",RBtree4)

            def OnClick(event, treename, Tname):
                item = treename.selection()
                StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

                for i in item:
                    Status = treename.item(i, "values")[2]
                    ReviewID = treename.item(i, "values")[0]

                    if Tname == 2:
                        CrossCheck = ViewQueryfun(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Analysis"
                        TblName = 'Analysis'
                        AccessLevel = 'Analyst'

                        PreLevelCheck = ViewQueryfun(ProDBPath, """SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        if len(PreLevelCheck) > 0:
                            PreLevelUser = PreLevelCheck[0][0]
                        else:
                            PreLevelUser = ''

                    elif Tname == 3:
                        CrossCheck = ViewQueryfun(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                        
                        Stage = "Peer Reviewer"
                        TblName = 'PR'
                        AccessLevel = 'PR'

                        PreLevelCheck = ViewQueryfun(ProDBPath, """SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                        
                        if len(PreLevelCheck) > 0:
                            PreLevelUser = PreLevelCheck[0][0]
                        else:
                            PreLevelUser = ''

                    elif Tname == 4:
                        CrossCheck = ViewQueryfun(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM' ) AND A.ReviewID = """ + ReviewID + ";")

                        Stage = treename.item(i, "values")[4]

                        if Stage == 'Analysis':
                            AccessLevel = 'Analyst'

                            PreLevelCheck = ViewQueryfun(ProDBPath, """SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B WHERE Stage = 'Peer Reviewer' AND Status IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage = 'Peer Reviewer' AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                            
                            if len(PreLevelCheck) > 0:
                                PreLevelUser = PreLevelCheck[0][0]
                            else:
                                PreLevelUser = ''

                        elif Stage == 'Peer Reviewer':
                            AccessLevel = 'PR'

                            PreLevelCheck = ViewQueryfun(ProDBPath, """SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B WHERE Stage = 'Analysis' AND Status IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage = 'Analysis' AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                            
                            if len(PreLevelCheck) > 0:
                                PreLevelUser = PreLevelCheck[0][0]
                            else:
                                PreLevelUser = ''
                        
                    if len(CrossCheck) == 0:
                        messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                        WorkQueueRB(RBCan, Timer1)
                    else:
                        if CrossCheck[0][0] == treename.item(i, "values")[0] and CrossCheck[0][1] == treename.item(i, "values")[1] and CrossCheck[0][2] == treename.item(i, "values")[2] and CrossCheck[0][3] == treename.item(i, "values")[3] and CrossCheck[0][4] == Stage:

                            if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                                if PreLevelUser != Var_UserID:

                                    if Status == 'Unassigned' or Status == 'Revert Back' or (Status == 'Assigned' and treename.item(i, "values")[3] == Var_UserName):
                                        query = ("SELECT MAX(IssueID) FROM tblIssuesGenRB WHERE ReviewID = '" + ReviewID + "';")
                                        IssueID = SelectQueryfun(ProDBPath, query)
                                        EntryStatus = 'In Process'
                                        Status = 'In Process'
                                        
                                        Record = (TblName, IssueID[0], ReviewID, Var_UserName, Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(datetime.min, '%H:%M:%S'), Stage)
                                        UpdateQueryfun(ProDBPath, "INSERT INTO tblIssuesStatusRB (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

                                        Record = (Var_UserName, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                                        query = ("""UPDATE tblIssuesMainRB SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                                        UpdateQueryfun(ProDBPath, query, Record)

                                        SelectedIssueRB(RBCan, ReviewID, Tname, Stage, Timer1)
                                    
                                    elif treename.item(i, "values")[3] != Var_UserName:
                                        messagebox.showerror('Validation Check','This Review ID is already assigned to some one else, Please refresh and try again!')
                                        WorkQueueRB(RBCan, Timer1)

                                    else:
                                        SelectedIssueRB(RBCan, ReviewID, Tname, Stage, Timer1)

                                else:
                                    messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")

                            else:
                                messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                                                
                        else:
                            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                            WorkQueueRB(RBCan, Timer1)
            
            RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2, Tname=2))
            RBtree3.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree3, Tname=3))
            RBtree4.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree4, Tname=4))

        elif selection == 2:
            Can2=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
            Can2.place(x=10, y=40)
            
            Label1 = Label(Can2, text="ANALYSIS",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label2 = Label(Can2, text="PEER REVIEW",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label3 = Label(Can2, text="ON HOLD",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            
            Label1.place(x=100, y=10)
            Label2.place(x=450, y=10)
            Label3.place(x=850, y=10)

            TVFrame2=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame2.place(x=1, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "COUNTRY"]
            RBtree2 = MyTreeview(TVFrame2, columns=arrlbHeader, show="headings", height=22)

            RBtree2.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree2.heading("#1", text="REVIEW ID")
            RBtree2.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree2.heading("#2", text="DUE DATE")
            RBtree2.column("#3", anchor=tkinter.CENTER, width=150)
            RBtree2.heading("#3", text="STATUS")
            RBtree2.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree2.heading("#4", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree2.column(arrlbHeader[iCount], stretch=True)

            TVFrame3=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame3.place(x=360, y=40, width=340, height=460)
            
            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "COUNTRY"]
            RBtree3 = MyTreeview(TVFrame3, columns=arrlbHeader, show="headings", height=22)

            RBtree3.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree3.heading("#1", text="REVIEW ID")
            RBtree3.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree3.heading("#2", text="DUE DATE")
            RBtree3.column("#3", anchor=tkinter.CENTER, width=150)
            RBtree3.heading("#3", text="STATUS")
            RBtree3.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree3.heading("#4", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree3.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree3.column(arrlbHeader[iCount], stretch=True)

            TVFrame4=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame4.place(x=720, y=40, width=430, height=460)
            
            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "STAGE", "COUNTRY"]
            RBtree4 = MyTreeview(TVFrame4, columns=arrlbHeader, show="headings", height=22)

            RBtree4.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree4.heading("#1", text="REVIEW ID")
            RBtree4.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree4.heading("#2", text="DUE DATE")
            RBtree4.column("#3", anchor=tkinter.CENTER, width=140)
            RBtree4.heading("#3", text="STATUS")
            RBtree4.column("#4", anchor=tkinter.CENTER, width=115)
            RBtree4.heading("#4", text="STAGE")
            RBtree4.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#5", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree4.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree4.column(arrlbHeader[iCount], stretch=True)
            
            RBtree2.place(x=0, y=0, height=445, width=340)
            RBtree3.place(x=0, y=0, height=445, width=340)
            RBtree4.place(x=0, y=0, height=445, width=425)

            Myworks_vsb2 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree2.yview)
            Myworks_vsb2.place(x=340, y=40, height=460)
            RBtree2.configure(yscrollcommand=Myworks_vsb2.set)

            Myworks_hsb2 = ttk.Scrollbar(TVFrame2, orient="horizontal", command=RBtree2.xview)
            Myworks_hsb2.place(x=0, y=445, width=340)
            RBtree2.configure(xscrollcommand=Myworks_hsb2.set)

            Myworks_vsb3 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree3.yview)
            Myworks_vsb3.place(x=700, y=40, height=460)
            RBtree3.configure(yscrollcommand=Myworks_vsb3.set)

            Myworks_hsb3 = ttk.Scrollbar(TVFrame3, orient="horizontal", command=RBtree3.xview)
            Myworks_hsb3.place(x=0, y=445, width=340)
            RBtree3.configure(xscrollcommand=Myworks_hsb3.set)

            Myworks_vsb4 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree3.yview)
            Myworks_vsb4.place(x=1145, y=40, height=460)
            RBtree4.configure(yscrollcommand=Myworks_vsb4.set)

            Myworks_hsb4 = ttk.Scrollbar(TVFrame4, orient="horizontal", command=RBtree4.xview)
            Myworks_hsb4.place(x=0, y=445, width=425)
            RBtree4.configure(xscrollcommand=Myworks_hsb4.set)
            
            ViewDashfn(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Country, Assignee FROM tblIssuesMainRB as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM');""",RBtree2)
            ViewDashfn(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Country, Assignee FROM tblIssuesMainRB as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'Unassigned', 'RM');""",RBtree3)
            ViewDashfn(ProDBPath, """SELECT A.ReviewID, A.DueDate, Status, Stage, Country, Assignee FROM tblIssuesMainRB as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE G.Assignee = '""" + Var_UserName + """' AND Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM');""",RBtree4)

            def OnClick(event, treename, Tname):
                item = treename.selection()
                StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
                for i in item:
                    Status = treename.item(i, "values")[2]
                    ReviewID = treename.item(i, "values")[0]
                    query = ("SELECT MAX(IssueID) FROM tblIssuesGenRB WHERE ReviewID = '" + ReviewID + "';")
                    IssueID = SelectQueryfun(ProDBPath,query)
                                       
                    if Tname == 2:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Analysis"
                        TblName = 'Analysis'
                    elif Tname == 3:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'Unassigned', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Peer Reviewer"
                        TblName = 'PR'
                    elif Tname == 4:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainRB as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE G.Assignee = '""" + Var_UserName + """' AND Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = treename.item(i, "values")[3]
                    
                    if len(CrossCheck) == 0:
                        messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                        WorkQueueRB(RBCan, Timer1)
                    else:
                        if CrossCheck[0][0] == treename.item(i, "values")[0] and CrossCheck[0][1] == treename.item(i, "values")[1] and CrossCheck[0][2] == treename.item(i, "values")[2] and CrossCheck[0][3] == Stage and CrossCheck[0][4] == Var_UserName:
                            if Status == 'Assigned':
                                EntryStatus = 'In Process'
                                Status = 'In Process'
                                Record = (TblName, IssueID[0], ReviewID, Var_UserName, Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(datetime.min, '%H:%M:%S'), Stage)
                                UpdateQueryfun(ProDBPath,"INSERT INTO tblIssuesStatusRB (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

                                Record = (Var_UserName, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                                query = ("""UPDATE tblIssuesMainRB SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                                UpdateQueryfun(ProDBPath, query, Record)

                                SelectedIssueRB(RBCan, ReviewID, Tname, Stage, Timer1)
                            else:
                                SelectedIssueRB(RBCan, ReviewID, Tname, Stage, Timer1)

                        else:
                            print('check')
                            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                            WorkQueueRB(RBCan, Timer1)
                    
            RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2, Tname=2))
            RBtree3.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree3, Tname=3))
            RBtree4.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree4, Tname=4))
    
    Projects_Option = IntVar()
    R1 = Radiobutton(ProjectsCan, text="All Works", variable=Projects_Option, value=1,command=SelectOption, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    R2 = Radiobutton(ProjectsCan, text="My Works", variable=Projects_Option, value=2,command=SelectOption, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    Projects_Option.set(2)
    SelectOption()

    R1.place(x=500, y=5)
    R2.place(x=700, y=5)

    Button1 = Button(ProjectsCan, text="Refresh", width=12, height=1, command=lambda:WorkQueueRB(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button1.place(x=1000, y=5)
        
########################################################## This is Admin Page for RB ########################################################
def AdminRBCheck(RBCan):
    global ActiveJobPage
    if ActiveJobPage == False:
        AdminRB(RBCan)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            AdminRB(RBCan)

def AdminRB(RBCan):

    global WorkQueueRB_B, CreateRB_B, AdminRB_B, ArchiveRB_B, UserStatsRB_B
    
    if Var_Admin != 'Yes':
        messagebox.showerror('No Access','You have no admin access, please contact your team leader!')
        return False
    else:
        WorkQueueRB_B.config(bg='sky blue')
        CreateRB_B.config(bg='sky blue')
        AdminRB_B.config(bg='#E7E6E6')
        ArchiveRB_B.config(bg='sky blue')
        UserStatsRB_B.config(bg='sky blue')

        global ActiveDashboard
        ActiveDashboard = False

        AdminCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
        AdminCan.place(x=5, y=40)
        
        ProjectLabel = Label(AdminCan, text="Roland Berger",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
        ProjectLabel.place(x=40, y=5)
        
        def AdminRawReports():
            ReportPath = fd.askdirectory(title='Select Folder Path')
            if ReportPath != '':
                TempPath = ReportPath + r"/RB Raw Data Report " + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsx"
                conn = sqlite3.connect(ProDBPath)
                query1 = "SELECT * FROM tblIssuesMainRB"
                query2 = "SELECT * FROM tblIssuesGenRB"
                query3 = "SELECT * FROM tblIssuesAnaRB"
                query4 = "SELECT * FROM tblIssuesPRRB"
                query5 = "SELECT * FROM tblIssuesReopenRB"
                query6 = "SELECT * FROM tblIssuesStatusRB"
                query7 = "SELECT * FROM tblNonPro"
                queries = [query1, query2, query3, query4, query5, query6, query7]
                Excelsheets = ['Main', 'General', 'Analysis', 'Peer Reviewer', 'Reopen', 'Production', 'Non Production']
                
                writer = pd.ExcelWriter(TempPath, engine = 'xlsxwriter')
                for q in queries:
                    df = pd.read_sql_query(q, conn)
                    df.to_excel(writer, sheet_name=Excelsheets[queries.index(q)], index=False)
                conn.close()
                writer.save()
                messagebox.showinfo('RB Raw Data','RB Raw Data Report Exported!')
                startfile(TempPath)
            else:
                messagebox.showerror('Folder Validation','Folder Path Not Selected!')
        
        def Billing_Validate_Clear():
            LabelList = [Label7, Label8]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='white')

        def Billing_Validate_Submit():
            Billing_Validate_Clear()

            DateLabelList = [Label7, Label8]
            DateEntryList = [Entry7, Entry8]

            if Entry7.get() == '' or Entry8.get() == '':
                messagebox.showerror('Validation Check','Start/End Date should not be left blank!')
                return False
            else:
                Submit = True
                for i in range(0,len(DateEntryList)):
                    if DateEntryList[i].get() != '':
                        result = Date_Validation2(DateEntryList[i])
                        if result == 'Failed':
                            DateLabelList[i].config(foreground='red')
                            DateEntryList[i].focus_set()
                            messagebox.showerror('Date Error','This typed date is not valid! Please check')
                            Submit = False
                            break
                            return false

            if Entry7.get_date() > Entry8.get_date():
                messagebox.showerror('Validation Check','Start Date should not be greater than End Date!')
                return False

            if Submit:
                BillingReports()


        def BillingReports():
            BStartDate = pd.to_datetime(Entry7.get() + ' 00:00:00', format='%d-%m-%Y %H:%M:%S')
            BEndDate = pd.to_datetime(Entry8.get() + ' 23:59:00', format='%d-%m-%Y %H:%M:%S')

            ReportPath = fd.askdirectory(title='Select Folder Path')
            if ReportPath != '':
                
                conn = sqlite3.connect(ProDBPath)
                query1 = "SELECT * FROM tblIssuesMainRB;"
                query2 = "SELECT * FROM tblIssuesAnaRB;"
                query3 = "SELECT * FROM tblIssuesStatusRB;"
                queries = [query1, query2, query3]
                for q in queries:
                    df = pd.read_sql_query(q, conn)
                    if queries.index(q) == 0:
                        df_Main = df
                    elif queries.index(q) == 1:
                        df_Ana = df
                    elif queries.index(q) == 2:
                        df_Pro = df
                
                conn.close()
                
                df_Main_Completed = pd.DataFrame(df_Main.loc[((df_Main['CurStatus']=='Completed') | (df_Main['CurStatus']=='Cancelled-Billable')) & (df_Main['CurStage']=='Job Completed')])
                df_Main_Completed['UpdatedTime']=pd.to_datetime(df_Main_Completed['UpdatedTime'], format='%d-%m-%Y %H:%M:%S')
                df_Main_Completed = df_Main_Completed.loc[(df_Main_Completed['UpdatedTime']>=BStartDate) & (df_Main_Completed['UpdatedTime']<=BEndDate)]
                df_Main_Completed['UpdatedTime'] = df_Main_Completed['UpdatedTime'].dt.strftime('%d-%m-%Y %H:%M:%S')
                df_Main_Completed['ReviewID'] = pd.to_numeric(df_Main_Completed['ReviewID'])
                
                df_Pro['ReviewID'] = pd.to_numeric(df_Pro['ReviewID'])
                df_Pro_Completed = df_Pro.merge(df_Main_Completed['ReviewID'], left_on=['ReviewID'], right_on=['ReviewID'], how='right')

                df_Pro_Completed['EntryDate']=pd.to_datetime(df_Pro_Completed['EntryDate'], format='%d-%m-%Y')
                df_Pro_Completed['EntryStartTime']=pd.to_datetime(df_Pro_Completed['EntryStartTime'], format='%d-%m-%Y %H:%M:%S')
                df_Pro_Completed['EntryEndTime']=pd.to_datetime(df_Pro_Completed['EntryEndTime'], format='%d-%m-%Y %H:%M:%S')
                df_Pro_Completed['NPHours']=pd.to_timedelta(df_Pro_Completed['NPHours'])
                
                df_Pro_Completed['ProductionHours'] = df_Pro_Completed['EntryEndTime'] - df_Pro_Completed['EntryStartTime']
                df_Pro_Completed['ProductionHours'] = pd.to_timedelta(df_Pro_Completed['ProductionHours'])
                df_Pro_Completed['FinalProductionHours'] = df_Pro_Completed['ProductionHours'] - df_Pro_Completed['NPHours']
                df_Pro_Completed = pd.DataFrame(df_Pro_Completed.groupby(['ReviewID'], as_index=False).agg({'FinalProductionHours':'sum'}))
                df_Pro_Completed['FinalProductionHoursSeconds'] = df_Pro_Completed['FinalProductionHours'] / numpy.timedelta64(1, 's')
                df_Pro_Completed['HoursUnit'] = (df_Pro_Completed['FinalProductionHoursSeconds'] / (60*60*24)) * 24
                df_Main_Completed_Final = df_Main_Completed.merge(df_Pro_Completed, left_on=['ReviewID'], right_on=['ReviewID'], how='left')

                df_Ana_Latest= df_Ana.sort_values(['AnalysisID','ReviewID'], ascending=False)
                df_Ana_Latest = df_Ana_Latest[df_Ana_Latest.duplicated(subset=['ReviewID'])==False]
                
                df_Ana_Latest = df_Ana_Latest[['ReviewID', 'DocCost']]
                df_Ana_Latest['DocCost'] = pd.to_numeric(df_Ana_Latest['DocCost'])
                df_Main_Completed_Final = df_Main_Completed_Final.merge(df_Ana_Latest, left_on=['ReviewID'], right_on=['ReviewID'], how='left')
                df_Main_Completed_Final.drop(['CurAssignee', 'CurStatus', 'CurStage', 'UpdatedBy', 'FinalProductionHours', 'FinalProductionHoursSeconds'], axis = 1, inplace=True)

                df_Support = pd.DataFrame({'Category':['Order Date', 'Start Date', 'End Date'],
                                            'Date':[datetime.today().strftime('%d/%m/%Y'), Entry7.get_date().strftime('%d/%m/%Y'), Entry8.get_date().strftime('%d/%m/%Y')]})
                
                TemplatePath = r"xlsx"
                NewFilePath = ReportPath + r"\KYC Billing RB_" + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsx"
                shutil.copy(TemplatePath, NewFilePath)
                book = openpyxl.load_workbook(NewFilePath)
                writer = pd.ExcelWriter(NewFilePath, engine='openpyxl')
                writer.book = book
                writer.sheets = {ws.title: ws for ws in book.worksheets}
                df_Main_Completed_Final.to_excel(writer, sheet_name='Summary', startrow=writer.sheets['Summary'].max_row, index = False,header= False)
                df_Support.to_excel(writer, sheet_name='Lookup - Support', startrow=writer.sheets['Lookup - Support'].max_row, index = False,header= False)
                writer.save()
                messagebox.showinfo('RB Billing Data','RB Billing Report Exported!')
                startfile(NewFilePath)
                
            else:
                messagebox.showerror('Folder Validation','Folder Path Not Selected!')

        def Validate_Clear():
            LabelList = [Label1, Label2, Label2_1, Label2_2, Label3, Label4, Label5, Label6]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='white')

        def Validate_Submit():
            Validate_Clear()
            global Entry4_Values, Entry3_Values, Entry5_Values

            AllLabelList = [Label2_1, Label2_2, Label3, Label4, Label5]
            AllEntryList = [Entry2_1, Entry2_2, Entry3, Entry4, Entry5]
            AllEntryValues = [Entry2_1_Values, Entry2_2_Values, Entry3_Values, Entry4_Values, Entry5_Values]
            AllEntryMessage = [Entry2_1_msg, Entry2_2_msg, Entry3_msg, Entry4_msg, Entry5_msg]

            DateLabelList = [Label2]
            DateEntryList = [Entry2]

            Submit = True

            if Entry1.get() == '' or Entry2.get() == '' or Entry2_1.get() == '' or Entry2_2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='orange')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        return False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='orange')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        return False
                        break
            
            item = RBtree2.selection()
            for i in item:
                TreeReviewID = RBtree2.item(i, "values")[0]
                TreeStage = RBtree2.item(i, "values")[4]
                
            if TreeStage == 'Analysis':
                AccessLevel = 'Analyst'

                PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRB as A 
                                            INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B WHERE Stage = 'Peer Reviewer' GROUP BY B.ReviewID) as G
                                            ON A.ReviewID = G.ReviewID
                                            WHERE Stage = 'Peer Reviewer' AND A.ReviewID = """ + TreeReviewID + ";")
                
                if len(PreLevelCheck) > 0:
                    PreLevelUser = PreLevelCheck[0][0]
                else:
                    PreLevelUser = ''

            elif TreeStage == 'Peer Reviewer':
                AccessLevel = 'PR'

                PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRB as A 
                                            INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B WHERE Stage = 'Analysis' GROUP BY B.ReviewID) as G
                                            ON A.ReviewID = G.ReviewID
                                            WHERE Stage = 'Analysis' AND A.ReviewID = """ + TreeReviewID + ";")
                
                if len(PreLevelCheck) > 0:
                    PreLevelUser = PreLevelCheck[0][0]
                else:
                    PreLevelUser = ''                        

            CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainRB as A 
                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                                        ON A.ReviewID = G.ReviewID
                                        WHERE A.ReviewID = """ + TreeReviewID + ";")

            if len(CrossCheck) == 0:
                messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                AdminRB(RBCan)
                return False
            else:
                if CrossCheck[0][0] == RBtree2.item(i, "values")[0] and CrossCheck[0][2] == RBtree2.item(i, "values")[2] and CrossCheck[0][4] == RBtree2.item(i, "values")[4] and CrossCheck[0][3] == RBtree2.item(i, "values")[5]:

                        if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                            NewUser = SelectQueryfun(SupportDBPath,"SELECT UserID FROM tblUserAccess WHERE EmpName = '" + Entry5.get() + "';")
                            if PreLevelUser != NewUser[0]:
                                Submit = True

                            else:
                                Submit = False
                                messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")
                                return False

                        else:
                            Submit = False
                            messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                            return False
                
                else:
                    Submit = False
                    messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                    return False
        
            if Submit:
                SubmitAdminRB()

        def SubmitAdminRB():

                global NPTotalHours
                NPTotalHours = datetime.min
                
                Stage = Entry4.get()

                if Stage == "Rejected":
                    Stage = "Analysis"

                if Entry3.get() == "Cancelled" or Entry3.get() == "Cancelled-Billable":
                    Stage = "Job Completed"

                Record = ('Admin', 0, Entry1.get(), Entry5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry3.get(), Entry3.get(), Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), Entry6.get(1.0, END).strip(), Stage)
                UpdateQueryfun(ProDBPath,"INSERT INTO tblIssuesStatusRB (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, AdminComments, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)
                
                Record = (Entry5.get(), Entry3.get(), Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                query = ("""UPDATE tblIssuesMainRB SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                UpdateQueryfun(ProDBPath, query, Record)
                NPTotalHours = datetime.min
                messagebox.showinfo('Completed','Data Updated Successfully!')
                
                Cancel()
                AdminRB(RBCan)
                
        def Cancel():
            Validate_Clear()
            Entry1.config(state='normal')
            Entry1.delete(0, END)
            Entry1.config(state='disabled')
            
            Entry2.config(state='normal')
            Entry2_1.config(state='normal')
            Entry2_2.config(state='normal')
            Entry2.delete(0, END)
            Entry2_1.delete(0, END)
            Entry2_2.delete(0, END)
            Entry2.config(state='disabled')
            Entry2_1.config(state='disabled')
            Entry2_2.config(state='disabled')

            Entry3.delete(0, END)
            Entry4.delete(0, END)
            Entry5.delete(0, END)
            Entry6.delete(1.0, END)

        Label1 = Label(AdminCan, text="Review ID*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label2_0 = Label(AdminCan, text="dd/mm/yyyy",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
        Label2 = Label(AdminCan, text="Due Date*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label2_1 = Label(AdminCan, text="HH",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
        Label2_1_1 = Label(AdminCan, text=":",width=2,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"bold"))
        Label2_2 = Label(AdminCan, text="MM",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
     
        Label4 = Label(AdminCan, text="Stage*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label3 = Label(AdminCan, text="Status*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label5 = Label(AdminCan, text="Assigned To*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label6 = Label(AdminCan, text="Comments",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        
        Ad_Var_Entry1 = StringVar()
        Ad_Var_Entry2 = StringVar()
        Ad_Var_Entry2_1 = StringVar()
        Ad_Var_Entry2_2 = StringVar()
        
        Entry1 = Entry(AdminCan, textvariable=Ad_Var_Entry1, bg="white",font=("Calibri",10))
        Entry1.config(state='disabled')
                
        Entry2 = DateEntry(AdminCan,textvariable=Ad_Var_Entry2,width=11,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
        Entry2.delete(0, END)
        Entry2.bind("<FocusOut>", lambda event: Date_Check(event, Entry2))

        Entry2_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
        Entry2_1 = Entry(AdminCan,validate='key',textvariable=Ad_Var_Entry2_1,bg="white",font=("Calibri",10),width=2)
        Entry2_1['validatecommand'] = (Entry2_1.register(AcceptNum),'%P','%d')
        Entry2_1_msg = 'This typed hour is not correct, please check!'
        
        Entry2_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
        Entry2_2 = Entry(AdminCan,validate='key',textvariable=Ad_Var_Entry2_2,bg="white",font=("Calibri",10),width=2)
        Entry2_2['validatecommand'] = (Entry2_2.register(AcceptNum),'%P','%d')
        Entry2_2_msg = 'This typed minute is not correct, please check!'
        
        Entry2.config(state='disabled')
        Entry2_1.config(state='disabled')
        Entry2_2.config(state='disabled')
                
        def CheckStage(event):
            global Entry4_Values, Entry3_Values, Entry5_Values
            Entry3.config(state='normal')
            Entry3.delete(0, END)
            Entry5.config(state='normal')
            Entry5.delete(0, END)
            if Entry4.get() == "Rejected":
                Entry3.insert(0, 'Assigned')
                Entry3.config(state='disabled')

                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Entry4.get() == "Analysis":
                Entry3_Values = ['Assigned', 'In Process', 'On Hold', 'Cancelled', 'Cancelled-Billable']
                Entry3.config(completevalues=Entry3_Values)

                Entry4_Values= ['Analysis', 'Rejected']
                Entry4.config(completevalues=Entry4_Values)

                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Entry4.get() == "Peer Reviewer":
                Entry3_Values = ['Assigned', 'In Process', 'On Hold']
                Entry3.config(completevalues=Entry3_Values)

                Entry4_Values= ['Peer Reviewer', 'Rejected']
                Entry4.config(completevalues=Entry4_Values)

                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and PeerReviewer = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            else:
                Entry3.config(state='normal')
                Entry5.config(state='normal')

        global Entry4_Values, Entry3_Values, Entry5_Values
        Entry4_Values= ['Analysis', 'Peer Reviewer', 'Rejected']
        Entry4 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry4_Values)
        Entry4_msg = 'This typed Stage is not available in the list, please check!'
        Entry4.bind("<FocusOut>", lambda event: CheckStage(event))
        Entry4.bind("<<ComboboxSelected>>", lambda event: CheckStage(event))

        Entry3_Values = ['Assigned', 'In Process', 'On Hold', 'Cancelled', 'Cancelled-Billable']
        Entry3 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry3_Values)
        Entry3_msg = 'This typed Status is not available in the list, please check!'
        
        Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' ORDER BY EmpName ASC;")
        Entry5 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry5_Values)
        Entry5_msg = 'This typed Name is not available in the list, please check!'
        
        Entry6 = Text(AdminCan,bg="white",font=("Calibri",10),width=30,height=3)
        Entry6.bind('<Tab>', lambda event: focusNext(Entry6))
        Entry6.bind('<Shift-Tab>', lambda event: focusPrev(Entry6))

        Label1.place(x=780, y=70)
        Label2_0.place(x=900, y=100)
        Label2.place(x=780, y=120)
        Label2_1.place(x=1002, y=100)
        Label2_2.place(x=1032, y=100)

        Label4.place(x=780, y=170)
        Label3.place(x=780, y=220)
        Label5.place(x=780, y=270)
        Label6.place(x=780, y=320)

        Entry1.place(x=920, y=70)
        Entry2.place(x=920, y=120)
        Entry2_1.place(x=1010, y=120)
        Label2_1_1.place(x=1025, y=120)
        Entry2_2.place(x=1040, y=120)
        
        Entry4.place(x=920, y=170, width=145)
        Entry3.place(x=920, y=220, width=145)
        Entry5.place(x=920, y=270, width=145)
        Entry6.place(x=920, y=320)
               
        Button2 = Button(AdminCan, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button2.place(x=750, y= 400)
        Button3 = Button(AdminCan, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button3.place(x=850, y= 400)
        Button1 = Button(AdminCan, text="Refresh", width=12, height=1, command=lambda:AdminRB(RBCan),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button1.place(x=950, y=400)
        Button4 = Button(AdminCan, text="Raw Report", width=12, height=1, command=lambda:AdminRawReports(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button4.place(x=1050, y=400)

        Label7 = Label(AdminCan, text="Start Date*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
        Label8 = Label(AdminCan, text="End Date*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')

        today = date.today()
        Entry7 = DateEntry(AdminCan,width=11,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy', maxdate=today)
        Entry7.delete(0, END)
        Label7.place(x=780, y=445)
        Entry7.place(x=780, y=470)
                
        Entry8 = DateEntry(AdminCan,width=11,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy', maxdate=today)
        Entry8.delete(0, END)
        Label8.place(x=890, y=445)
        Entry8.place(x=890, y=470)
        
        Button5 = Button(AdminCan, text="Billing Report", width=12, height=1, command=lambda:Billing_Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button5.place(x=1000, y=467)

        arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "LAST ENTRY TIME", "STAGE", "ASSIGNED TO"]
        RBtree2 = MyTreeview(AdminCan, columns=arrlbHeader, show="headings", height=24)

        RBtree2.column("#1", anchor=tkinter.CENTER, width=80)
        RBtree2.heading("#1", text="REVIEW ID")
        RBtree2.column("#2", anchor=tkinter.CENTER, width=100)
        RBtree2.heading("#2", text="DUE DATE")
        RBtree2.column("#3", anchor=tkinter.CENTER, width=90)
        RBtree2.heading("#3", text="STATUS")
        RBtree2.column("#4", anchor=tkinter.CENTER, width=140)
        RBtree2.heading("#4", text="LAST ENTRY TIME")
        RBtree2.column("#5", anchor=tkinter.CENTER, width=120)
        RBtree2.heading("#5", text="STAGE")
        RBtree2.column("#6", anchor=tkinter.CENTER, width=140)
        RBtree2.heading("#6", text="ASSIGNED TO")

        arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "STAGE", "ASSIGNED TO"]
        arrSortType = ["num", "date", "name", "name", "name"]
        for iCount in range(len(arrlbHeader)):
            strHdr = arrlbHeader[iCount]
            RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
            RBtree2.column(arrlbHeader[iCount], stretch=True)

        RBtree2.place(x=10, y=40)

        Admin_vsb = ttk.Scrollbar(AdminCan, orient="vertical", command=RBtree2.yview)
        Admin_vsb.place(x=680, y=40, height=500)
        RBtree2.configure(yscrollcommand=Admin_vsb.set)
                
        def OnClick(event, treename, Tname):
            global StartTime
            StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
            Entry3.config(state='normal')
            item = treename.selection()
            for i in item:
                ReviewID = treename.item(i, "values")[0]

                DueDateTime = treename.item(i, "values")[1].split(' ')
                HourMin = DueDateTime[1].split(':')
                DueDate = DueDateTime[0]

                Status = treename.item(i, "values")[2]
                Stage = treename.item(i, "values")[4]
                Assignee = treename.item(i, "values")[5]

            Cancel()

            if Stage == 'Job Completed':
                messagebox.showerror('Validation Check',"This Review ID is in Completed Stage, hence unable to change status!")
                return False
            else:
                Entry1.config(state='normal')
                Entry1.delete(0, END)
                Entry1.insert(0, ReviewID)
                Entry1.config(state='disabled')

                Entry2.config(state='normal')
                Entry2_1.config(state='normal')
                Entry2_2.config(state='normal')

                Entry2.delete(0, END)
                Entry2.insert(0, DueDate)
                Entry2_1.delete(0, END)
                Entry2_1.insert(0, HourMin[0])
                Entry2_2.delete(0, END)
                Entry2_2.insert(0, HourMin[1])

                Entry2.config(state='disabled')
                Entry2_1.config(state='disabled')
                Entry2_2.config(state='disabled')

                Entry3.config(state='normal')
                Entry3.delete(0, END)
                Entry3.insert(0, Status)

                Entry4.delete(0, END)
                Entry4.insert(0, Stage)

                Entry5.config(state='normal')
                Entry5.delete(0, END)
                Entry5.insert(0, Assignee)

                Entry6.delete(1.0, END)

                CheckStage(Event)

        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, G.LastEntryTime, Stage, Assignee FROM tblIssuesMainRB as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE Stage != 'Job Completed';""",RBtree2)
        
        RBtree2.bind("<<TreeviewSelect>>", lambda event: OnClick(event, treename=RBtree2, Tname=2))

########################################################## This is Archive for RB ########################################################

def ArchiveRBCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        ArchiveRB(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            ArchiveRB(RBCan, Timer1)

def ArchiveRB(RBCan, Timer1):
    global WorkQueueRB_B, CreateRB_B, AdminRB_B, ArchiveRB_B, UserStatsRB_B

    WorkQueueRB_B.config(bg='sky blue')
    CreateRB_B.config(bg='sky blue')
    AdminRB_B.config(bg='sky blue')
    ArchiveRB_B.config(bg='#E7E6E6')
    UserStatsRB_B.config(bg='sky blue')

    global ActiveDashboard
    ActiveDashboard = False

    ArchiveCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ArchiveCan.place(x=5, y=40)
    
    ProjectLabel = Label(ArchiveCan, text="Roland Berger",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)
    
    global Searched
    Searched = False

    def Search_Submit():
        global Searched
        Reopen_Hide()
        if SearchEntry1.get() != '':
            ReviewIDExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblIssuesMainRB WHERE ReviewID = " + SearchEntry1.get() + ");")
            if ReviewIDExists[0][0] == 1:
                Searched = True
                RBtree2.delete(*RBtree2.get_children())
                ArchiveData(ReviewID=SearchEntry1.get(), Country=None)
            else:
                messagebox.showerror('No Review ID','This typed Review ID is not available!')
                
        elif SearchEntry2.get() != '':
            CountryExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblIssuesMainRB WHERE Country = '" + SearchEntry2.get().capitalize() + "');")
            if CountryExists[0][0] == 1:
                Searched = True
                RBtree2.delete(*RBtree2.get_children())
                ArchiveData(ReviewID=None, Country=SearchEntry2.get().capitalize())
            else:
                messagebox.showerror('No Country','This typed Country is not available!')
            
        else:
            messagebox.showerror('No Option Selected','Please Select Review ID or Country to Search!')

    def Search_Cancel():
        global Searched
        SearchEntry1.delete(0,END)
        SearchEntry2.set('')
        if Searched:
            Searched = False
            RBtree2.delete(*RBtree2.get_children())
            ArchiveData(ReviewID=None, Country=None)
        else:
            messagebox.showwarning('Not Filtered','No data filtered to clear!')

    def SearchTyped(event, SearchEntry):
        if SearchEntry == SearchEntry1:
            SearchEntry2.set('')

        if SearchEntry == SearchEntry2:
            SearchEntry1.delete(0,END)

    SearchLabel1 = Label(ArchiveCan, text="Review ID",width=10,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
    SearchEntry1 = Entry(ArchiveCan, validate='key', bg="white",font=("Calibri",12,"bold"), width=15)
    SearchEntry1['validatecommand'] = (SearchEntry1.register(AcceptNum),'%P','%d')

    SearchLabel2 = Label(ArchiveCan, text="Country",width=10,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
    SearchEntry2_Values= SelectQueryfun(SupportDBPath,"Select CountryName from tblCountries;")
    SearchEntry2 = AutocompleteCombobox(ArchiveCan, width=25, font=("Calibri",12,"bold"), completevalues=SearchEntry2_Values)
    
    SearchEntry1.bind("<1>", lambda event: SearchTyped(event, SearchEntry=SearchEntry1))
    SearchEntry2.bind("<1>", lambda event: SearchTyped(event, SearchEntry=SearchEntry2))

    Image1= PhotoImage(file=r'')
    Image2= PhotoImage(file=r'')

    SearchButton1 = Button(ArchiveCan, image=Image1, fg='black', bg="#006E8E", width=25, height=25, command=lambda:Search_Submit(), borderwidth=0, cursor='hand2', relief='flat')
    SearchButton1.image = Image1

    SearchButton2 = Button(ArchiveCan, image=Image2, fg='black', bg="#006E8E", width=25, height=25, command=lambda:Search_Cancel(), borderwidth=0, cursor='hand2', relief='flat')
    SearchButton2.image = Image2

    SearchLabel1.place(x=360, y=10)
    SearchEntry1.place(x=450, y=10)

    SearchLabel2.place(x=560, y=10)
    SearchEntry2.place(x=650, y=10)

    SearchButton1.place(x=882, y=8)
    SearchButton2.place(x=927, y=8)

    arrlbHeader = ["REVIEW ID", "COUNTRY", "RECEIVED DATE", "DUE DATE", "STATUS", "STAGE", "LAST ENTRY TIME", "ANALYST", "PEER REVIEWER"]
    RBtree2 = MyTreeview(ArchiveCan, columns=arrlbHeader, show="headings", height=16)

    RBtree2.column("#1", anchor=tkinter.CENTER, width=90)
    RBtree2.heading("#1", text="REVIEW ID")
    RBtree2.column("#2", anchor=tkinter.CENTER, width=120)
    RBtree2.heading("#2", text="COUNTRY")
    RBtree2.column("#3", anchor=tkinter.CENTER, width=108)
    RBtree2.heading("#3", text="RECEIVED DATE")
    RBtree2.column("#4", anchor=tkinter.CENTER, width=107)
    RBtree2.heading("#4", text="DUE DATE")
    RBtree2.column("#5", anchor=tkinter.CENTER, width=110)
    RBtree2.heading("#5", text="STATUS")
    RBtree2.column("#6", anchor=tkinter.CENTER, width=100)
    RBtree2.heading("#6", text="STAGE")
    RBtree2.column("#7", anchor=tkinter.CENTER, width=115)
    RBtree2.heading("#7", text="LAST ENTRY TIME")
    RBtree2.column("#8", anchor=tkinter.CENTER, width=130)
    RBtree2.heading("#8", text="ANALYST")
    RBtree2.column("#9", anchor=tkinter.CENTER, width=130)
    RBtree2.heading("#9", text="PEER REVIEWER")
    
    arrlbHeader = ["REVIEW ID", "COUNTRY", "RECEIVED DATE", "DUE DATE", "STATUS", "STAGE", "LAST ENTRY TIME", "ANALYST", "PEER REVIEWER"]
    arrSortType = ["num", "name", "date", "date", "name", "name", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
        RBtree2.column(arrlbHeader[iCount], stretch=True)

    RBtree2.place(x=50, y=45)

    Archive_vsb = ttk.Scrollbar(ArchiveCan, orient="vertical", command=RBtree2.yview)
    Archive_vsb.place(x=1060, y=45, height=340)
    RBtree2.configure(yscrollcommand=Archive_vsb.set)

    style = ttk.Style()
    style.theme_use('default')
    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
    style.map('Treeview', background=[('selected', 'green')])

    def ArchiveData(ReviewID=None, Country=None):
        if ReviewID != None and Country == None:
            query = """SELECT A.ReviewID, A.Country, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainRB as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE A.ReviewID = '""" + ReviewID + """';"""
        elif ReviewID == None and Country != None:
            query = """SELECT A.ReviewID, A.Country, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainRB as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE A.Country = '""" + Country + """';"""
        else:
            query = """SELECT A.ReviewID, A.Country, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainRB as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID;"""
            
        conn = sqlite3.connect(ProDBPath)
        df_Arc1 = pd.read_sql_query(query, conn)
        conn.close()
        
        query = """SELECT StatusID, TableName, ReviewID, EntryBy FROM tblIssuesStatusRB 
                    WHERE TableName = 'Analysis' OR TableName = 'PR';"""
        conn = sqlite3.connect(ProDBPath)
        df_Arc2 = pd.read_sql_query(query, conn)
        df_Arc2['EntryBy'] = df_Arc2['EntryBy'].str.lower()
        conn.close()
        
        df_group=df_Arc2.groupby(['ReviewID','TableName'],as_index = False).max('StatusID')
        Merge_df_1 = df_group.merge(df_Arc2[['StatusID', 'EntryBy']], left_on=['StatusID'], right_on=['StatusID'], how='left')
        
        query = """SELECT EmpName, UserID FROM tblUserAccess;"""
        conn = sqlite3.connect(SupportDBPath)
        df_Arc3 = pd.read_sql_query(query, conn)
        conn.close()
        
        Merge_df_2 = Merge_df_1.merge(df_Arc3, left_on=['EntryBy'], right_on=['UserID'], how='left')
        
        dfpivot=pd.pivot_table(Merge_df_2, index='ReviewID', columns='TableName', values='EmpName', aggfunc='max').fillna('')
        dfpivot = dfpivot.reset_index(drop=False)
        dfpivot['ReviewID'] = dfpivot['ReviewID'].astype(str)
        
        Merge_df_Final = df_Arc1.merge(dfpivot, left_on=['ReviewID'], right_on=['ReviewID'], how='left')
        Arc_List = Merge_df_Final.values.tolist()

        for row in Arc_List:
            RBtree2.insert("", END, values=row)
    
    RBtree2.bind("<<TreeviewSelect>>", lambda event: OnChange(event, treename=RBtree2))
    RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2))
    
    ArchiveData()

    def OnClick(event, treename):
        item = treename.selection()
        for i in item:
            ReviewID = treename.item(i, "values")[0]

        SelectedIssueRB(RBCan, ReviewID, 'Archive', 'Analysis', Timer1)

    def Reopen_Hide():
        Label1.place_forget()
        Label2.place_forget()
        Label4.place_forget()
        Label5_0.place_forget()
        Label5.place_forget()
        Label6.place_forget()
        Label7.place_forget()
        Label8_0.place_forget()
        Label8.place_forget()
        Label8_1.place_forget()
        Label8_2.place_forget()
        Label9.place_forget()
        Label10.place_forget()
        Label11.place_forget()
        
        Entry1.place_forget()
        Entry2.place_forget()
        Entry4.place_forget()
        Entry5.place_forget()
        Entry6.place_forget()
        Entry7.place_forget()
        Entry8.place_forget()
        Entry8_1.place_forget()
        Label8_1_1.place_forget()
        Entry8_2.place_forget()
        Entry9.place_forget()
        Entry10.place_forget()
        Entry11.place_forget()

        Comments_vsb.place_forget()

        Button1.place_forget()
        Button2.place_forget()

    def OnChange(event, treename):
        Cancel()
        item = treename.selection()
        for i in item:
            ReviewID = treename.item(i, "values")[0]
            Stage = treename.item(i, "values")[5]

            if Stage == 'Job Completed':
                Label1.place(x=10, y=410)
                Label2.place(x=280, y=410)
                Label4.place(x=590, y=410)
                Label5_0.place(x=1040, y=390)
                Label5.place(x=960, y=410)
                
                Label6.place(x=10, y=460)
                Label7.place(x=300, y=460)
                Label8.place(x=610, y=460)
                Label8_0.place(x=720, y=440)
                Label8_1.place(x=832, y=440)
                Label8_2.place(x=862, y=440)
                Label9.place(x=1000, y=460)
                
                Label10.place(x=10, y=510)
                Label11.place(x=310, y=510)
                
                Entry1.place(x=90, y=410)
                Entry1.config(state='normal')
                Entry1.delete(0, END)
                Entry1.insert(0, ReviewID)
                Entry1.config(state='disabled')
                Entry2.place(x=400, y=410)
                Entry4.place(x=750, y=410)
                Entry5.place(x=1070, y=410)
                
                Entry6.place(x=90, y=460)
                Entry7.place(x=400, y=460)
                Entry8.place(x=750, y=460)
                Entry8_1.place(x=840, y=460)
                Label8_1_1.place(x=855, y=460)
                Entry8_2.place(x=870, y=460)
                Entry9.place(x=1070, y=460)
                
                Entry10.place(x=90, y=510)
                Entry11.place(x=400, y=500)

                Comments_vsb.place(x=613, y=500, height=47)

                Button1.place(x=750, y= 510)
                Button2.place(x=900, y= 510)

            else:
                Reopen_Hide()

    Label1 = Label(ArchiveCan, text="Review ID*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label2 = Label(ArchiveCan, text="Reopen Reason*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label4 = Label(ArchiveCan, text="Reopen Classification*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label5_0 = Label(ArchiveCan, text="dd/mm/yyyy",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label5 = Label(ArchiveCan, text="Reopen Date*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label6 = Label(ArchiveCan, text="QC Status*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label7 = Label(ArchiveCan, text="Reopen for*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')

    Label8_0 = Label(ArchiveCan, text="dd/mm/yyyy",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label8 = Label(ArchiveCan, text="Revised Due Date*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label8_1 = Label(ArchiveCan, text="HH",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label8_1_1 = Label(ArchiveCan, text=":",width=2,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"bold"))
    Label8_2 = Label(ArchiveCan, text="MM",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    
    Label9 = Label(ArchiveCan, text="Status*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label10 = Label(ArchiveCan, text="Assigned*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label11 = Label(ArchiveCan, text="Comments",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
            
    Entry1 = Entry(ArchiveCan, bg="white",font=("Calibri",10), width=19)
    Entry1.config(state='disabled')

    Entry2_Values = ['Client', 'Internal']
    Entry2 = AutocompleteCombobox(ArchiveCan, width=20, completevalues=Entry2_Values)
    Entry2_msg = 'This typed Reason is not available in the list, please check!'

    Entry4_Values = ['External Reason (No fault of EQ)', 'Formulation/Translation Error', 'Key Findings', 'KI Form incosistent with Analysis', 'Mistake only in final report', 'Typos', 'Not a Rejection', 
                        'FA Comments', 'Incorrect Analysis', 'Incorrect/Incomplete Document uploaded', 'Incorrect/Incomplete Screenings', 'Relationship Tree']
    Entry4 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry4_Values)
    Entry4_msg = 'This typed Classification is not available in the list, please check!'

    Entry5 = DateEntry(ArchiveCan,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry5.delete(0, END)
    Entry5.bind("<FocusOut>", lambda event: Date_Check(event, Entry5))

    Entry6_Values = ['Pass', 'Fail', 'Advisory']
    Entry6 = AutocompleteCombobox(ArchiveCan, width=20, completevalues=Entry6_Values)
    Entry6_msg = 'This typed Status is not available in the list, please check!'

    Entry7_Values = ['Analyst, Peer & Case Reviewer', 'Peer & Case Reviewer', 'Case Reviewer', 'External Reason', 'Analyst, Peer Reviewer']
    Entry7 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry7_Values)
    Entry7_msg = 'This typed Status is not available in the list, please check!'
            
    Entry8 = DateEntry(ArchiveCan,width=11,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry8.delete(0, END)
    Entry8.bind("<FocusOut>", lambda event: Date_Check(event, Entry8))

    Entry8_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry8_1 = Entry(ArchiveCan,validate='key',bg="white",font=("Calibri",10),width=2)
    Entry8_1['validatecommand'] = (Entry8_1.register(AcceptNum),'%P','%d')
    Entry8_1_msg = 'This typed hour is not correct, please check!'
    
    Entry8_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry8_2 = Entry(ArchiveCan,validate='key',bg="white",font=("Calibri",10),width=2)
    Entry8_2['validatecommand'] = (Entry8_2.register(AcceptNum),'%P','%d')
    Entry8_2_msg = 'This typed minute is not correct, please check!'
    
    Entry9_Values = ['Assigned', 'On Hold']
    Entry9 = AutocompleteCombobox(ArchiveCan, width=12, completevalues=Entry9_Values)
    Entry9_msg = 'This typed Status is not available in the list, please check!'
    
    Entry10_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
    Entry10 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry10_Values)
    Entry10_msg = 'This typed Name is not available in the list, please check!'
    
    Entry11 = Text(ArchiveCan,bg="white",font=("Calibri",10),width=30,height=3)
    Entry11.bind('<Tab>', lambda event: focusNext(Entry11))
    Entry11.bind('<Shift-Tab>', lambda event: focusPrev(Entry11))

    Comments_vsb = ttk.Scrollbar(ArchiveCan, orient="vertical", command=Entry11.yview)
    Entry11.configure(yscrollcommand=Comments_vsb.set)

    def Validate_Clear():
        LabelList = [Label1, Label2, Label4, Label5, Label6, Label7, Label8, Label8_1, Label8_2, Label9, Label10, Label11]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='white')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label2, Label4, Label6, Label7, Label8_1, Label8_2, Label9, Label10]
        AllEntryList = [Entry2, Entry4, Entry6, Entry7, Entry8_1, Entry8_2, Entry9, Entry10]
        AllEntryValues = [Entry2_Values, Entry4_Values, Entry6_Values, Entry7_Values, Entry8_1_Values, Entry8_2_Values, Entry9_Values, Entry10_Values]
        AllEntryMessage = [Entry2_msg, Entry4_msg, Entry6_msg, Entry7_msg, Entry8_1_msg, Entry8_2_msg, Entry9_msg, Entry10_msg]

        DateLabelList = [Label5, Label8]
        DateEntryList = [Entry5, Entry8]

        Submit = True

        if Entry1.get() == '' or Entry2.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or Entry8_1.get() == '' or Entry8_2.get() == '' or Entry9.get() == '' or Entry10.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='orange')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[i])
                    Submit = False
                    return False
                    break
        
        for i in range(0,len(DateEntryList)):
            if DateEntryList[i].get() != '':
                result = Date_Validation(DateEntryList[i])
                if result == 'Failed':
                    DateLabelList[i].config(foreground='orange')
                    DateEntryList[i].focus_set()
                    messagebox.showerror('Date Error','This typed date is not valid! Please check')
                    Submit = False
                    return False
                    break
        
        item = RBtree2.selection()
        for i in item:
            TreeReviewID = RBtree2.item(i, "values")[0]
            
        AccessLevel = 'Analyst'

        PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRB as A 
                                    INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B WHERE Stage = 'Peer Reviewer' GROUP BY B.ReviewID) as G
                                    ON A.ReviewID = G.ReviewID
                                    WHERE Stage = 'Peer Reviewer' AND A.ReviewID = """ + TreeReviewID + ";")
        if len(PreLevelCheck) > 0:
            PreLevelUser = PreLevelCheck[0][0]
        else:
            PreLevelUser = ''

        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DateReceived, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainRB as A 
                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRB AS B GROUP BY B.ReviewID) as G
                                        ON A.ReviewID = G.ReviewID
                                        WHERE A.ReviewID = """ + TreeReviewID + ";")

        if len(CrossCheck) == 0:
            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
            ArchiveRB(RBCan, Timer1)
            return False
        else:
            if CrossCheck[0][0] == RBtree2.item(i, "values")[0] and CrossCheck[0][1] == RBtree2.item(i, "values")[2] and CrossCheck[0][2] == RBtree2.item(i, "values")[3] and CrossCheck[0][3] == RBtree2.item(i, "values")[4] and CrossCheck[0][4] == RBtree2.item(i, "values")[5]:

                    if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                        NewUser = SelectQueryfun(SupportDBPath,"SELECT UserID FROM tblUserAccess WHERE EmpName = '" + Entry10.get() + "';")
                        if PreLevelUser != NewUser[0]:
                            Submit = True

                        else:
                            Submit = False
                            messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")
                            return False

                    else:
                        Submit = False
                        messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                        return False
            else:
                Submit = False
                messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                return False

        if Submit:
            SubmitArchiveRB()

    def SubmitArchiveRB():

        global NPTotalHours
        NPTotalHours = datetime.min

        RevisedDueDate = Entry8.get() + " " + Entry8_1.get() + ":" + Entry8_2.get()

        Record = (Entry1.get(),	Entry2.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), RevisedDueDate, Entry9.get(), Entry10.get(), Entry11.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesReopenRB (ReviewID, ReopenReason, ReopenClassification, ReopenDate, QCStatus, Reopenfor, RevisedDueDate, Status, AssignedTo, Comments, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)

        Record = (Entry10.get(), Entry9.get(), 'Analysis', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
        query = ("""UPDATE tblIssuesMainRB SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
        UpdateQueryfun(ProDBPath, query, Record)

        Record = ('Reopen', IssueID, Entry1.get(), Entry10.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry9.get(), Entry9.get(), 'Analysis', datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')
        query = ("""INSERT INTO tblIssuesStatusRB (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        UpdateQueryfun(ProDBPath,query, Record)

        NPTotalHours = datetime.min
        messagebox.showinfo('Completed','Reopen Details Updated Successfully!')
        
        Cancel()
        ArchiveRB(RBCan, Timer1)

    def Cancel():
        Validate_Clear()
        Entry1.config(state='normal')
        Entry1.delete(0, END)
        Entry1.config(state='disabled')
        
        Entry2.delete(0, END)
        Entry4.delete(0, END)
        Entry5.delete(0, END)
        Entry6.delete(0, END)
        Entry7.delete(0, END)
        Entry8.delete(0, END)
        Entry8_1.delete(0, END)
        Entry8_2.delete(0, END)
        Entry9.delete(0, END)
        Entry10.delete(0, END)
        Entry11.delete(1.0, END)

    Button1 = Button(ArchiveCan, text="Reopen", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(ArchiveCan, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    
########################################################## This is Project Page for Roland Berger ########################################################

def ProjectRB(Home):
    Home.title("KYC Solutions-Roland Berger")
    RBCan=Canvas(Home,bg="#006E8E", width=1190, height=590, highlightthickness=0)
    RBCan.place(x=5, y= 5)

    UNameLabel = Label(RBCan, text=Var_UserName,height=2,fg="white", bg="#006E8E",font=("Calibri",12,"bold"))
    UNameLabel.place(x=1000, y=0)

    Timer1=TimerRun()

    global WorkQueueRB_B, CreateRB_B, AdminRB_B, ArchiveRB_B, UserStatsRB_B

    ProjectsRB_B = Button(RBCan, text="Projects", width=12, height=1, command=lambda:AllProjectsCheck(Home),bg="sky blue",font=("Calibri",10,"bold"), cursor='hand2')
    WorkQueueRB_B = Button(RBCan, text="Work Queue", width=12, height=1, command=lambda:WorkQueueRBCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"), cursor='hand2')
    CreateRB_B = Button(RBCan, text="Create", width=12, height=1, command=lambda:CreateIssueRBCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"), cursor='hand2')
    AdminRB_B = Button(RBCan, text="Admin", width=12, height=1, command=lambda:AdminRBCheck(RBCan),bg="sky blue",font=("Calibri",10,"bold"), cursor='hand2')
    ArchiveRB_B = Button(RBCan, text="Archive", width=12, height=1, command=lambda:ArchiveRBCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    UserStatsRB_B = Button(RBCan, text="User Stats", width=12, height=1, command=lambda:UserStatsCheck(RBCan, 'RB'),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    NonProRB_B = Button(RBCan, text="Non Production", width=15, height=1, command=lambda:NonProRB(Home, Timer1),bg="sky blue",font=("Calibri",10,"bold"), cursor='hand2')
        
    ProjectsRB_B.place(x=50, y=10)
    WorkQueueRB_B.place(x=150, y=10)
    CreateRB_B.place(x=250, y=10)
    AdminRB_B.place(x=350, y=10)
    ArchiveRB_B.place(x=450, y=10)
    UserStatsRB_B.place(x=550, y=10)
    NonProRB_B.place(x=650, y=10)

    WorkQueueRBCheck(RBCan, Timer1)

############################################################################## Roland Berger END ###########################################################################################
############################################################################## Roland Berger END ###########################################################################################
############################################################################## Roland Berger END ###########################################################################################
############################################################################## Roland Berger END ###########################################################################################
############################################################################## Roland Berger END ###########################################################################################

########################################################## This is Clock ########################################################

running = False
hours, minutes, seconds = 0, 0, 0
NPTotalHours = datetime.min

def ClockRun(Clockroot):
    
    ClockRun.stopwatch_label = Label(Clockroot,text='00:00:00', bg="white", font=('Calibri', 15, 'bold'))
    ClockRun.stopwatch_label.place(x=280,y=10)
    
    def start(stopwatch_label, Initial):
        global running
        if not running:
            update(stopwatch_label)
            running = True
      
    def update(stopwatch_label):
        global hours, minutes, seconds
        seconds += 1
        if seconds == 60:
            minutes += 1
            seconds = 0
        if minutes == 60:
            hours += 1
            minutes = 0
        
        hours_string = f'{hours}' if hours > 9 else f'0{hours}'
        minutes_string = f'{minutes}' if minutes > 9 else f'0{minutes}'
        seconds_string = f'{seconds}' if seconds > 9 else f'0{seconds}'
        
        stopwatch_label.config(text=hours_string + ':' + minutes_string + ':' + seconds_string)
        
        global update_time
        update_time = stopwatch_label.after(1000, lambda:update(stopwatch_label))
        
    start(ClockRun.stopwatch_label, 'Yes')

########################################################## This is Non Production Page ########################################################    

def NonProRB(Home, Timer1):
    Timer1.stop_clock()
    NPStartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
    
    def avoid():
        MsgAnswer = messagebox.askyesno("Exit Non Production", "Are you sure want to close without submit Non Production?")
        if MsgAnswer == True:
            Timer1.existing_clock()
            global hours, minutes, seconds
            hours, minutes, seconds = 0, 0, 0
            global running
            running = False
            child_w.destroy()
    
    def NPSubmit():
        global CB_Activity_Values
        global CB_TransName_Values
        NPReason=CB_Reason.get()
        NPActivity = CB_Activity.get()
        NPTransName = CB_TransName.get()
        NPComments=E_Comment.get(1.0, END).strip()

        if len(CB_Activity_Values) > 0 and len(CB_TransName_Values) > 0:
            Condition = NPReason == '' or NPActivity == '' or NPTransName == ''
        elif len(CB_Activity_Values) == 0 and len(CB_TransName_Values) > 0:
            Condition = NPReason == '' or NPTransName == ''
        elif len(CB_Activity_Values) > 0 and len(CB_TransName_Values) == 0:
            Condition = NPReason == '' or NPActivity == ''
        elif len(CB_Activity_Values) == 0 and len(CB_TransName_Values) == 0:
            Condition = NPReason == ''
                
        if Condition:
            messagebox.showerror("Validation","Mandatory fields should not be left blank!")
        else:
            global hours, minutes, seconds
            hours, minutes, seconds = 0, 0, 0
                
            global NPTotalHours
            EntryDate = datetime.now().strftime('%d-%m-%Y')
            NPEndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
            global running
            running = False
            
            NPTotalHours = NPTotalHours + (datetime.strptime(NPEndTime, '%d-%m-%Y %H:%M:%S') - datetime.strptime(NPStartTime, '%d-%m-%Y %H:%M:%S'))
            Record = (NPReason, NPActivity, NPTransName, NPComments, Var_UserID, EntryDate, NPStartTime, NPEndTime)
            query = ("INSERT INTO tblNonPro (NPReason, NPActivity, NPTransName, NPComments, EntryBy, EntryDate, NPStartTime, NPEndTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?);")
            UpdateQueryfun(ProDBPath, query, Record)
            child_w.destroy()
            Timer1.continue_clock(NPTotalHours)
            messagebox.showinfo("Submitted","Non Production Details Submitted Successfully!")
                    
    child_w= Toplevel(Home)
    child_w.geometry("400x400+725+350")
    child_w.resizable(0,0)
    child_w.title("KYC Solutions-Non Production")
    child_w.config(bg='White')
    child_w.iconbitmap(ImgPath + '\EQ_HD.ico')

    ClockRun(child_w)
    
    child_w.grab_set() 
    child_w.protocol("WM_DELETE_WINDOW", avoid)
    
    def CB_Activity_Selected(event, CB_Activity):

        L_TransName.place_forget()
        CB_TransName.set('')
        CB_TransName.place_forget()

        global CB_TransName_Values
        CB_TransName_Values = SelectQueryfun(SupportDBPath,"SELECT TransactionName FROM tblTransactionsBOI WHERE ActivityID = (SELECT ActivityID FROM tblActivitiesBOI WHERE Activity = '" + CB_Activity.get() + "');")
        
        if CB_Activity.get() == '' or len(CB_TransName_Values) == 0:
            L_TransName.place_forget()
            CB_TransName.set('')
            CB_TransName.place_forget()

            CB_TransName_Values = []

        else:
            L_TransName.place(x=25,y=160)
            CB_TransName.set('')
            CB_TransName.place(x=25,y=185)

            CB_TransName.config(completevalues=CB_TransName_Values)
            CB_TransName_msg = 'This typed Transaction is not available is the list! Please check'
            CB_TransName.bind("<FocusOut>", lambda event:DropDown_Check(event, CB_TransName_Values, CB_TransName, 'Validation Error', CB_TransName_msg))
    
    def CB_Reason_Selected(event, CB_Reason):

        L_Activity.place_forget()
        CB_Activity.set('')
        CB_Activity.place_forget()

        L_TransName.place_forget()
        CB_TransName.set('')
        CB_TransName.place_forget()
        
        global CB_Activity_Values
        CB_Activity_Values = SelectQueryfun(SupportDBPath,"SELECT Activity FROM tblActivitiesBOI WHERE ReasonID = (SELECT ReasonID FROM tblReasonsBOI WHERE Reason = '" + CB_Reason.get() + "');")

        global CB_TransName_Values
        CB_TransName_Values = SelectQueryfun(SupportDBPath,"SELECT TransactionName FROM tblTransactionsBOI WHERE ActivityID = (SELECT ActivityID FROM tblActivitiesBOI WHERE Activity = '" + CB_Activity.get() + "');")
        
        if CB_Reason.get() == '' or len(CB_Activity_Values) == 0:
            L_Activity.place_forget()
            CB_Activity.set('')
            CB_Activity.place_forget()

            L_TransName.place_forget()
            CB_TransName.set('')
            CB_TransName.place_forget()

            CB_Activity_Values = []
            CB_TransName_Values = []
        else:
            L_Activity.place(x=25,y=90)
            CB_Activity.set('')
            CB_Activity.place(x=25,y=115)
            
            CB_Activity.config(completevalues=CB_Activity_Values)
            CB_Activity_msg = 'This typed Activity is not available is the list! Please check'
            CB_Activity.bind("<<ComboboxSelected>>", lambda event:CB_Activity_Selected(event, CB_Activity))
            CB_Activity.bind("<FocusOut>", lambda event:DropDown_Check(event, CB_Activity_Values, CB_Activity, 'Validation Error', CB_Activity_msg))

    global CB_Activity_Values
    global CB_TransName_Values

    L_Reason=Label(child_w,text="Reason*",font=('Calibri',13,'bold'),bg='white')
    L_Reason.place(x=25,y=20)
    
    CB_Reason_Values = SelectQueryfun(SupportDBPath,"SELECT Reason FROM tblReasonsBOI;")
    CB_Reason = AutocompleteCombobox(child_w, width=35, completevalues=CB_Reason_Values,font=('Calibri',11),state='readonly')
    CB_Reason_msg = 'This typed Reason is not available is the list! Please check'
    CB_Reason.bind("<<ComboboxSelected>>", lambda event:CB_Reason_Selected(event, CB_Reason))
    CB_Reason.bind("<FocusOut>", lambda event:DropDown_Check(event, CB_Reason_Values, CB_Reason, 'Validation Error', CB_Reason_msg))
    CB_Reason.place(x=25,y=45)

    L_Activity=Label(child_w,text="Activity*",font=('Calibri',12,'bold'),bg='white')
    CB_Activity_Values = []
    CB_Activity = AutocompleteCombobox(child_w, width=35, completevalues=CB_Activity_Values,font=('Calibri',11),state='readonly')
    
    L_TransName=Label(child_w,text="Sub-Activity*",font=('Calibri',12,'bold'),bg='white')
    CB_TransName_Values = []
    CB_TransName = AutocompleteCombobox(child_w, width=35, completevalues=CB_TransName_Values,font=('Calibri',11),state='readonly')
    
    L_Comment=Label(child_w,text="Comments",font=('Calibri',13,'bold'),bg='white')
    L_Comment.place(x=25,y=230)
    
    E_Comment=Text(child_w,font=('Calibri',13,'bold'),width=35,height=3,bd=3,highlightthickness=0)
    E_Comment.place(x=25,y=255)

    E_Comment.bind('<Tab>', lambda event: focusNext(E_Comment))
    E_Comment.bind('<Shift-Tab>', lambda event: focusPrev(E_Comment))
    
    BT_Mainwin=Button(child_w,text='Submit',command=NPSubmit,bg="#00728F",fg='white',font=("Calibri",12,'bold'),borderwidth=3,width=10,cursor='hand2')
    BT_Mainwin.place(x=150,y=340)

############################################################################## OIMIO Start ###########################################################################################
############################################################################## OIMIO Start ###########################################################################################
############################################################################## OIMIO Start ###########################################################################################
############################################################################## OIMIO Start ###########################################################################################
############################################################################## OIMIO Start ###########################################################################################

########################################################## This is Create Issue Page for OIMIO ########################################################

def CreateIssueOIMIOCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        CreateIssueOIMIO(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            CreateIssueOIMIO(RBCan, Timer1)

def CreateIssueOIMIO(RBCan, Timer1):

    global WorkQueueOIMIO_B, CreateOIMIO_B, AdminOIMIO_B, ArchiveOIMIO_B, UserStatsOIMIO_B

    WorkQueueOIMIO_B.config(bg='sky blue')
    CreateOIMIO_B.config(bg='#E7E6E6')
    AdminOIMIO_B.config(bg='sky blue')
    ArchiveOIMIO_B.config(bg='sky blue')
    UserStatsOIMIO_B.config(bg='sky blue')

    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False

    global NPTotalHours
    NPTotalHours = datetime.min

    ProjectsCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ProjectsCan.place(x=5, y=40)
    
    ProjectLabel = Label(ProjectsCan, text="OIMIO",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)
    
    CreateLabel = Label(ProjectsCan, text="Create Issue",width=18,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    CreateLabel.place(x=550, y=5)

    Can1=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
    Can1.place(x=10, y=40)
    
    RBGeneral_V_Entry1 = StringVar()
    RBGeneral_V_Entry2 = StringVar()
    RBGeneral_V_Entry3 = StringVar()
    RBGeneral_V_Entry7_1 = StringVar()
    RBGeneral_V_Entry7_2 = StringVar()
    RBGeneral_V_Entry9 = StringVar()
    RBGeneral_V_Entry9_1 = StringVar()
    RBGeneral_V_Entry9_2 = StringVar()
        
    Timer1.start_clock(Can1)
        
    StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

    def Validate_Clear():
        LabelList = [Label2, Label3, Label4, Label5, Label6, Label7, Label7_1, Label7_2, Label9, Label9_1, Label9_2, Label10]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_SubmitIssueOIMIO():
        Validate_Clear()

        AllLabelList = [Label4, Label5, Label7_1, Label7_2, Label9_1, Label9_2, Label10]
        AllEntryList = [Entry4, Entry5, Entry7_1, Entry7_2, Entry9_1, Entry9_2, Entry10]
        AllEntryValues = [Entry4_Values, Entry5_Values, Entry7_1_Values, Entry7_2_Values, Entry9_1_Values, Entry9_2_Values, Entry10_Values]
        AllEntryMessage = [Entry4_msg, Entry5_msg, Entry7_1_msg, Entry7_2_msg, Entry9_1_msg, Entry9_2_msg, Entry10_msg]

        DateLabelList = [Label7, Label9]
        DateEntryList = [Entry7, Entry9]

        if Entry1.get() == '' or int(Entry2.get()) == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry7.get() == '' or Entry7_1.get() == '' or Entry7_2.get() == '' or Entry9.get() == '' or Entry9_1.get() == '' or Entry9_2.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            query = "SELECT EXISTS(SELECT 1 FROM tblIssuesMainOIMIO WHERE ReviewID = (?));"
            record = [int(Entry2.get())]
            ReviewIDResult = ReviewID_Check(ProDBPath,query,record)

            if ReviewIDResult:
                Label2.config(foreground='red')
                messagebox.showerror('Duplicate Review ID','This Review ID '+ Entry2.get() + ' is already available! please check')
                Entry2.focus_set()
                Submit = False
                return False
            
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                SubmitIssueOIMIO()

    def SubmitIssueOIMIO():
        global NPTotalHours
        
        if Entry10.get() == '':
            Status = 'Unassigned'
        else:
            Status = 'Assigned'
        
        EntryStatus = 'Created'
        Stage = 'Analysis'

        DateReceived = Entry7.get() + " " + Entry7_1.get() + ":" + Entry7_2.get()
        DueDate = Entry9.get() + " " + Entry9_1.get() + ":" + Entry9_2.get()
        
        Record = (Entry1.get(),	int(Entry2.get()), Entry3.get(), Entry4.get(), Entry5.get(), DateReceived, DueDate, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesGenOIMIO (ProjectName, ReviewID, EntityName, Country, Priority, DateReceived, DueDate, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)

        Record = (IssueID, Entry1.get(), int(Entry2.get()), Entry3.get(), Entry4.get(), Entry5.get(), DateReceived, DueDate, Entry10.get(), Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesMainOIMIO (IssueID, ProjectName, ReviewID, EntityName, Country, Priority, DateReceived, DueDate, CurAssignee, CurStatus, CurStage, UpdatedBy, UpdatedTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        UpdateQueryfun(ProDBPath,query, Record)
        
        Record = ('Create', IssueID, int(Entry2.get()), Entry10.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')
        query = ("""INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        UpdateQueryfun(ProDBPath,query, Record)
        NPTotalHours = datetime.min
        
        global ActiveJobPage
        ActiveJobPage = False

        ClearIssueOIMIO()
        Timer1.stop_clock()
        messagebox.showinfo('Completed','Issue Created Successfully!')

        WorkQueueOIMIOCheck(RBCan, Timer1)
            
    def ClearIssueOIMIO():
        Validate_Clear()
        Entry2.delete(0, END)
        Entry3.delete(0, END)
        Entry4.set('')
        Entry5.set('')
        Entry5.set('Medium')
        Entry7.delete(0, END)
        Entry7_1.delete(0, END)
        Entry7_2.delete(0, END)
        Entry9.delete(0, END)
        Entry9_1.delete(0, END)
        Entry9_2.delete(0, END)
        Entry10.set('')
    
    Label1 = Label(Can1, text="Project*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can1, text="Review ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can1, text="Entity Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can1, text="Country*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can1, text="Priority*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label6 = Label(Can1, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label7 = Label(Can1, text="Date Received*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7_1 = Label(Can1, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label7_1_1 = Label(Can1, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label7_2 = Label(Can1, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    
    Label8 = Label(Can1, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label9 = Label(Can1, text="Due Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9_1 = Label(Can1, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label9_1_1 = Label(Can1, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label9_2 = Label(Can1, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    
    Label10 = Label(Can1, text="Assignee",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    Entry1 = Entry(Can1,textvariable=RBGeneral_V_Entry1,font=("Calibri",10),width=22)
    Entry1.insert(0, 'OIMIO')
    Entry1.config(state = "disabled")

    Entry2 = Entry(Can1,validate="key", textvariable=RBGeneral_V_Entry2,bg="white",font=("Calibri",10),width=22)
    Entry2['validatecommand'] = (Entry2.register(AcceptNum),'%P','%d')
        
    Entry3 = Entry(Can1,textvariable=RBGeneral_V_Entry3,bg="white",font=("Calibri",10),width=22)
    
    Entry4_Values = SelectQueryfun(SupportDBPath,"Select CountryName from tblCountries;")
    Entry4 = AutocompleteCombobox(Can1, width=23, completevalues=Entry4_Values)
    Entry4_msg = 'This typed Country is not available in the list, please check!'
    
    Entry5_Values = SelectQueryfun(SupportDBPath,"Select PriorityName from tblPriorites;")
    Entry5 = AutocompleteCombobox(Can1, width=23, completevalues=Entry5_Values)
    Entry5.set('Medium')
    Entry5_msg = 'This typed Country is not available in the list, please check!'
    
    today = date.today()
    Entry7 = DateEntry(Can1,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy',maxdate=today)
    Entry7.delete(0, END)
    Entry7.set_date(datetime.now().strftime('%d/%m/%Y'))
        
    Entry7_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry7_1 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry7_1,bg="white",font=("Calibri",10),width=2)
    Entry7_1['validatecommand'] = (Entry7_1.register(AcceptNum),'%P','%d')
    Entry7_1_msg = 'This typed hour is not correct, please check!'
    
    Entry7_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry7_2 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry7_2,bg="white",font=("Calibri",10),width=2)
    Entry7_2['validatecommand'] = (Entry7_2.register(AcceptNum),'%P','%d')
    Entry7_2_msg = 'This typed minute is not correct, please check!'
    
    today = date.today()
    Entry9 = DateEntry(Can1,textvariable=RBGeneral_V_Entry9,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry9.delete(0, END)
    
    Entry9_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry9_1 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry9_1,bg="white",font=("Calibri",10),width=2)
    Entry9_1['validatecommand'] = (Entry9_1.register(AcceptNum),'%P','%d')
    Entry9_1_msg = 'This typed hour is not correct, please check!'
    
    Entry9_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry9_2 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry9_2,bg="white",font=("Calibri",10),width=2)
    Entry9_2['validatecommand'] = (Entry9_2.register(AcceptNum),'%P','%d')
    Entry9_2_msg = 'This typed minute is not correct, please check!'
            
    Entry10_Values = SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' AND Analyst = 'Yes' ORDER BY EmpName ASC;")
    Entry10 = AutocompleteCombobox(Can1, width=23, completevalues=Entry10_Values)
    Entry10_msg = 'This typed Name is not available in the list, please check!'
        
    Label1.place(x=200, y=20+50)
    Label2.place(x=650, y=20+50)
    Label3.place(x=200, y=100+50)
    Label4.place(x=650, y=100+50)
    Label5.place(x=200, y=180+50)

    Label6.place(x=760, y=160+50)
    Label7.place(x=650, y=180+50)
    Label7_1.place(x=870, y=160+50)
    Label7_2.place(x=900, y=160+50)

    Label8.place(x=310, y=240+50)
    Label9.place(x=200, y=260+50)
    Label9_1.place(x=420, y=240+50)
    Label9_2.place(x=450, y=240+50)

    Label10.place(x=650, y=260+50)
        
    Entry1.place(x=330, y=20+50)
    Entry2.place(x=780, y=20+50)
    Entry3.place(x=330, y=100+50)
    Entry4.place(x=780, y=100+50)
    Entry5.place(x=330, y=180+50)
    
    Entry7.place(x=780, y=180+50)
    Entry7_1.place(x=880, y=180+50)
    Label7_1_1.place(x=895, y=180+50)
    Entry7_2.place(x=910, y=180+50)

    Entry9.place(x=330, y=260+50)
    Entry9_1.place(x=430, y=260+50)
    Label9_1_1.place(x=445, y=260+50)
    Entry9_2.place(x=460, y=260+50)
    
    Entry10.place(x=780, y=260+50)
        
    SubmitB = Button(Can1, text="Create", width=15, height=1, command=lambda:Validate_SubmitIssueOIMIO(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')
    CancelB = Button(Can1, text="Clear", width=15, height=1, command=lambda:ClearIssueOIMIO(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')           

    SubmitB.place(x=420, y=420)
    CancelB.place(x=620, y=420)

########################################################## This is Selected Issue Page for OIMIO ########################################################

def ViewGeneralOIMIO(Can2, ReviewID, Tname, RBCan):

    global GeneralOIMIO_B, AnalysisOIMIO_B, PeerOIMIO_B

    GeneralOIMIO_B.config(bg='sky blue',fg='black')
    AnalysisOIMIO_B.config(bg='#006E8E',fg='white')
    PeerOIMIO_B.config(bg='#006E8E',fg='white')

    global ActiveDashboard
    ActiveDashboard = False

    Can3=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can3.place(x=5, y=35)

    RBGeneral_V_Entry1 = StringVar()
    RBGeneral_V_Entry2 = StringVar()
    RBGeneral_V_Entry3 = StringVar()
    RBGeneral_V_Entry7_1 = StringVar()
    RBGeneral_V_Entry7_2 = StringVar()
    RBGeneral_V_Entry9_1 = StringVar()
    RBGeneral_V_Entry9_2 = StringVar()
        
    Label1 = Label(Can3, text="Project*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can3, text="Review ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can3, text="Entity Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can3, text="Country*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can3, text="Priority*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label6 = Label(Can3, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label7 = Label(Can3, text="Date Received*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7_1 = Label(Can3, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label7_1_1 = Label(Can3, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label7_2 = Label(Can3, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
        
    Label8 = Label(Can3, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label9 = Label(Can3, text="Due Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9_1 = Label(Can3, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label9_1_1 = Label(Can3, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label9_2 = Label(Can3, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
        
    Label10 = Label(Can3, text="Assignee",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    query = ("SELECT * FROM tblIssuesMainOIMIO WHERE ReviewID = '" + ReviewID + "';")
    result = ViewQueryfun(ProDBPath, query)

    Entry1 = Entry(Can3,textvariable=RBGeneral_V_Entry1,font=("Calibri",10), width=22)
    Entry1.insert(0, result[0][1])
    Entry1.config(state = "disabled")
    
    Entry2 = Entry(Can3,textvariable=RBGeneral_V_Entry2,font=("Calibri",10), width=22)
    Entry2.insert(0, result[0][2])
    Entry2.config(state = "disabled")
    
    Entry3 = Entry(Can3,textvariable=RBGeneral_V_Entry3,bg="white",font=("Calibri",10), width=22)
    Entry3.insert(0, result[0][3])
    
    Entry4_Values = SelectQueryfun(SupportDBPath,"Select CountryName from tblCountries;")
    Entry4 = AutocompleteCombobox(Can3, width=22, completevalues=Entry4_Values)
    Entry4.set(result[0][4])
    Entry4_msg = 'This typed Country is not available in the list, please check!'
    
    Entry5_Values = SelectQueryfun(SupportDBPath,"Select PriorityName from tblPriorites;")
    Entry5 = AutocompleteCombobox(Can3, width=23, completevalues=Entry5_Values)
    Entry5.set(result[0][5])
    Entry5_msg = 'This typed Priority is not available in the list, please check!'
    
    ReceivedDate = result[0][6].split(' ')
    HourMin = ReceivedDate[1].split(':')

    Entry7 = DateEntry(Can3,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry7.set_date(ReceivedDate[0])
    Entry7.config(state = "disabled")

    Entry7_1 = Entry(Can3,textvariable=RBGeneral_V_Entry7_1,bg="white",font=("Calibri",10), width=2)
    Entry7_1.insert(0, HourMin[0])
    Entry7_1.config(state = "disabled")

    Entry7_2 = Entry(Can3,textvariable=RBGeneral_V_Entry7_2,bg="white",font=("Calibri",10), width=2)
    Entry7_2.insert(0, HourMin[1])
    Entry7_2.config(state = "disabled")

    ReceivedDate = result[0][7].split(' ')
    HourMin = ReceivedDate[1].split(':')

    Entry9 = DateEntry(Can3,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry9.set_date(ReceivedDate[0])
    Entry9.config(state = "disabled")

    Entry9_1 = Entry(Can3,textvariable=RBGeneral_V_Entry9_1,bg="white",font=("Calibri",10), width=2)
    Entry9_1.insert(0, HourMin[0])
    Entry9_1.config(state = "disabled")

    Entry9_2 = Entry(Can3,textvariable=RBGeneral_V_Entry9_2,bg="white",font=("Calibri",10), width=2)
    Entry9_2.insert(0, HourMin[1])
    Entry9_2.config(state = "disabled")
    
    query = ("""SELECT ID, Assignee, MAX(StatusID), TableName 
                FROM tblIssuesStatusOIMIO 
                WHERE TableName = 'Create';""")

    result = ViewQueryfun(ProDBPath, query)

    Entry10 = ttk.Combobox(Can3,font=("Calibri",10))
    Entry10.set(result[0][1])
    Entry10.config(state = "disabled")

    Label1.place(x=200, y=20+50)
    Label2.place(x=650, y=20+50)
    Label3.place(x=200, y=100+50)
    Label4.place(x=650, y=100+50)
    Label5.place(x=200, y=180+50)
    Label6.place(x=760, y=160+50)
    Label7.place(x=650, y=180+50)
    Label7_1.place(x=870, y=160+50)
    Label7_2.place(x=900, y=160+50)
    Label8.place(x=310, y=240+50)
    Label9.place(x=200, y=260+50)
    Label9_1.place(x=420, y=240+50)
    Label9_2.place(x=450, y=240+50)
    Label10.place(x=650, y=260+50)
        
    Entry1.place(x=330, y=20+50)
    Entry2.place(x=780, y=20+50)
    Entry3.place(x=330, y=100+50)
    Entry4.place(x=780, y=100+50)
    Entry5.place(x=330, y=180+50)
    Entry7.place(x=780, y=180+50)
    Entry7_1.place(x=880, y=180+50)
    Label7_1_1.place(x=895, y=180+50)
    Entry7_2.place(x=910, y=180+50)
    Entry9.place(x=330, y=260+50)
    Entry9_1.place(x=430, y=260+50)
    Label9_1_1.place(x=445, y=260+50)
    Entry9_2.place(x=460, y=260+50)
    Entry10.place(x=780, y=260+50)

    def Validate_Clear():
        LabelList = [Label4, Label5]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_SubmitIssueOIMIO():
        Validate_Clear()

        AllLabelList = [Label4, Label5]
        AllEntryList = [Entry4, Entry5]
        AllEntryValues = [Entry4_Values, Entry5_Values]
        AllEntryMessage = [Entry4_msg, Entry5_msg]

        if Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry7.get() == '' or Entry7_1.get() == '' or Entry7_2.get() == '' or Entry9.get() == '' or Entry9_1.get() == '' or Entry9_2.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            if Submit:
                SubmitIssueOIMIO()

    def SubmitIssueOIMIO():
        
        DateReceived = Entry7.get() + " " + Entry7_1.get() + ":" + Entry7_2.get()
        DueDate = Entry9.get() + " " + Entry9_1.get() + ":" + Entry9_2.get()
        
        Record = (Entry1.get(),	Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), DateReceived, DueDate, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesGenOIMIO (ProjectName, ReviewID, EntityName, Country, Priority, DateReceived, DueDate, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)

        Record = (IssueID, Entry3.get(), Entry4.get(), Entry5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry2.get())
        query = ("""UPDATE tblIssuesMainOIMIO SET IssueID = ?, EntityName = ?, Country = ?, Priority = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
        UpdateQueryfun(ProDBPath, query, Record)
                
        messagebox.showinfo('Updated','Issue Updated Successfully!')

    def ClearIssueOIMIO():
        Validate_Clear()
        Entry3.delete(0, END)
        Entry4.set('')
        Entry5.set('')
        Entry5.set('Medium')
        
    SubmitB = Button(Can3, text="Update", width=15, height=1, command=lambda:Validate_SubmitIssueOIMIO(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')
    CancelB = Button(Can3, text="Clear", width=15, height=1, command=lambda:ClearIssueOIMIO(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2') 
    CancelB.config(state = "disabled")          

    SubmitB.place(x=420, y=400)
    CancelB.place(x=620, y=400)

    if Tname == 'Archive':
        global ActiveJobPage
        ActiveJobPage = False

        Entry1.config(state = "normal")
        Entry2.config(state = "normal")
        Entry7.config(state = "normal")
        Entry7_1.config(state = "normal")
        Entry7_2.config(state = "normal")
        Entry9.config(state = "normal")
        Entry9_1.config(state = "normal")
        Entry9_2.config(state = "normal")
        Entry10.config(state = "normal")
                
        SubmitB.config(state = 'disabled')
        CancelB.config(state = 'disabled')
    
def ViewAnalysisOIMIO(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = ''):

    global GeneralOIMIO_B, AnalysisOIMIO_B, PeerOIMIO_B

    GeneralOIMIO_B.config(bg='#006E8E',fg='white')
    AnalysisOIMIO_B.config(bg='sky blue',fg='black')
    PeerOIMIO_B.config(bg='#006E8E',fg='white')

    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False
    
    Can4=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can4.place(x=5, y=35)
        
    EntryDate = datetime.now().strftime('%d-%m-%Y')
    StartTime = StartTime

    def Validate_Clear():
        LabelList = [Label2, Label3, Label4, Label5, Label6, Label7, DocCost_L, Label8, Label9, Label10, Label11, Label12, Label12_1, Label12_2]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label4, Label5, Label6, Label7, Label10, Label11, Label12_1, Label12_2]
        AllEntryList = [Entry4, Entry5, Entry6, Entry7, Entry10, Entry11, Entry12_1, Entry12_2]
        AllEntryValues = [Entry4_Values, Entry5_Values, Entry6_Values, Entry7_Values, Entry10_Values, Entry11_Values, Entry12_1_Values, Entry12_2_Values]
        AllEntryMessage = [Entry4_msg, Entry5_msg, Entry6_msg, Entry7_msg, Entry10_msg, Entry11_msg, Entry12_1_msg, Entry12_2_msg]

        DateLabelList = [Label12]
        DateEntryList = [Entry12]

        Submit = True

        if Entry10.get() != 'In Process':
            if Entry8.get()[:2] != r'\\':
                Label8.config(foreground='red')
                Entry8.focus_set()
                messagebox.showerror('Validation Check','File Path should be a valid network path, please check the path!')
                return False

            if not os.path.isdir(Entry8.get()):
                Label8.config(foreground='red')
                Entry8.focus_set()
                messagebox.showerror('Validation Check','File Path is not valid path, please check the path!')
                return False

            if Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or DocCost_E.get() == '' or Entry8.get() == '' or Entry10.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

            elif Entry10.get() == "On Hold":
                if Entry11.get() == '':
                    messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                    return False
                elif Entry11.get() == 'Yes' and (Entry12.get() == '' or Entry12_1.get() == '' or Entry12_2.get() == ''):
                        messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                        return False
            
        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='red')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[i])
                    Submit = False
                    break
        
        for i in range(0,len(DateEntryList)):
            if DateEntryList[i].get() != '':
                result = Date_Validation(DateEntryList[i])
                if result == 'Failed':
                    DateLabelList[i].config(foreground='red')
                    DateEntryList[i].focus_set()
                    messagebox.showerror('Date Error','This typed date is not valid! Please check')
                    Submit = False
                    break

        if Submit:
            SubmitAnaOIMIO()
    
    def SubmitAnaOIMIO():
        global NPTotalHours
        global ActiveJobPage

        if Entry10.get() == "On Hold":
            if Entry11.get() == 'Yes':
                if Entry10.get() == 'Completed':
                    EntryStatus = 'Completed'
                    Status = 'Unassigned'
                    Stage = 'Peer Reviewer'
                    Assignee = ''
                else:
                    EntryStatus = Entry10.get()
                    Status = Entry10.get()
                    Stage = 'Analysis'
                    Assignee = Var_UserName

                EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
                MailDate = Entry12.get() + " " + Entry12_1.get() + ":" + Entry12_2.get()

                Record = (ReviewID, Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), DocCost_E.get().strip(), Entry8.get(), Entry9.get(1.0, END).strip(), Entry10.get(), 
                            Entry11.get(), MailDate, Cvar1.get(), Cvar2.get(), Cvar3.get(), Cvar4.get(), Cvar5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                query = ("""INSERT INTO tblIssuesAnaOIMIO (ReviewID, Individual, Entity, RiskLevel, RiskFactors, Sanctions, PEP, DocCost, FileLinks, Comments, Status, MailtoOIMIO, MailDate, RiskAssessment, OwnershipStructure, Ownership, LegalRep, AdditionalDoc, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
                
                AnalysisID = UpdateQueryReturn(ProDBPath, query, Record)

                if Tname == 2 or T4Stage == 'Analysis':
                    Record = ('Analysis', AnalysisID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')            
                    query = ("INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
                    UpdateQueryfun(ProDBPath, query, Record)

                    Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                    query = ("""UPDATE tblIssuesMainOIMIO SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                    UpdateQueryfun(ProDBPath, query, Record)

                    NPTotalHours = datetime.min
                    ActiveJobPage = False
                    Cancel()
                    Timer1.stop_clock()

                messagebox.showinfo('Completed','Analysis Updated Successfully!')
                if Tname == 2 or T4Stage == 'Analysis':
                    WorkQueueOIMIOCheck(RBCan, Timer1)

            elif Entry11.get() == 'No':
                if Entry10.get() == 'Completed':
                    EntryStatus = 'Completed'
                    Status = 'Unassigned'
                    Stage = 'Peer Reviewer'
                    Assignee = ''
                else:
                    EntryStatus = Entry10.get()
                    Status = Entry10.get()
                    Stage = 'Analysis'
                    Assignee = Var_UserName

                EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
                
                Record = (ReviewID, Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), DocCost_E.get().strip(), Entry8.get(), Entry9.get(1.0, END).strip(), Entry10.get(), 
                            Entry11.get(), Cvar1.get(), Cvar2.get(), Cvar3.get(), Cvar4.get(), Cvar5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                query = ("""INSERT INTO tblIssuesAnaOIMIO (ReviewID, Individual, Entity, RiskLevel, RiskFactors, Sanctions, PEP, DocCost, FileLinks, Comments, Status, MailtoOIMIO, RiskAssessment, OwnershipStructure, Ownership, LegalRep, AdditionalDoc, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
                
                AnalysisID = UpdateQueryReturn(ProDBPath, query, Record)

                if Tname == 2 or T4Stage == 'Analysis':
                    Record = ('Analysis', AnalysisID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')            
                    query = ("INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
                    UpdateQueryfun(ProDBPath, query, Record)

                    Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                    query = ("""UPDATE tblIssuesMainOIMIO SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                    UpdateQueryfun(ProDBPath, query, Record)
                    
                    NPTotalHours = datetime.min
                    ActiveJobPage = False
                    Cancel()
                    Timer1.stop_clock()

                messagebox.showinfo('Completed','Analysis Updated Successfully!')
                if Tname == 2 or T4Stage == 'Analysis':
                    WorkQueueOIMIOCheck(RBCan, Timer1)
        else:
            if Entry10.get() == 'Completed':
                EntryStatus = 'Completed'
                Status = 'Unassigned'
                Stage = 'Peer Reviewer'
                Assignee = ''
            else:
                EntryStatus = Entry10.get()
                Status = Entry10.get()
                Stage = 'Analysis'
                Assignee = Var_UserName

            EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

            Record = (ReviewID, Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), DocCost_E.get().strip(), Entry8.get(), Entry9.get(1.0, END).strip(), Entry10.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
            query = ("""INSERT INTO tblIssuesAnaOIMIO (ReviewID, Individual, Entity, RiskLevel, RiskFactors, Sanctions, PEP, DocCost, FileLinks, Comments, Status, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
            
            AnalysisID = UpdateQueryReturn(ProDBPath, query, Record)

            if Tname == 2 or T4Stage == 'Analysis':
                Record = ('Analysis', AnalysisID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')            
                query = ("INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
                UpdateQueryfun(ProDBPath, query, Record)

                Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                query = ("""UPDATE tblIssuesMainOIMIO SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                UpdateQueryfun(ProDBPath, query, Record)

                NPTotalHours = datetime.min
                ActiveJobPage = False
                Cancel()
                Timer1.stop_clock()

            messagebox.showinfo('Completed','Analysis Updated Successfully!')
            if Tname == 2 or T4Stage == 'Analysis':
                WorkQueueOIMIOCheck(RBCan, Timer1)
        
    def Cancel():
        Validate_Clear()
        Entry2.delete(0, END)
        Entry3.delete(0, END)
        Entry4.delete(0, END)
        Entry5.set('')
        Entry6.delete(0, END)
        Entry7.delete(0, END)

        DocCost_E.delete(0, END)
        Entry8.delete(0, END)

        Entry9.delete(1.0, END)
        Entry10.set('')
        Entry11.set('')
        Entry12.delete(0, END)
        Entry12_1.delete(0, END)
        Entry12_2.delete(0, END)
        
        Label11.place_forget()
        Label12.place_forget()
        Entry11.place_forget()
        Label12_0.place_forget()
        Entry12.place_forget()
        Entry12_1.place_forget()
        Label12_1.place_forget()
        Label12_1_1.place_forget()
        Label12_2.place_forget()
        Entry12_2.place_forget()
        
        Label14_0.place_forget()
        Cvar1.set(0)
        Cvar2.set(0)
        Cvar3.set(0)
        Cvar4.set(0)
        Cvar5.set(0)
        c1.place_forget()
        c2.place_forget()
        c3.place_forget()
        c4.place_forget()
        c5.place_forget()
        
    def StatusSelected(event):
        TempStatus = Entry10.get()

        if TempStatus == "On Hold":
            Label11.place(x=280, y=340)
            Entry11.set('')
            Entry11.place(x=430, y=340)
            Label14_0.place(x=650, y=270)
            c1.place(x=650, y=295)
            c2.place(x=650, y=320)
            c3.place(x=650, y=345)
            c4.place(x=650, y=370)
            c5.place(x=650, y=395)

        else:
            Label11.place_forget()
            Label12.place_forget()
            Entry11.place_forget()
            
            Label12_0.place_forget()
            Label12_1.place_forget()
            Label12_1_1.place_forget()
            Label12_2.place_forget()

            Entry12.place_forget()
            Entry12_1.place_forget()
            Entry12_2.place_forget()
            
            Label14_0.place_forget()
            Cvar1.set(0)
            Cvar2.set(0)
            Cvar3.set(0)
            Cvar4.set(0)
            Cvar5.set(0)
            c1.place_forget()
            c2.place_forget()
            c3.place_forget()
            c4.place_forget()
            c5.place_forget()

    def MailSent(event):
        TempStatus = Entry11.get()

        if TempStatus == "Yes":
            Label12_0.place(x=400, y=370)
            Label12.place(x=280, y=390)
            Label12_1.place(x=520, y=370)
            Label12_2.place(x=550, y=370)

            Entry12.delete(0, END)
            Entry12_1.delete(0, END)
            Entry12_2.delete(0, END)
            Entry12.place(x=430, y=390)
            Entry12_1.place(x=530, y=390)
            Label12_1_1.place(x=545, y=390)
            Entry12_2.place(x=560, y=390)
            
        else:
            Label12.place_forget()
            Label12_0.place_forget()
            Label12_1.place_forget()
            Label12_1_1.place_forget()
            Label12_2.place_forget()

            Entry12.delete(0, END)
            Entry12_1.delete(0, END)
            Entry12_2.delete(0, END)
            Entry12.place_forget()
            Entry12_1.place_forget()
            Entry12_2.place_forget()
            
    RBAnalysis_V_Entry2 = StringVar()
    RBAnalysis_V_Entry3 = StringVar()
    RBGeneral_V_Entry8 = StringVar()
    RBGeneral_V_DocCost_E = StringVar()
    RBGeneral_V_Entry12_1 = StringVar()
    RBGeneral_V_Entry12_2 = StringVar()
    
    Label1 = Label(Can4, text="No of Layers*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can4, text="Individual*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label3 = Label(Can4, text="Entity*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label4 = Label(Can4, text="Risk Level*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can4, text="Risk Factors*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can4, text="Sanctions*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7 = Label(Can4, text="PEP*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    DocCost_L = Label(Can4, text="Document Cost*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label8 = Label(Can4, text="File Path*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label9 = Label(Can4, text="Comments",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10 = Label(Can4, text="Status*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    Label11 = Label(Can4, text="Mail send to OIMIO?*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label12_0 = Label(Can4, text="dd/mm/yyyy",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label12 = Label(Can4, text="Date mail send to OIMIO*",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label12_1 = Label(Can4, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label12_1_1 = Label(Can4, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label12_2 = Label(Can4, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))

    Label14_0 = Label(Can4, text="Reason on hold (OIMIO) :",width=20,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    
    Entry2 = Entry(Can4,validate='key',textvariable=RBAnalysis_V_Entry2,bg="white",font=("Calibri",10),width=10)
    Entry2['validatecommand'] = (Entry2.register(AcceptNum),'%P','%d')
    Entry3 = Entry(Can4,validate='key',textvariable=RBAnalysis_V_Entry3,bg="white",font=("Calibri",10),width=10)
    Entry3['validatecommand'] = (Entry3.register(AcceptNum),'%P','%d')
    
    Entry4_Values = SelectQueryfun(SupportDBPath,"SELECT RiskName FROM tblRiskLevel WHERE Project = 'OIMIO';")
    Entry4 = AutocompleteCombobox(Can4, width=10, completevalues=Entry4_Values)
    Entry4_msg = 'This typed Risk Level is not available in the list, please check!'
    
    Entry5_Values = SelectQueryfun(SupportDBPath,"SELECT RiskFactor FROM tblRiskFactors WHERE Project = 'OIMIO';")
    Entry5 = AutocompleteCombobox(Can4, width=10, completevalues=Entry5_Values)
    Entry5_msg = 'This typed Risk Factor is not available in the list, please check!'
    
    Entry6_Values = ['Yes', 'No']
    Entry6 = AutocompleteCombobox(Can4, width=10, completevalues=Entry6_Values)
    Entry6_msg = 'This typed Option is not available in the list, please check!'
    
    Entry7_Values = ['Yes', 'No']
    Entry7 = AutocompleteCombobox(Can4, width=10, completevalues=Entry7_Values)
    Entry7_msg = 'This typed Option is not available in the list, please check!'
    
    DocCost_E = Entry(Can4,validate='key',textvariable=RBGeneral_V_DocCost_E,bg="white",font=("Calibri",10),width=10)
    DocCost_E['validatecommand'] = (DocCost_E.register(AcceptDecimal),'%P')

    Entry8 = Entry(Can4,textvariable=RBGeneral_V_Entry8,bg="white",font=("Calibri",10),width=45)
    
    Entry9 = Text(Can4,bg="white",font=("Calibri",10),width=65,height=2)
    Entry9.bind('<Tab>', lambda event: focusNext(Entry9))
    Entry9.bind('<Shift-Tab>', lambda event: focusPrev(Entry9))

    Entry10_Values = SelectQueryfun(SupportDBPath,"SELECT StatusName FROM tblStatusSelect WHERE StatusName != 'Revert Back' AND Project = 'OIMIO';")
    Entry10 = AutocompleteCombobox(Can4, width=10, completevalues=Entry10_Values)
    Entry10_msg = 'This typed Status is not available in the list, please check!'
    Entry10.bind("<<ComboboxSelected>>", StatusSelected)
    Entry10.bind("<FocusOut>", StatusSelected)

    Entry11_Values = ['Yes', 'No']
    Entry11 = AutocompleteCombobox(Can4, width=10, completevalues=Entry11_Values)
    Entry11_msg = 'This typed Risk Factor is not available in the list, please check!'
    Entry11.bind("<<ComboboxSelected>>", MailSent)
    Entry11.bind("<FocusOut>", MailSent)
    
    today = date.today()
    Entry12 = DateEntry(Can4,font=("Calibri",10,"bold"),width=10,date_pattern='dd/mm/yyyy',maxdate=today)
    Entry12.delete(0, END)
    
    Entry12_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry12_1 = Entry(Can4,validate='key',textvariable=RBGeneral_V_Entry12_1,bg="white",font=("Calibri",10),width=2)
    Entry12_1['validatecommand'] = (Entry12_1.register(AcceptNum),'%P','%d')
    Entry12_1_msg = 'This typed hour is not correct, please check!'
    
    Entry12_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry12_2 = Entry(Can4,validate='key',textvariable=RBGeneral_V_Entry12_2,bg="white",font=("Calibri",10),width=2)
    Entry12_2['validatecommand'] = (Entry12_2.register(AcceptNum),'%P','%d')
    Entry12_2_msg = 'This typed minute is not correct, please check!'
    
    def Checkbox_Selection(CName):
        pass

    Cvar1 = IntVar()
    Cvar2 = IntVar()
    Cvar3 = IntVar()
    Cvar4 = IntVar()
    Cvar5 = IntVar()
    
    c1 = Checkbutton(Can4, text='Risk Assessment',variable=Cvar1, onvalue=1, offvalue=0, command=lambda: Checkbox_Selection(c1), bg='white',cursor='hand2')
    c2 = Checkbutton(Can4, text='Ownership Structure (Chart)',variable=Cvar2, onvalue=1, offvalue=0, command=lambda: Checkbox_Selection(c2), bg='white',cursor='hand2')
    c3 = Checkbutton(Can4, text='Ownership',variable=Cvar3, onvalue=1, offvalue=0, command=lambda: Checkbox_Selection(c3), bg='white',cursor='hand2')
    c4 = Checkbutton(Can4, text='Legal Representatives',variable=Cvar4, onvalue=1, offvalue=0, command=lambda: Checkbox_Selection(c4), bg='white',cursor='hand2')
    c5 = Checkbutton(Can4, text='Additional Documents',variable=Cvar5, onvalue=1, offvalue=0, command=lambda: Checkbox_Selection(c5), bg='white',cursor='hand2')

    Button1 = Button(Can4, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(Can4, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')

    Button1.place(x=450, y=430)
    Button2.place(x=650, y=430)
    
    query = ("SELECT * FROM tblIssuesAnaOIMIO WHERE ReviewID = '" + ReviewID + "' ORDER BY AnalysisID DESC;")
    result = ViewQueryfun(ProDBPath, query)
    if len(result) > 0:
        Entry2.insert(0,result[0][2])
        Entry3.insert(0,result[0][3])
        Entry4.insert(0,result[0][4])
        Entry5.set(result[0][5])
        Entry6.insert(0,result[0][6])
        Entry7.insert(0,result[0][7])

        DocCost_E.insert(0,result[0][8])
        Entry8.insert(0,result[0][9])

        Entry9.insert(1.0,result[0][10])
        Entry10.set(result[0][11])
                
        if result[0][11] == "On Hold":
            Entry11.set(result[0][12])
            if Entry11.get() == "Yes":
                DateValue = result[0][13]
                
                if DateValue == '' or DateValue == None:
                    Entry12.delete(0,END)
                else:
                    MailDate = result[0][13].split(" ")
                    HourMin = MailDate[1].split(":")
                    Entry12.set_date(MailDate[0])
                    Entry12_1.insert(0,HourMin[0])
                    Entry12_2.insert(0,HourMin[1])

            Cvar1.set(result[0][14])
            Cvar2.set(result[0][15])
            Cvar3.set(result[0][16])
            Cvar4.set(result[0][17])
            Cvar5.set(result[0][18])
        
    if Tname == 3 or T4Stage == 'Peer Reviewer':
        Entry9.config(state = "normal")
        Entry9.bind("<Key>", lambda a: "break")
        Entry10.config(state = "disabled")

        Button1.config(text="Update")
        Button2.config(state = 'disabled')

    if Tname == 'Archive':
        ActiveJobPage = False

        Button1.config(state = 'disabled')
        Button2.config(state = 'disabled')
        
    Label1.place(x=280, y=30)
    Label2.place(x=430, y=10)
    Label3.place(x=520, y=10)
    Label4.place(x=280, y=80)
    Label5.place(x=630, y=80)
    Label6.place(x=280, y=130)
    Label7.place(x=630, y=130)
    DocCost_L.place(x=280, y=180)
    Label8.place(x=630, y=180)

    Label9.place(x=280, y=235)
    Label10.place(x=280, y=295)
        
    Entry2.place(x=430, y=30)
    Entry3.place(x=520, y=30)
    Entry4.place(x=430, y=80)
    Entry5.place(x=780, y=80)
    Entry6.place(x=430, y=130)
    Entry7.place(x=780, y=130)
    
    DocCost_E.place(x=430, y=180)
    Entry8.place(x=780, y=180)

    Entry9.place(x=430, y=230)
    Entry10.place(x=430, y=295)

    Entry9_vsb = ttk.Scrollbar(Can4, orient="vertical", command=Entry9.yview)
    Entry9_vsb.place(x=885, y=230, height=35)
    Entry9.configure(yscrollcommand=Entry9_vsb.set)
    
    TempStatus = Entry10.get()

    if TempStatus == "On Hold":
        Label11.place(x=280, y=340)
        Label12_0.place(x=400, y=370)
        Label12.place(x=280, y=390)
        Label12_1.place(x=520, y=370)
        Label12_2.place(x=550, y=370)

        Entry11.place(x=430, y=340)
        Entry12.place(x=430, y=390)
        Entry12_1.place(x=530, y=390)
        Label12_1_1.place(x=545, y=390)
        Entry12_2.place(x=560, y=390)

        Label14_0.place(x=650, y=270)
        c1.place(x=650, y=295)
        c2.place(x=650, y=320)
        c3.place(x=650, y=345)
        c4.place(x=650, y=370)
        c5.place(x=650, y=395)
    else:
        Label11.place_forget()
        Label12.place_forget()
        Entry11.place_forget()
        Label12_0.place_forget()
        Entry12.place_forget()
        Entry12_1.place_forget()
        Entry12_2.place_forget()
        
        Label14_0.place_forget()
        Cvar1.set(0)
        Cvar2.set(0)
        Cvar3.set(0)
        Cvar4.set(0)
        Cvar5.set(0)
        c1.place_forget()
        c2.place_forget()
        c3.place_forget()
        c4.place_forget()
        c5.place_forget()

    StatusSelected(Event)
    MailSent(Event)

########################################################## This is Peer Reviewer Page for OIMIO ########################################################

def ViewPeerOIMIO(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = ''):
    
    global GeneralOIMIO_B, AnalysisOIMIO_B, PeerOIMIO_B

    GeneralOIMIO_B.config(bg='#006E8E',fg='white')
    AnalysisOIMIO_B.config(bg='#006E8E',fg='white')
    PeerOIMIO_B.config(bg='sky blue',fg='black')

    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False

    Can5=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can5.place(x=5, y=35)

    EntryDate = datetime.now().strftime('%d-%m-%Y')
    StartTime = StartTime
    
    def Validate_Clear():
        LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label14, Label15, Label16, Label17, Label18, Label19]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label14, Label15, Label16]
        AllEntryList = [Entry1, Entry2, Entry3, Entry4, Entry5, Entry6, Entry7, Entry8, Entry9, Entry10, Entry11, Entry12, Entry13, Entry14, Entry15, Entry16]
        AllEntryValues = [Entry1_Values]
        AllEntryMessage = [Entry1_msg]
        
        Submit = True

        if Entry18.get() == 'On Hold' and Entry19.get(1.0, END).strip() == '':
            Label19.config(foreground='red')
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        if Entry18.get() != 'In Process':
            if (Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or 
                Entry9.get() == '' or Entry10.get() == '' or Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == '' or Entry14.get() == '' or Entry15.get() == '' or Entry16.get() == '' or 
                Entry18.get() == ''):
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[0], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='red')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[0])
                    Submit = False
                    break
        
        if Entry18.get() != '':
            result = DropDown_Validation(Entry18_Values, Entry18)
            if result == 'Failed':
                Label18.config(foreground='red')
                Entry18.focus_set()
                messagebox.showerror('Validation Check',AllEntryMessage[0])
                Submit = False
      
        if Submit:
            SubmitPROIMIO()

    def SubmitPROIMIO():
        global NPTotalHours
        global ActiveJobPage
        
        if Entry18.get() == 'Completed':
            EntryStatus = 'Completed'
            Status = 'Completed'
            Stage = 'Job Completed'
            Assignee = ''
        elif Entry18.get() == 'Revert Back':
            EntryStatus = 'Revert Back'
            Status = 'Revert Back'
            Stage = 'Analysis'
            Assignee = ''
        else:
            EntryStatus = Entry18.get()
            Status = Entry18.get()
            Stage = 'Peer Reviewer'
            Assignee = Var_UserName

        EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

        Record = (ReviewID, Entry1.get(), Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(), 
                    Entry11.get(), Entry12.get(), Entry13.get(), Entry14.get(), Entry15.get(), Entry16.get(), Entry17.get(1.0, END).strip(), Entry18.get(), Entry19.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesPROIMIO (ReviewID, LegalName, LegalForm, RegAddress, RegNumber, BusinessActivities, OwnershipStructure, LegalRep, RepEntity, UBORegister, 
                    RemainingIDVDoc, Screening, Approval, KYCnetFields, KYCnetQuestions, KYCnetFA, KYCnetTree, Comments, Status, Reason, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        
        PRID = UpdateQueryReturn(ProDBPath, query, Record)

        if Tname == 3 or T4Stage == 'Peer Reviewer':
            Record = ('PR', PRID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Peer Reviewer')            
            query = ("INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
            UpdateQueryfun(ProDBPath, query, Record)

            Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
            query = ("""UPDATE tblIssuesMainOIMIO SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
            UpdateQueryfun(ProDBPath, query, Record)

            NPTotalHours = datetime.min
            ActiveJobPage = False
            Cancel()
            Timer1.stop_clock()
        
        messagebox.showinfo('Completed','Peer Reviewer Updated Successfully!')
        if Tname == 3 or T4Stage == 'Peer Reviewer':
            WorkQueueOIMIOCheck(RBCan, Timer1)

    def Cancel():
        Validate_Clear()
        Entry1.set('')
        Entry2.set('')
        Entry3.set('')
        Entry4.set('')
        Entry5.set('')
        Entry6.set('')
        Entry7.set('')
        Entry8.set('')
        Entry9.set('')
        Entry10.set('')
        Entry11.set('')
        Entry12.set('')
        Entry13.set('')
        Entry14.set('')
        Entry15.set('')
        Entry16.set('')
        Entry17.delete(1.0, END)
        Entry18.set('')
        Entry19.delete(1.0, END)

    Label1 = Label(Can5, text="Legal Name*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can5, text="Legal Form*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can5, text="Registered Address*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can5, text="Registration Number*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can5, text="Business Activities*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can5, text="Ownership Structure*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label7 = Label(Can5, text="Legal Representatives (Full name, DOB when available and function)*",width=25,height=3,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=150,anchor='e')
    Label8 = Label(Can5, text="Representation Entity*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9 = Label(Can5, text="UBO Register*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10 = Label(Can5, text="Remaining - ID&V Doc (Passport, Source of Funds/wealth)*",width=25,height=2,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=180,anchor='e')
    Label11 = Label(Can5, text="Screening - LxNx, Google, SIF, Panama*",width=25,height=2,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=150,anchor='e')
    Label12 = Label(Can5, text="Approval - CCE, TPF, ITS, CSR, NVB*",width=25,height=2,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=150,anchor='e')
    Label13 = Label(Can5, text="KYCnet - Fields*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label14 = Label(Can5, text="KYCnet - Questions*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label15 = Label(Can5, text="KYCnet - FA*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label16 = Label(Can5, text="KYCnet - Relation Tree*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label17 = Label(Can5, text="Comments",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label18 = Label(Can5, text="Status*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label19 = Label(Can5, text="Reason*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    def ApplyStyle(EntryName):
        style= ttk.Style()
        style.theme_use('default')
        style.configure("Style0.TCombobox", foreground= "black", background= "white")
        style.configure("Style1.TCombobox", foreground= "red", background= "white")
        style.configure("Style2.TCombobox", foreground= "green", background= "white")

        if EntryName.get() == 'Fail':
            EntryName.config(style='Style1.TCombobox')
        elif EntryName.get() == 'Pass':
            EntryName.config(style='Style2.TCombobox')
        else:
            EntryName.config(style='Style0.TCombobox')

    Entry1_Values = ['Pass', 'Fail']
    Entry1 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry1_msg = 'This typed text is not available in the list, please check!'
    
    Entry2 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry3 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry4 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry5 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry6 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry7 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry8 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry9 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry10 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry11 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry12 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry13 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry14 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry15 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry16 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry17 = Text(Can5,bg="white",font=("Calibri",10),width=30,height=10)
    Entry17.bind('<Tab>', lambda event: focusNext(Entry17))
    Entry17.bind('<Shift-Tab>', lambda event: focusPrev(Entry17))

    Entry18_Values=SelectQueryfun(SupportDBPath,"SELECT StatusName FROM tblStatusSelect WHERE Project = 'OIMIO';")
    Entry18 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry18_Values)
    
    Entry19 = Text(Can5,bg="white",font=("Calibri",10),width=30,height=2)
    Entry19.bind('<Tab>', lambda event: focusNext(Entry19))
    Entry19.bind('<Shift-Tab>', lambda event: focusPrev(Entry19))

    Button1 = Button(Can5, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(Can5, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')

    Button1.place(x=450, y= 430)
    Button2.place(x=650, y= 430)

    Entry1.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry1))
    Entry2.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry2))
    Entry3.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry3))
    Entry4.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry4))
    Entry5.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry5))
    Entry6.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry6))
    Entry7.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry7))
    Entry8.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry8))
    Entry9.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry9))
    Entry10.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry10))
    Entry11.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry11))
    Entry12.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry12))
    Entry13.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry13))
    Entry14.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry14))
    Entry15.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry15))
    Entry16.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry16))
    
    Entry1.bind("<FocusOut>", lambda event: ApplyStyle(Entry1))
    Entry2.bind("<FocusOut>", lambda event: ApplyStyle(Entry2))
    Entry3.bind("<FocusOut>", lambda event: ApplyStyle(Entry3))
    Entry4.bind("<FocusOut>", lambda event: ApplyStyle(Entry4))
    Entry5.bind("<FocusOut>", lambda event: ApplyStyle(Entry5))
    Entry6.bind("<FocusOut>", lambda event: ApplyStyle(Entry6))
    Entry7.bind("<FocusOut>", lambda event: ApplyStyle(Entry7))
    Entry8.bind("<FocusOut>", lambda event: ApplyStyle(Entry8))
    Entry9.bind("<FocusOut>", lambda event: ApplyStyle(Entry9))
    Entry10.bind("<FocusOut>", lambda event: ApplyStyle(Entry10))
    Entry11.bind("<FocusOut>", lambda event: ApplyStyle(Entry11))
    Entry12.bind("<FocusOut>", lambda event: ApplyStyle(Entry12))
    Entry13.bind("<FocusOut>", lambda event: ApplyStyle(Entry13))
    Entry14.bind("<FocusOut>", lambda event: ApplyStyle(Entry14))
    Entry15.bind("<FocusOut>", lambda event: ApplyStyle(Entry15))
    Entry16.bind("<FocusOut>", lambda event: ApplyStyle(Entry16))
    
    query = ("SELECT * FROM tblIssuesPROIMIO WHERE ReviewID = '" + ReviewID + "' ORDER BY PRID DESC;")
    result = ViewQueryfun(ProDBPath, query)
    
    if len(result) > 0:
        Entry1.set(result[0][2])
        Entry2.set(result[0][3])
        Entry3.set(result[0][4])
        Entry4.set(result[0][5])
        Entry5.set(result[0][6])
        Entry6.set(result[0][7])
        Entry7.set(result[0][8])
        Entry8.set(result[0][9])
        Entry9.set(result[0][10])
        Entry10.set(result[0][11])
        Entry11.set(result[0][12])
        Entry12.set(result[0][13])
        Entry13.set(result[0][14])
        Entry14.set(result[0][15])
        Entry15.set(result[0][16])
        Entry16.set(result[0][17])
        Entry17.insert(1.0, result[0][18].strip())
        Entry18.set(result[0][19])
        Entry19.insert(1.0, result[0][20].strip())
    
    if Tname == 2 or T4Stage == 'Analysis' or Tname == 'Archive':
        if Tname == 'Archive':
            ActiveJobPage = False

        Button1.config(state='disabled')
        Button2.config(state='disabled')

    Label1.place(x=20, y=20)
    Label2.place(x=20, y=80)
    Label3.place(x=20, y=140)
    Label4.place(x=20, y=200)
    Label5.place(x=20, y=260)
    Label6.place(x=20, y=320)
    Label7.place(x=20, y=380)

    Label8.place(x=370, y=20)
    Label9.place(x=370, y=80)
    Label10.place(x=370, y=130)
    Label11.place(x=370, y=200)
    Label12.place(x=370, y=260)
    Label13.place(x=370, y=330)
    Label14.place(x=370, y=390)

    Label15.place(x=710, y=20)
    Label16.place(x=710, y=80)
    Label17.place(x=710, y=200)
    Label18.place(x=710, y=330)
    Label19.place(x=710, y=390)
        
    Entry1.place(x=210, y=20)
    Entry2.place(x=210, y=80)
    Entry3.place(x=210, y=140)
    Entry4.place(x=210, y=200)
    Entry5.place(x=210, y=260)
    Entry6.place(x=210, y=320)
    Entry7.place(x=210, y=390)

    Entry8.place(x=560, y=20)
    Entry9.place(x=560, y=80)
    Entry10.place(x=560, y=140)
    Entry11.place(x=560, y=210)
    Entry12.place(x=560, y=270)
    Entry13.place(x=560, y=330)
    Entry14.place(x=560, y=390)

    Entry15.place(x=900, y=20)
    Entry16.place(x=900, y=80)
    Entry17.place(x=900, y=140)
    Entry18.place(x=900, y=330)
    Entry19.place(x=900, y=385)

    Entry17_vsb = ttk.Scrollbar(Can5, orient="vertical", command=Entry17.yview)
    Entry17_vsb.place(x=1113, y=140, height=155)
    Entry17.configure(yscrollcommand=Entry17_vsb.set)

    Entry19_vsb = ttk.Scrollbar(Can5, orient="vertical", command=Entry19.yview)
    Entry19_vsb.place(x=1113, y=385, height=35)
    Entry19.configure(yscrollcommand=Entry19_vsb.set)

    def StatusSelected(event):
        TempStatus = Entry18.get()

        if TempStatus == "On Hold":
            Label19.config(text="Reason*")
            Entry19.config(state='normal')
            
        else:
            Label19.config(text="Reason")
            Entry19.delete(1.0, END)
            Entry19.config(state='disabled')
            
    Entry18.bind("<<ComboboxSelected>>", StatusSelected)
    Entry18.bind("<FocusOut>", StatusSelected)

    StatusSelected(Event)
    
    FTEList = [Entry1, Entry2, Entry3, Entry4, Entry5, Entry6, Entry7, Entry8, Entry9, Entry10, Entry11, Entry12, Entry13, Entry14, Entry15, Entry16]
    
    for e in FTEList:
        ApplyStyle(e)
    
def ViewIssuesOIMIO(IssueCan, ReviewID, Tname, Stage, RBCan, Timer1):
    
    Can2=Canvas(IssueCan,bg="white", width=1160, height=500, highlightthickness=0)
    Can2.place(x=10, y=40)

    StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

    global GeneralOIMIO_B, AnalysisOIMIO_B, PeerOIMIO_B

    GeneralOIMIO_B = Button(Can2, text="General", width=15, height=1, command=lambda:ViewGeneralOIMIO(Can2, ReviewID, Tname, RBCan),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')
    AnalysisOIMIO_B = Button(Can2, text="Analysis", width=15, height=1, command=lambda:ViewAnalysisOIMIO(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage=Stage),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')           
    PeerOIMIO_B = Button(Can2, text="Peer Reviewer", width=15, height=1, command=lambda:ViewPeerOIMIO(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage=Stage),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')
    
    GeneralOIMIO_B.place(x=20, y=7)
    AnalysisOIMIO_B.place(x=150, y=7)
    PeerOIMIO_B.place(x=280, y=7)

    Timer1.start_clock(Can2)

    if Tname == 2:
        ViewAnalysisOIMIO(Can2, ReviewID, Tname, RBCan, StartTime, Timer1)
    elif Tname == 3:
        ViewPeerOIMIO(Can2, ReviewID, Tname, RBCan, StartTime, Timer1)
    elif Tname == 4:
        if Stage == 'Analysis':
            ViewAnalysisOIMIO(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = Stage)
        elif Stage == 'Peer Reviewer':
            ViewPeerOIMIO(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = Stage)
    elif Tname == 'Archive':
        Timer1.hide_clock()
        ViewGeneralOIMIO(Can2, ReviewID, 'Archive', RBCan)

def SelectedIssueOIMIO(RBCan, ReviewID, Tname, Stage, Timer1):
    global NPTotalHours
    NPTotalHours = datetime.min
    
    IssueCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    IssueCan.place(x=5, y=40)

    ProjectLabel = Label(IssueCan, text="OIMIO",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)

    IssueLabel = Label(IssueCan, text=ReviewID + ' - ' + Stage, width=30,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    IssueLabel.place(x=500, y=5)

    if Tname == 'Archive':
        IssueLabel.config(text=ReviewID + ' - Review')
    
    ViewIssuesOIMIO(IssueCan, ReviewID, Tname, Stage, RBCan, Timer1)

########################################################## This is Work Queue Page for OIMIO ########################################################
def WorkQueueOIMIOCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        WorkQueueOIMIO(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            WorkQueueOIMIO(RBCan, Timer1)
        
def WorkQueueOIMIO(RBCan, Timer1, Initial=''):

    global WorkQueueOIMIO_B, CreateOIMIO_B, AdminOIMIO_B, ArchiveOIMIO_B, UserStatsOIMIO_B

    WorkQueueOIMIO_B.config(bg='#E7E6E6')
    CreateOIMIO_B.config(bg='sky blue')
    AdminOIMIO_B.config(bg='sky blue')
    ArchiveOIMIO_B.config(bg='sky blue')
    UserStatsOIMIO_B.config(bg='sky blue')
    
    global NPTotalHours
    NPTotalHours = datetime.min
    
    ProjectsCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ProjectsCan.place(x=5, y=40)

    ProjectLabel = Label(ProjectsCan, text="OIMIO",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)

    def SelectOption():
        selection = Projects_Option.get()

        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        if selection == 1:
            Can1=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
            Can1.place(x=10, y=40)

            Label1 = Label(Can1, text="ANALYSIS",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label2 = Label(Can1, text="PEER REVIEW",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label3 = Label(Can1, text="ON HOLD",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            
            Label1.place(x=100, y=10)
            Label2.place(x=450, y=10)
            Label3.place(x=850, y=10)

            TVFrame2=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame2.place(x=1, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "COUNTRY"]
            RBtree2 = MyTreeview(TVFrame2, columns=arrlbHeader, show="headings", height=22)

            RBtree2.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree2.heading("#1", text="REVIEW ID")
            RBtree2.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree2.heading("#2", text="DUE DATE")
            RBtree2.column("#3", anchor=tkinter.CENTER, width=80)
            RBtree2.heading("#3", text="STATUS")
            RBtree2.column("#4", anchor=tkinter.CENTER, width=128)
            RBtree2.heading("#4", text="ASSIGNED TO")
            RBtree2.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree2.heading("#5", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree2.column(arrlbHeader[iCount], stretch=True)

            TVFrame3=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame3.place(x=360, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "COUNTRY"]
            RBtree3 = MyTreeview(TVFrame3, columns=arrlbHeader, show="headings", height=22)

            RBtree3.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree3.heading("#1", text="REVIEW ID")
            RBtree3.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree3.heading("#2", text="DUE DATE")
            RBtree3.column("#3", anchor=tkinter.CENTER, width=80)
            RBtree3.heading("#3", text="STATUS")
            RBtree3.column("#4", anchor=tkinter.CENTER, width=128)
            RBtree3.heading("#4", text="ASSIGNED TO")
            RBtree3.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree3.heading("#5", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree3.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree3.column(arrlbHeader[iCount], stretch=True)

            TVFrame4=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame4.place(x=720, y=40, width=430, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "STAGE", "COUNTRY"]
            RBtree4 = MyTreeview(TVFrame4, columns=arrlbHeader, show="headings", height=22)

            RBtree4.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree4.heading("#1", text="REVIEW ID")
            RBtree4.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree4.heading("#2", text="DUE DATE")
            RBtree4.column("#3", anchor=tkinter.CENTER, width=75)
            RBtree4.heading("#3", text="STATUS")
            RBtree4.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#4", text="ASSIGNED TO")
            RBtree4.column("#5", anchor=tkinter.CENTER, width=100)
            RBtree4.heading("#5", text="STAGE")
            RBtree4.column("#6", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#6", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree4.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree4.column(arrlbHeader[iCount], stretch=True)

            RBtree2.place(x=0, y=0, height=445, width=340)
            RBtree3.place(x=0, y=0, height=445, width=340)
            RBtree4.place(x=0, y=0, height=445, width=425)

            Allworks_vsb2 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree2.yview)
            Allworks_vsb2.place(x=340, y=40, height=460)
            RBtree2.configure(yscrollcommand=Allworks_vsb2.set)

            Allworks_hsb2 = ttk.Scrollbar(TVFrame2, orient="horizontal", command=RBtree2.xview)
            Allworks_hsb2.place(x=0, y=445, width=340)
            RBtree2.configure(xscrollcommand=Allworks_hsb2.set)

            Allworks_vsb3 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree3.yview)
            Allworks_vsb3.place(x=700, y=40, height=460)
            RBtree3.configure(yscrollcommand=Allworks_vsb3.set)

            Allworks_hsb3 = ttk.Scrollbar(TVFrame3, orient="horizontal", command=RBtree3.xview)
            Allworks_hsb3.place(x=0, y=445, width=340)
            RBtree3.configure(xscrollcommand=Allworks_hsb3.set)

            Allworks_vsb4 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree3.yview)
            Allworks_vsb4.place(x=1145, y=40, height=460)
            RBtree4.configure(yscrollcommand=Allworks_vsb4.set)

            Allworks_hsb4 = ttk.Scrollbar(TVFrame4, orient="horizontal", command=RBtree4.xview)
            Allworks_hsb4.place(x=0, y=445, width=425)
            RBtree4.configure(xscrollcommand=Allworks_hsb4.set)
            
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Country FROM tblIssuesMainOIMIO as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM');""",RBtree2)
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Country FROM tblIssuesMainOIMIO as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM');""",RBtree3)
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage, Country FROM tblIssuesMainOIMIO as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID
                            WHERE Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM' );""",RBtree4)

            def OnClick(event, treename, Tname):
                item = treename.selection()
                StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

                for i in item:
                    Status = treename.item(i, "values")[2]
                    ReviewID = treename.item(i, "values")[0]

                    if Tname == 2:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Analysis"
                        TblName = 'Analysis'
                        AccessLevel = 'Analyst'

                        PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        if len(PreLevelCheck) > 0:
                            PreLevelUser = PreLevelCheck[0][0]
                        else:
                            PreLevelUser = ''

                    elif Tname == 3:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                        
                        Stage = "Peer Reviewer"
                        TblName = 'PR'
                        AccessLevel = 'PR'

                        PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                        
                        if len(PreLevelCheck) > 0:
                            PreLevelUser = PreLevelCheck[0][0]
                        else:
                            PreLevelUser = ''

                    elif Tname == 4:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = treename.item(i, "values")[4]

                        if Stage == 'Analysis':
                            AccessLevel = 'Analyst'

                            PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B WHERE Stage = 'Peer Reviewer' AND Status IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage = 'Peer Reviewer' AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                            
                            if len(PreLevelCheck) > 0:
                                PreLevelUser = PreLevelCheck[0][0]
                            else:
                                PreLevelUser = ''

                        elif Stage == 'Peer Reviewer':
                            AccessLevel = 'PR'

                            PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B WHERE Stage = 'Analysis' AND Status IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage = 'Analysis' AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                            
                            if len(PreLevelCheck) > 0:
                                PreLevelUser = PreLevelCheck[0][0]
                            else:
                                PreLevelUser = ''

                    if len(CrossCheck) == 0:
                        messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                        WorkQueueOIMIO(RBCan, Timer1)
                    else:
                        if CrossCheck[0][0] == treename.item(i, "values")[0] and CrossCheck[0][1] == treename.item(i, "values")[1] and CrossCheck[0][2] == treename.item(i, "values")[2] and CrossCheck[0][3] == treename.item(i, "values")[3] and CrossCheck[0][4] == Stage:

                            if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                                if PreLevelUser != Var_UserID:
                                    
                                    if Status == 'Unassigned' or Status == 'Revert Back' or (Status == 'Assigned' and treename.item(i, "values")[3] == Var_UserName):
                                        query = "SELECT MAX(IssueID) FROM tblIssuesGenOIMIO WHERE ReviewID = '" + ReviewID + "';"
                                        IssueID = SelectQueryfun(ProDBPath,query)
                                        EntryStatus = 'In Process'
                                        Status = 'In Process'
                                        
                                        Record = (TblName, IssueID[0], ReviewID, Var_UserName, Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(datetime.min, '%H:%M:%S'), Stage)
                                        UpdateQueryfun(ProDBPath,"INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

                                        Record = (Var_UserName, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                                        query = ("""UPDATE tblIssuesMainOIMIO SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                                        UpdateQueryfun(ProDBPath, query, Record)

                                        SelectedIssueOIMIO(RBCan, ReviewID, Tname, Stage, Timer1)
                                    
                                    elif treename.item(i, "values")[3] != Var_UserName:
                                        messagebox.showerror('Validation Check','This Review ID is already assigned to some one else, Please refresh and try again!')
                                        WorkQueueOIMIO(RBCan, Timer1)

                                    else:
                                        SelectedIssueOIMIO(RBCan, ReviewID, Tname, Stage, Timer1)
                                
                                else:
                                    messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")

                            else:
                                messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                        
                        else:
                            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                            WorkQueueOIMIO(RBCan, Timer1)
            
            RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2, Tname=2))
            RBtree3.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree3, Tname=3))
            RBtree4.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree4, Tname=4))

        elif selection == 2:
            Can2=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
            Can2.place(x=10, y=40)
            
            Label1 = Label(Can2, text="ANALYSIS",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label2 = Label(Can2, text="PEER REVIEW",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label3 = Label(Can2, text="ON HOLD",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            
            Label1.place(x=100, y=10)
            Label2.place(x=450, y=10)
            Label3.place(x=850, y=10)

            TVFrame2=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame2.place(x=1, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "COUNTRY"]
            RBtree2 = MyTreeview(TVFrame2, columns=arrlbHeader, show="headings", height=22)

            RBtree2.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree2.heading("#1", text="REVIEW ID")
            RBtree2.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree2.heading("#2", text="DUE DATE")
            RBtree2.column("#3", anchor=tkinter.CENTER, width=140)
            RBtree2.heading("#3", text="STATUS")
            RBtree2.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree2.heading("#4", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree2.column(arrlbHeader[iCount], stretch=True)

            TVFrame3=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame3.place(x=360, y=40, width=340, height=460)
            
            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "COUNTRY"]
            RBtree3 = MyTreeview(TVFrame3, columns=arrlbHeader, show="headings", height=22)

            RBtree3.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree3.heading("#1", text="REVIEW ID")
            RBtree3.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree3.heading("#2", text="DUE DATE")
            RBtree3.column("#3", anchor=tkinter.CENTER, width=140)
            RBtree3.heading("#3", text="STATUS")
            RBtree3.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree3.heading("#4", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree3.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree3.column(arrlbHeader[iCount], stretch=True)

            TVFrame4=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame4.place(x=720, y=40, width=430, height=460)
            
            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "STAGE", "COUNTRY"]
            RBtree4 = MyTreeview(TVFrame4, columns=arrlbHeader, show="headings", height=22)

            RBtree4.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree4.heading("#1", text="REVIEW ID")
            RBtree4.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree4.heading("#2", text="DUE DATE")
            RBtree4.column("#3", anchor=tkinter.CENTER, width=140)
            RBtree4.heading("#3", text="STATUS")
            RBtree4.column("#4", anchor=tkinter.CENTER, width=115)
            RBtree4.heading("#4", text="STAGE")
            RBtree4.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#5", text="COUNTRY")

            arrSortType = ["num", "date", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree4.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree4.column(arrlbHeader[iCount], stretch=True)
            
            RBtree2.place(x=0, y=0, height=445, width=340)
            RBtree3.place(x=0, y=0, height=445, width=340)
            RBtree4.place(x=0, y=0, height=445, width=425)

            Myworks_vsb2 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree2.yview)
            Myworks_vsb2.place(x=340, y=40, height=460)
            RBtree2.configure(yscrollcommand=Myworks_vsb2.set)

            Myworks_hsb2 = ttk.Scrollbar(TVFrame2, orient="horizontal", command=RBtree2.xview)
            Myworks_hsb2.place(x=0, y=445, width=340)
            RBtree2.configure(xscrollcommand=Myworks_hsb2.set)

            Myworks_vsb3 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree3.yview)
            Myworks_vsb3.place(x=700, y=40, height=460)
            RBtree3.configure(yscrollcommand=Myworks_vsb3.set)

            Myworks_hsb3 = ttk.Scrollbar(TVFrame3, orient="horizontal", command=RBtree3.xview)
            Myworks_hsb3.place(x=0, y=445, width=340)
            RBtree3.configure(xscrollcommand=Myworks_hsb3.set)

            Myworks_vsb4 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree3.yview)
            Myworks_vsb4.place(x=1145, y=40, height=460)
            RBtree4.configure(yscrollcommand=Myworks_vsb4.set)

            Myworks_hsb4 = ttk.Scrollbar(TVFrame4, orient="horizontal", command=RBtree4.xview)
            Myworks_hsb4.place(x=0, y=445, width=425)
            RBtree4.configure(xscrollcommand=Myworks_hsb4.set)
            
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Country, Assignee FROM tblIssuesMainOIMIO as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM');""",RBtree2)
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Country, Assignee FROM tblIssuesMainOIMIO as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'Unassigned', 'RM');""",RBtree3)
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Country, Assignee FROM tblIssuesMainOIMIO as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE G.Assignee = '""" + Var_UserName + """' AND Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM');""",RBtree4)

            def OnClick(event, treename, Tname):
                item = treename.selection()
                StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
                for i in item:
                    Status = treename.item(i, "values")[2]
                    ReviewID = treename.item(i, "values")[0]
                    query = ("SELECT MAX(IssueID) FROM tblIssuesGenOIMIO WHERE ReviewID = '" + ReviewID + "';")
                    IssueID = SelectQueryfun(ProDBPath,query)
                                       
                    if Tname == 2:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Analysis"
                        TblName = 'Analysis'
                    elif Tname == 3:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'Unassigned', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Peer Reviewer"
                        TblName = 'PR'
                    elif Tname == 4:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainOIMIO as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE G.Assignee = '""" + Var_UserName + """' AND Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = treename.item(i, "values")[3]


                    if len(CrossCheck) == 0:
                        messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                        WorkQueueOIMIO(RBCan, Timer1)
                    else:
                        if CrossCheck[0][0] == treename.item(i, "values")[0] and CrossCheck[0][1] == treename.item(i, "values")[1] and CrossCheck[0][2] == treename.item(i, "values")[2] and CrossCheck[0][3] == Stage and CrossCheck[0][4] == Var_UserName:
                    
                            if Status == 'Assigned':
                                EntryStatus = 'In Process'
                                Status = 'In Process'
                                Record = (TblName, IssueID[0], ReviewID, Var_UserName, Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(datetime.min, '%H:%M:%S'), Stage)
                                UpdateQueryfun(ProDBPath,"INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

                                Record = (Var_UserName, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                                query = ("""UPDATE tblIssuesMainOIMIO SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                                UpdateQueryfun(ProDBPath, query, Record)

                                SelectedIssueOIMIO(RBCan, ReviewID, Tname, Stage, Timer1)
                            else:
                                SelectedIssueOIMIO(RBCan, ReviewID, Tname, Stage, Timer1)

                        else:
                            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                            WorkQueueOIMIO(RBCan, Timer1)
                    
                    
            RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2, Tname=2))
            RBtree3.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree3, Tname=3))
            RBtree4.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree4, Tname=4))
    
    Projects_Option = IntVar()
    R1 = Radiobutton(ProjectsCan, text="All Works", variable=Projects_Option, value=1,command=SelectOption, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    R2 = Radiobutton(ProjectsCan, text="My Works", variable=Projects_Option, value=2,command=SelectOption, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    Projects_Option.set(2)
    SelectOption()

    R1.place(x=500, y=5)
    R2.place(x=700, y=5)

    Button1 = Button(ProjectsCan, text="Refresh", width=12, height=1, command=lambda:WorkQueueOIMIO(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button1.place(x=1000, y=5)

########################################################## This is Admin Page for OIMIO ########################################################

def AdminOIMIOCheck(RBCan):
    global ActiveJobPage
    if ActiveJobPage == False:
        AdminOIMIO(RBCan)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            AdminOIMIO(RBCan)

def AdminOIMIO(RBCan):

    global WorkQueueOIMIO_B, CreateOIMIO_B, AdminOIMIO_B, ArchiveOIMIO_B, UserStatsOIMIO_B
    
    if Var_Admin != 'Yes':
        messagebox.showerror('No Access','You have no admin access, please contact your team leader!')
        return False
    else:
        WorkQueueOIMIO_B.config(bg='sky blue')
        CreateOIMIO_B.config(bg='sky blue')
        AdminOIMIO_B.config(bg='#E7E6E6')
        ArchiveOIMIO_B.config(bg='sky blue')
        UserStatsOIMIO_B.config(bg='sky blue')

        global ActiveDashboard
        ActiveDashboard = False

        AdminCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
        AdminCan.place(x=5, y=40)
        
        ProjectLabel = Label(AdminCan, text="OIMIO",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
        ProjectLabel.place(x=40, y=5)
        
        def AdminRawReports():
            ReportPath = fd.askdirectory(title='Select Folder Path')
            if ReportPath != '':
                TempPath = ReportPath + r"/OIMIO Raw Data Report " + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsx"
                conn = sqlite3.connect(ProDBPath)
                query1 = "SELECT * FROM tblIssuesMainOIMIO"
                query2 = "SELECT * FROM tblIssuesGenOIMIO"
                query3 = "SELECT * FROM tblIssuesAnaOIMIO"
                query4 = "SELECT * FROM tblIssuesPROIMIO"
                query5 = "SELECT * FROM tblIssuesReopenOIMIO"
                query6 = "SELECT * FROM tblIssuesStatusOIMIO"
                query7 = "SELECT * FROM tblNonPro"
                queries = [query1, query2, query3, query4, query5, query6, query7]
                Excelsheets = ['Main', 'Create', 'Analysis', 'Peer Reviewer', 'Reopen', 'Production', 'Non Production']
                
                writer = pd.ExcelWriter(TempPath, engine = 'xlsxwriter')
                for q in queries:
                    df = pd.read_sql_query(q, conn)
                    df.to_excel(writer, sheet_name=Excelsheets[queries.index(q)], index=False)
                conn.close()
                writer.save()
                messagebox.showinfo('OIMIO Raw Data','OIMIO Raw Data Report Exported!')
                startfile(TempPath)
            else:
                messagebox.showerror('Folder Validation','Folder Path Not Selected!')
        
        def Validate_Clear():
            LabelList = [Label1, Label2, Label2_1, Label2_2, Label3, Label4, Label5, Label6]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='white')

        def Validate_Submit():
            Validate_Clear()

            AllLabelList = [Label2_1, Label2_2, Label3, Label4, Label5]
            AllEntryList = [Entry2_1, Entry2_2, Entry3, Entry4, Entry5]
            AllEntryValues = [Entry2_1_Values, Entry2_2_Values, Entry3_Values, Entry4_Values, Entry5_Values]
            AllEntryMessage = [Entry2_1_msg, Entry2_2_msg, Entry3_msg, Entry4_msg, Entry5_msg]

            DateLabelList = [Label2]
            DateEntryList = [Entry2]

            Submit = True

            if Entry1.get() == '' or Entry2.get() == '' or Entry2_1.get() == '' or Entry2_2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='orange')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        return False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='orange')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        return False
                        break
            
            item = RBtree2.selection()
            for i in item:
                TreeReviewID = RBtree2.item(i, "values")[0]
                TreeStage = RBtree2.item(i, "values")[4]
                
            if TreeStage == 'Analysis':
                AccessLevel = 'Analyst'

                PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainOIMIO as A 
                                            INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B WHERE Stage = 'Peer Reviewer' GROUP BY B.ReviewID) as G
                                            ON A.ReviewID = G.ReviewID
                                            WHERE Stage = 'Peer Reviewer' AND A.ReviewID = """ + TreeReviewID + ";")
                
                if len(PreLevelCheck) > 0:
                    PreLevelUser = PreLevelCheck[0][0]
                else:
                    PreLevelUser = ''

            elif TreeStage == 'Peer Reviewer':
                AccessLevel = 'PR'

                PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainOIMIO as A 
                                            INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B WHERE Stage = 'Analysis' GROUP BY B.ReviewID) as G
                                            ON A.ReviewID = G.ReviewID
                                            WHERE Stage = 'Analysis' AND A.ReviewID = """ + TreeReviewID + ";")
                
                if len(PreLevelCheck) > 0:
                    PreLevelUser = PreLevelCheck[0][0]
                else:
                    PreLevelUser = ''                        

            CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainOIMIO as A 
                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                                        ON A.ReviewID = G.ReviewID
                                        WHERE A.ReviewID = """ + TreeReviewID + ";")

            if len(CrossCheck) == 0:
                messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                AdminOIMIO(RBCan)
                return False
            else:
                if CrossCheck[0][0] == RBtree2.item(i, "values")[0] and CrossCheck[0][2] == RBtree2.item(i, "values")[2] and CrossCheck[0][4] == RBtree2.item(i, "values")[4] and CrossCheck[0][3] == RBtree2.item(i, "values")[5]:

                        if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                            NewUser = SelectQueryfun(SupportDBPath,"SELECT UserID FROM tblUserAccess WHERE EmpName = '" + Entry5.get() + "';")
                            if PreLevelUser != NewUser[0]:
                                Submit = True

                            else:
                                Submit = False
                                messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")
                                return False

                        else:
                            Submit = False
                            messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                            return False
                
                else:
                    Submit = False
                    messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                    return False

            if Submit:
                SubmitAdminOIMIO()

        def SubmitAdminOIMIO():

            global NPTotalHours
            NPTotalHours = datetime.min
            
            Stage = Entry4.get()

            if Stage == "Rejected":
                Stage = "Analysis"

            Record = ('Admin', 0, Entry1.get(), Entry5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry3.get(), Entry3.get(), Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), Entry6.get(1.0, END).strip(), Stage)
            UpdateQueryfun(ProDBPath,"INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, AdminComments, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

            Record = (Entry5.get(), Entry3.get(), Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
            query = ("""UPDATE tblIssuesMainOIMIO SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
            UpdateQueryfun(ProDBPath, query, Record)

            NPTotalHours = datetime.min
            messagebox.showinfo('Completed','Data Updated Successfully!')
            
            Cancel()
            AdminOIMIO(RBCan)
                
        def Cancel():
            Validate_Clear()
            Entry1.config(state='normal')
            Entry1.delete(0, END)
            Entry1.config(state='disabled')

            Entry2.config(state='normal')
            Entry2_1.config(state='normal')
            Entry2_2.config(state='normal')
            Entry2.delete(0, END)
            Entry2_1.delete(0, END)
            Entry2_2.delete(0, END)
            Entry2.config(state='disabled')
            Entry2_1.config(state='disabled')
            Entry2_2.config(state='disabled')

            Entry3.delete(0, END)
            Entry4.delete(0, END)
            Entry5.delete(0, END)
            Entry6.delete(1.0, END)

        Label1 = Label(AdminCan, text="Review ID*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label2_0 = Label(AdminCan, text="dd/mm/yyyy",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
        Label2 = Label(AdminCan, text="Due Date*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label2_1 = Label(AdminCan, text="HH",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
        Label2_1_1 = Label(AdminCan, text=":",width=2,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"bold"))
        Label2_2 = Label(AdminCan, text="MM",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
     
        Label4 = Label(AdminCan, text="Stage*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label3 = Label(AdminCan, text="Status*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label5 = Label(AdminCan, text="Assigned To*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label6 = Label(AdminCan, text="Comments",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        
        Ad_Var_Entry1 = StringVar()
        Ad_Var_Entry2 = StringVar()
        Ad_Var_Entry2_1 = StringVar()
        Ad_Var_Entry2_2 = StringVar()
        
        Entry1 = Entry(AdminCan, textvariable=Ad_Var_Entry1, bg="white",font=("Calibri",10))
        Entry1.config(state='disabled')
                
        Entry2 = DateEntry(AdminCan,textvariable=Ad_Var_Entry2,width=11,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
        Entry2.delete(0, END)
        
        Entry2_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
        Entry2_1 = Entry(AdminCan,validate='key',textvariable=Ad_Var_Entry2_1,bg="white",font=("Calibri",10),width=2)
        Entry2_1['validatecommand'] = (Entry2_1.register(AcceptNum),'%P','%d')
        Entry2_1_msg = 'This typed hour is not correct, please check!'
        
        Entry2_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
        Entry2_2 = Entry(AdminCan,validate='key',textvariable=Ad_Var_Entry2_2,bg="white",font=("Calibri",10),width=2)
        Entry2_2['validatecommand'] = (Entry2_2.register(AcceptNum),'%P','%d')
        Entry2_2_msg = 'This typed minute is not correct, please check!'
        
        Entry2.config(state='disabled')
        Entry2_1.config(state='disabled')
        Entry2_2.config(state='disabled')
                
        def CheckStage(event):
            Entry3.config(state='normal')
            Entry3.delete(0, END)
            Entry5.config(state='normal')
            Entry5.delete(0, END)
            if Entry4.get() == "Rejected":
                Entry3.insert(0, 'Assigned')
                Entry3.config(state='disabled')

                Entry5_Values= SelectQueryfun(SupportDBPath, "SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Entry4.get() == "Analysis":
                Entry5_Values= SelectQueryfun(SupportDBPath, "SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Entry4.get() == "Peer Reviewer":
                Entry5_Values= SelectQueryfun(SupportDBPath, "SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and PeerReviewer = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Entry4.get() == 'Job Completed' or Entry4.get() == 'Cancelled':
                Entry3.insert(0, 'NA')
                Entry3.config(state='disabled')
                
                Entry5.insert(0, 'NA')
                Entry5.config(state='disabled')

            else:
                Entry3.config(state='normal')
                Entry5.config(state='normal')

        Entry4_Values= ['Analysis', 'Peer Reviewer', 'Job Completed', 'Cancelled', 'Rejected']
        Entry4 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry4_Values)
        Entry4_msg = 'This typed Stage is not available in the list, please check!'
        Entry4.bind("<FocusOut>", lambda event: CheckStage(event))
        Entry4.bind("<<ComboboxSelected>>", lambda event: CheckStage(event))

        Entry3_Values = ['Assigned', 'In Process', 'On Hold']
        Entry3 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry3_Values)
        Entry3_msg = 'This typed Status is not available in the list, please check!'
        
        Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' ORDER BY EmpName ASC;")
        Entry5 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry5_Values)
        Entry5_msg = 'This typed Name is not available in the list, please check!'
        
        Entry6 = Text(AdminCan,bg="white",font=("Calibri",10),width=30,height=3)
        Entry6.bind('<Tab>', lambda event: focusNext(Entry6))
        Entry6.bind('<Shift-Tab>', lambda event: focusPrev(Entry6))

        Label1.place(x=780, y=70)
        Label2_0.place(x=900, y=100)
        Label2.place(x=780, y=120)
        Label2_1.place(x=1002, y=100)
        Label2_2.place(x=1032, y=100)

        Label4.place(x=780, y=170)
        Label3.place(x=780, y=220)
        Label5.place(x=780, y=270)
        Label6.place(x=780, y=320)

        Entry1.place(x=920, y=70)
        Entry2.place(x=920, y=120)
        Entry2_1.place(x=1010, y=120)
        Label2_1_1.place(x=1025, y=120)
        Entry2_2.place(x=1040, y=120)
        
        Entry4.place(x=920, y=170, width=145)
        Entry3.place(x=920, y=220, width=145)
        Entry5.place(x=920, y=270, width=145)
        Entry6.place(x=920, y=320)
               
        Button2 = Button(AdminCan, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button2.place(x=750, y= 400)
        Button3 = Button(AdminCan, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button3.place(x=850, y= 400)
        Button1 = Button(AdminCan, text="Refresh", width=12, height=1, command=lambda:AdminRB(RBCan),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button1.place(x=950, y=400)

        Button4 = Button(AdminCan, text="Raw Report", width=12, height=1, command=lambda:AdminRawReports(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button4.place(x=1050, y=400)
        
        arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "LAST ENTRY TIME", "STAGE", "ASSIGNED TO"]
        RBtree2 = MyTreeview(AdminCan, columns=arrlbHeader, show="headings", height=24)

        RBtree2.column("#1", anchor=tkinter.CENTER, width=80)
        RBtree2.heading("#1", text="REVIEW ID")
        RBtree2.column("#2", anchor=tkinter.CENTER, width=100)
        RBtree2.heading("#2", text="DUE DATE")
        RBtree2.column("#3", anchor=tkinter.CENTER, width=90)
        RBtree2.heading("#3", text="STATUS")
        RBtree2.column("#4", anchor=tkinter.CENTER, width=140)
        RBtree2.heading("#4", text="LAST ENTRY TIME")
        RBtree2.column("#5", anchor=tkinter.CENTER, width=120)
        RBtree2.heading("#5", text="STAGE")
        RBtree2.column("#6", anchor=tkinter.CENTER, width=140)
        RBtree2.heading("#6", text="ASSIGNED TO")

        arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "STAGE", "ASSIGNED TO"]
        arrSortType = ["num", "date", "name", "name", "name"]
        for iCount in range(len(arrlbHeader)):
            strHdr = arrlbHeader[iCount]
            RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
            RBtree2.column(arrlbHeader[iCount], stretch=True)

        RBtree2.place(x=10, y=40)

        Admin_vsb = ttk.Scrollbar(AdminCan, orient="vertical", command=RBtree2.yview)
        Admin_vsb.place(x=680, y=40, height=500)
        RBtree2.configure(yscrollcommand=Admin_vsb.set)
                
        def OnClick(event, treename, Tname):
            global StartTime
            StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
            Entry3.config(state='normal')
            item = treename.selection()
            for i in item:
                ReviewID = treename.item(i, "values")[0]

                DueDateTime = treename.item(i, "values")[1].split(' ')
                HourMin = DueDateTime[1].split(':')
                DueDate = DueDateTime[0]

                Status = treename.item(i, "values")[2]
                Stage = treename.item(i, "values")[4]
                Assignee = treename.item(i, "values")[5]

            Cancel()

            if Stage == 'Job Completed':
                messagebox.showerror('Validation Check',"This Review ID is in Completed Stage, hence unable to change status!")
                return False
            else:
                Entry1.config(state='normal')
                Entry1.delete(0, END)
                Entry1.insert(0, ReviewID)
                Entry1.config(state='disabled')

                Entry2.config(state='normal')
                Entry2_1.config(state='normal')
                Entry2_2.config(state='normal')

                Entry2.delete(0, END)
                Entry2.insert(0, DueDate)
                Entry2_1.delete(0, END)
                Entry2_1.insert(0, HourMin[0])
                Entry2_2.delete(0, END)
                Entry2_2.insert(0, HourMin[1])

                Entry2.config(state='disabled')
                Entry2_1.config(state='disabled')
                Entry2_2.config(state='disabled')

                Entry3.config(state='normal')
                Entry3.delete(0, END)
                Entry3.insert(0, Status)

                Entry4.delete(0, END)
                Entry4.insert(0, Stage)

                Entry5.config(state='normal')
                Entry5.delete(0, END)
                Entry5.insert(0, Assignee)

                Entry6.delete(1.0, END)

            if Stage == 'Analysis':
                Entry4.config(completevalues=['Analysis', 'Cancelled', 'Rejected'])

                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Stage == 'Peer Reviewer':
                Entry4.config(completevalues=['Peer Reviewer', 'Cancelled', 'Rejected'])

                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and PeerReviewer = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Stage == 'Rejected':
                Entry4.config(completevalues=['Analysis', 'Cancelled', 'Rejected'])

                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)
                
                Entry3.config(state='disabled')

            elif Entry4.get() == 'Job Completed' or Entry4.get() == 'Cancelled':
                Entry4.config(completevalues=['Analysis', 'Cancelled', 'Rejected'])

                Entry3.config(state='disabled')
                Entry5.config(state='disabled')

            else:
                Entry3.config(state='normal')
                Entry5.config(state='normal')

        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, G.LastEntryTime, Stage, Assignee FROM tblIssuesMainOIMIO as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE Stage != 'Job Completed';""",RBtree2)
        
        RBtree2.bind("<<TreeviewSelect>>", lambda event: OnClick(event, treename=RBtree2, Tname=2))

########################################################## This is Archive for RB ########################################################

def ArchiveOIMIOCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        ArchiveOIMIO(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            ArchiveOIMIO(RBCan, Timer1)

def ArchiveOIMIO(RBCan, Timer1):
    global WorkQueueOIMIO_B, CreateOIMIO_B, AdminOIMIO_B, ArchiveOIMIO_B, UserStatsOIMIO_B

    WorkQueueOIMIO_B.config(bg='sky blue')
    CreateOIMIO_B.config(bg='sky blue')
    AdminOIMIO_B.config(bg='sky blue')
    ArchiveOIMIO_B.config(bg='#E7E6E6')
    UserStatsOIMIO_B.config(bg='sky blue')

    global ActiveDashboard
    ActiveDashboard = False

    ArchiveCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ArchiveCan.place(x=5, y=40)
    
    ProjectLabel = Label(ArchiveCan, text="OIMIO",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)

    global Searched
    Searched = False

    def Search_Submit():
        global Searched
        Reopen_Hide()
        if SearchEntry1.get() != '':
            ReviewIDExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblIssuesMainOIMIO WHERE ReviewID = " + SearchEntry1.get() + ");")
            if ReviewIDExists[0][0] == 1:
                Searched = True
                RBtree2.delete(*RBtree2.get_children())
                ArchiveData(ReviewID=SearchEntry1.get(), Country=None)
            else:
                messagebox.showerror('No Review ID','This typed Review ID is not available!')
                
        elif SearchEntry2.get() != '':
            CountryExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblIssuesMainOIMIO WHERE Country = '" + SearchEntry2.get().capitalize() + "');")
            if CountryExists[0][0] == 1:
                Searched = True
                RBtree2.delete(*RBtree2.get_children())
                ArchiveData(ReviewID=None, Country=SearchEntry2.get().capitalize())
            else:
                messagebox.showerror('No Country','This typed Country is not available!')
            
        else:
            messagebox.showerror('No Option Selected','Please Select Review ID or Country to Search!')

    def Search_Cancel():
        global Searched
        SearchEntry1.delete(0,END)
        SearchEntry2.set('')
        if Searched:
            Searched = False
            RBtree2.delete(*RBtree2.get_children())
            ArchiveData(ReviewID=None, Country=None)
        else:
            messagebox.showwarning('Not Filtered','No data filtered to clear!')

    def SearchTyped(event, SearchEntry):
        if SearchEntry == SearchEntry1:
            SearchEntry2.set('')

        if SearchEntry == SearchEntry2:
            SearchEntry1.delete(0,END)

    SearchLabel1 = Label(ArchiveCan, text="Review ID",width=10,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
    SearchEntry1 = Entry(ArchiveCan, validate='key', bg="white",font=("Calibri",12,"bold"), width=15)
    SearchEntry1['validatecommand'] = (SearchEntry1.register(AcceptNum),'%P','%d')

    SearchLabel2 = Label(ArchiveCan, text="Country",width=10,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
    SearchEntry2_Values= SelectQueryfun(SupportDBPath,"Select CountryName from tblCountries;")
    SearchEntry2 = AutocompleteCombobox(ArchiveCan, width=25, font=("Calibri",12,"bold"), completevalues=SearchEntry2_Values)
    
    SearchEntry1.bind("<1>", lambda event: SearchTyped(event, SearchEntry=SearchEntry1))
    SearchEntry2.bind("<1>", lambda event: SearchTyped(event, SearchEntry=SearchEntry2))

    Image1= PhotoImage(file=r'')
    Image2= PhotoImage(file=r'')

    SearchButton1 = Button(ArchiveCan, image=Image1, fg='black', bg="#006E8E", width=25, height=25, command=lambda:Search_Submit(), borderwidth=0, cursor='hand2', relief='flat')
    SearchButton1.image = Image1

    SearchButton2 = Button(ArchiveCan, image=Image2, fg='black', bg="#006E8E", width=25, height=25, command=lambda:Search_Cancel(), borderwidth=0, cursor='hand2', relief='flat')
    SearchButton2.image = Image2

    SearchLabel1.place(x=360, y=10)
    SearchEntry1.place(x=450, y=10)

    SearchLabel2.place(x=560, y=10)
    SearchEntry2.place(x=650, y=10)

    SearchButton1.place(x=882, y=8)
    SearchButton2.place(x=927, y=8)

    arrlbHeader = ["REVIEW ID", "COUNTRY", "RECEIVED DATE", "DUE DATE", "STATUS", "STAGE", "LAST ENTRY TIME", "ANALYST", "PEER REVIEWER"]
    RBtree2 = MyTreeview(ArchiveCan, columns=arrlbHeader, show="headings", height=16)

    RBtree2.column("#1", anchor=tkinter.CENTER, width=100)
    RBtree2.heading("#1", text="REVIEW ID")
    RBtree2.column("#2", anchor=tkinter.CENTER, width=120)
    RBtree2.heading("#2", text="COUNTRY")
    RBtree2.column("#3", anchor=tkinter.CENTER, width=108)
    RBtree2.heading("#3", text="RECEIVED DATE")
    RBtree2.column("#4", anchor=tkinter.CENTER, width=107)
    RBtree2.heading("#4", text="DUE DATE")
    RBtree2.column("#5", anchor=tkinter.CENTER, width=110)
    RBtree2.heading("#5", text="STATUS")
    RBtree2.column("#6", anchor=tkinter.CENTER, width=100)
    RBtree2.heading("#6", text="STAGE")
    RBtree2.column("#7", anchor=tkinter.CENTER, width=115)
    RBtree2.heading("#7", text="LAST ENTRY TIME")
    RBtree2.column("#8", anchor=tkinter.CENTER, width=130)
    RBtree2.heading("#8", text="ANALYST")
    RBtree2.column("#9", anchor=tkinter.CENTER, width=130)
    RBtree2.heading("#9", text="PEER REVIEWER")
    
    arrlbHeader = ["REVIEW ID", "COUNTRY", "RECEIVED DATE", "DUE DATE", "STATUS", "STAGE", "LAST ENTRY TIME", "ANALYST", "PEER REVIEWER"]
    arrSortType = ["num", "name", "date", "date", "name", "name", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
        RBtree2.column(arrlbHeader[iCount], stretch=True)

    RBtree2.place(x=50, y=45)

    Archive_vsb = ttk.Scrollbar(ArchiveCan, orient="vertical", command=RBtree2.yview)
    Archive_vsb.place(x=1070, y=45, height=340)
    RBtree2.configure(yscrollcommand=Archive_vsb.set)

    style = ttk.Style()
    style.theme_use('default')
    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
    style.map('Treeview', background=[('selected', 'green')])

    def ArchiveData(ReviewID=None, Country=None):
        if ReviewID != None and Country == None:
            query = """SELECT A.ReviewID, A.Country, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainOIMIO as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE A.ReviewID = '""" + ReviewID + """';"""
        elif ReviewID == None and Country != None:
            query = """SELECT A.ReviewID, A.Country, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainOIMIO as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE A.Country = '""" + Country + """';"""
        else:
            query = """SELECT A.ReviewID, A.Country, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainOIMIO as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID;"""
            
        conn = sqlite3.connect(ProDBPath)
        df_Arc1 = pd.read_sql_query(query, conn)
        conn.close()
        
        query = """SELECT StatusID, TableName, ReviewID, EntryBy FROM tblIssuesStatusOIMIO 
                    WHERE TableName = 'Analysis' OR TableName = 'PR';"""
        conn = sqlite3.connect(ProDBPath)
        df_Arc2 = pd.read_sql_query(query, conn)
        df_Arc2['EntryBy'] = df_Arc2['EntryBy'].str.lower()
        conn.close()
        
        df_group=df_Arc2.groupby(['ReviewID','TableName'],as_index = False).max('StatusID')
        Merge_df_1 = df_group.merge(df_Arc2[['StatusID', 'EntryBy']], left_on=['StatusID'], right_on=['StatusID'], how='left')
        
        query = """SELECT EmpName, UserID FROM tblUserAccess;"""
        conn = sqlite3.connect(SupportDBPath)
        df_Arc3 = pd.read_sql_query(query, conn)
        conn.close()
        
        Merge_df_2 = Merge_df_1.merge(df_Arc3, left_on=['EntryBy'], right_on=['UserID'], how='left')
        
        dfpivot=pd.pivot_table(Merge_df_2, index='ReviewID', columns='TableName', values='EmpName', aggfunc='max').fillna('')
        dfpivot = dfpivot.reset_index(drop=False)
        dfpivot['ReviewID'] = dfpivot['ReviewID'].astype(str)
        
        Merge_df_Final = df_Arc1.merge(dfpivot, left_on=['ReviewID'], right_on=['ReviewID'], how='left')
        Arc_List = Merge_df_Final.values.tolist()

        for row in Arc_List:
            RBtree2.insert("", END, values=row)
    
    RBtree2.bind("<<TreeviewSelect>>", lambda event: OnChange(event, treename=RBtree2))
    RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2))
    
    ArchiveData()

    def OnClick(event, treename):
        item = treename.selection()
        for i in item:
            ReviewID = treename.item(i, "values")[0]

        SelectedIssueOIMIO(RBCan, ReviewID, 'Archive', 'Analysis', Timer1)

    def Reopen_Hide():
        Label1.place_forget()
        Label2.place_forget()
        Label4.place_forget()
        Label5_0.place_forget()
        Label5.place_forget()
        Label6.place_forget()
        Label7.place_forget()
        Label8_0.place_forget()
        Label8.place_forget()
        Label8_1.place_forget()
        Label8_2.place_forget()
        Label9.place_forget()
        Label10.place_forget()
        Label11.place_forget()
        
        Entry1.place_forget()
        Entry2.place_forget()
        Entry4.place_forget()
        Entry5.place_forget()
        Entry6.place_forget()
        Entry7.place_forget()
        Entry8.place_forget()
        Entry8_1.place_forget()
        Label8_1_1.place_forget()
        Entry8_2.place_forget()
        Entry9.place_forget()
        Entry10.place_forget()
        Entry11.place_forget()

        Comments_vsb.place_forget()

        Button1.place_forget()
        Button2.place_forget()

    def OnChange(event, treename):
        Cancel()
        item = treename.selection()
        for i in item:
            ReviewID = treename.item(i, "values")[0]
            Stage = treename.item(i, "values")[5]

            if Stage == 'Job Completed':
                Label1.place(x=10, y=410)
                Label2.place(x=280, y=410)
                Label4.place(x=590, y=410)
                Label5_0.place(x=1040, y=390)
                Label5.place(x=960, y=410)
                
                Label6.place(x=10, y=460)
                Label7.place(x=300, y=460)
                Label8.place(x=610, y=460)
                Label8_0.place(x=720, y=440)
                Label8_1.place(x=832, y=440)
                Label8_2.place(x=862, y=440)
                Label9.place(x=1000, y=460)
                
                Label10.place(x=10, y=510)
                Label11.place(x=310, y=510)
                
                Entry1.place(x=90, y=410)
                Entry1.config(state='normal')
                Entry1.delete(0, END)
                Entry1.insert(0, ReviewID)
                Entry1.config(state='disabled')
                Entry2.place(x=400, y=410)
                Entry4.place(x=750, y=410)
                Entry5.place(x=1070, y=410)
                
                Entry6.place(x=90, y=460)
                Entry7.place(x=400, y=460)
                Entry8.place(x=750, y=460)
                Entry8_1.place(x=840, y=460)
                Label8_1_1.place(x=855, y=460)
                Entry8_2.place(x=870, y=460)
                Entry9.place(x=1070, y=460)
                
                Entry10.place(x=90, y=510)
                Entry11.place(x=400, y=500)

                Comments_vsb.place(x=613, y=500, height=47)

                Button1.place(x=750, y= 510)
                Button2.place(x=900, y= 510)

            else:
                Reopen_Hide()
                
    Label1 = Label(ArchiveCan, text="Review ID*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label2 = Label(ArchiveCan, text="Reopen Reason*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label4 = Label(ArchiveCan, text="Reopen Classification*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label5_0 = Label(ArchiveCan, text="dd/mm/yyyy",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label5 = Label(ArchiveCan, text="Reopen Date*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label6 = Label(ArchiveCan, text="QC Status*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label7 = Label(ArchiveCan, text="Reopen for*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')

    Label8_0 = Label(ArchiveCan, text="dd/mm/yyyy",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label8 = Label(ArchiveCan, text="Revised Due Date*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label8_1 = Label(ArchiveCan, text="HH",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label8_1_1 = Label(ArchiveCan, text=":",width=2,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"bold"))
    Label8_2 = Label(ArchiveCan, text="MM",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    
    Label9 = Label(ArchiveCan, text="Status*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label10 = Label(ArchiveCan, text="Assigned*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label11 = Label(ArchiveCan, text="Comments",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
            
    Entry1 = Entry(ArchiveCan, bg="white",font=("Calibri",10), width=19)
    Entry1.config(state='disabled')

    Entry2_Values = ['Client', 'Internal']
    Entry2 = AutocompleteCombobox(ArchiveCan, width=20, completevalues=Entry2_Values)
    Entry2_msg = 'This typed Reason is not available in the list, please check!'

    Entry4_Values = ['External Reason (No fault of EQ)', 'Formulation/Translation Error', 'Key Findings', 'KI Form incosistent with Analysis', 'Mistake only in final report', 'Typos', 'Not a Rejection', 
                        'FA Comments', 'Incorrect Analysis', 'Incorrect/Incomplete Document uploaded', 'Incorrect/Incomplete Screenings', 'Relationship Tree']
    Entry4 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry4_Values)
    Entry4_msg = 'This typed Classification is not available in the list, please check!'

    Entry5 = DateEntry(ArchiveCan,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry5.delete(0, END)
    Entry5.bind("<FocusOut>", lambda event: Date_Check(event, Entry5))

    Entry6_Values = ['Pass', 'Fail', 'Advisory']
    Entry6 = AutocompleteCombobox(ArchiveCan, width=20, completevalues=Entry6_Values)
    Entry6_msg = 'This typed Status is not available in the list, please check!'

    Entry7_Values = ['Analyst, Peer & Case Reviewer', 'Peer & Case Reviewer', 'Case Reviewer', 'External Reason', 'Analyst, Peer Reviewer']
    Entry7 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry7_Values)
    Entry7_msg = 'This typed Status is not available in the list, please check!'
            
    Entry8 = DateEntry(ArchiveCan,width=11,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry8.delete(0, END)
    Entry8.bind("<FocusOut>", lambda event: Date_Check(event, Entry8))

    Entry8_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry8_1 = Entry(ArchiveCan,validate='key',bg="white",font=("Calibri",10),width=2)
    Entry8_1['validatecommand'] = (Entry8_1.register(AcceptNum),'%P','%d')
    Entry8_1_msg = 'This typed hour is not correct, please check!'
    
    Entry8_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry8_2 = Entry(ArchiveCan,validate='key',bg="white",font=("Calibri",10),width=2)
    Entry8_2['validatecommand'] = (Entry8_2.register(AcceptNum),'%P','%d')
    Entry8_2_msg = 'This typed minute is not correct, please check!'
    
    Entry9_Values = ['Assigned', 'On Hold']
    Entry9 = AutocompleteCombobox(ArchiveCan, width=12, completevalues=Entry9_Values)
    Entry9_msg = 'This typed Status is not available in the list, please check!'
    
    Entry10_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
    Entry10 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry10_Values)
    Entry10_msg = 'This typed Name is not available in the list, please check!'
    
    Entry11 = Text(ArchiveCan,bg="white",font=("Calibri",10),width=30,height=3)
    Entry11.bind('<Tab>', lambda event: focusNext(Entry11))
    Entry11.bind('<Shift-Tab>', lambda event: focusPrev(Entry11))

    Comments_vsb = ttk.Scrollbar(ArchiveCan, orient="vertical", command=Entry11.yview)
    Entry11.configure(yscrollcommand=Comments_vsb.set)

    def Validate_Clear():
        LabelList = [Label1, Label2, Label4, Label5, Label6, Label7, Label8, Label8_1, Label8_2, Label9, Label10, Label11]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='white')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label2, Label4, Label6, Label7, Label8_1, Label8_2, Label9, Label10]
        AllEntryList = [Entry2, Entry4, Entry6, Entry7, Entry8_1, Entry8_2, Entry9, Entry10]
        AllEntryValues = [Entry2_Values, Entry4_Values, Entry6_Values, Entry7_Values, Entry8_1_Values, Entry8_2_Values, Entry9_Values, Entry10_Values]
        AllEntryMessage = [Entry2_msg, Entry4_msg, Entry6_msg, Entry7_msg, Entry8_1_msg, Entry8_2_msg, Entry9_msg, Entry10_msg]

        DateLabelList = [Label5, Label8]
        DateEntryList = [Entry5, Entry8]

        Submit = True

        if Entry1.get() == '' or Entry2.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or Entry8_1.get() == '' or Entry8_2.get() == '' or Entry9.get() == '' or Entry10.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='orange')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[i])
                    Submit = False
                    return False
                    break
        
        for i in range(0,len(DateEntryList)):
            if DateEntryList[i].get() != '':
                result = Date_Validation(DateEntryList[i])
                if result == 'Failed':
                    DateLabelList[i].config(foreground='orange')
                    DateEntryList[i].focus_set()
                    messagebox.showerror('Date Error','This typed date is not valid! Please check')
                    Submit = False
                    return False
                    break
        
        item = RBtree2.selection()
        for i in item:
            TreeReviewID = RBtree2.item(i, "values")[0]
            
        AccessLevel = 'Analyst'

        PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainOIMIO as A 
                                    INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B WHERE Stage = 'Peer Reviewer' GROUP BY B.ReviewID) as G
                                    ON A.ReviewID = G.ReviewID
                                    WHERE Stage = 'Peer Reviewer' AND A.ReviewID = """ + TreeReviewID + ";")
        if len(PreLevelCheck) > 0:
            PreLevelUser = PreLevelCheck[0][0]
        else:
            PreLevelUser = ''

        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DateReceived, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainOIMIO as A 
                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusOIMIO AS B GROUP BY B.ReviewID) as G
                                        ON A.ReviewID = G.ReviewID
                                        WHERE A.ReviewID = """ + TreeReviewID + ";")
        
        if len(CrossCheck) == 0:
            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
            ArchiveOIMIO(RBCan, Timer1)
            return False
        else:
            if CrossCheck[0][0] == RBtree2.item(i, "values")[0] and CrossCheck[0][1] == RBtree2.item(i, "values")[2] and CrossCheck[0][2] == RBtree2.item(i, "values")[3] and CrossCheck[0][3] == RBtree2.item(i, "values")[4] and CrossCheck[0][4] == RBtree2.item(i, "values")[5]:

                    if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                        NewUser = SelectQueryfun(SupportDBPath,"SELECT UserID FROM tblUserAccess WHERE EmpName = '" + Entry10.get() + "';")
                        if PreLevelUser != NewUser[0]:
                            Submit = True

                        else:
                            Submit = False
                            messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")
                            return False

                    else:
                        Submit = False
                        messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                        return False
            else:
                Submit = False
                messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                return False

        if Submit:
            SubmitArchiveOIMIO()

    def SubmitArchiveOIMIO():

        global NPTotalHours
        NPTotalHours = datetime.min

        RevisedDueDate = Entry8.get() + " " + Entry8_1.get() + ":" + Entry8_2.get()

        Record = (Entry1.get(),	Entry2.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), RevisedDueDate, Entry9.get(), Entry10.get(), Entry11.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesReopenOIMIO (ReviewID, ReopenReason, ReopenClassification, ReopenDate, QCStatus, Reopenfor, RevisedDueDate, Status, AssignedTo, Comments, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)

        Record = (Entry10.get(), Entry9.get(), 'Analysis', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
        query = ("""UPDATE tblIssuesMainOIMIO SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
        UpdateQueryfun(ProDBPath, query, Record)

        Record = ('Reopen', IssueID, Entry1.get(), Entry10.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry9.get(), Entry9.get(), 'Analysis', datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')
        query = ("""INSERT INTO tblIssuesStatusOIMIO (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        UpdateQueryfun(ProDBPath,query, Record)

        NPTotalHours = datetime.min
        messagebox.showinfo('Completed','Reopen Details Updated Successfully!')
        
        Cancel()
        ArchiveOIMIO(RBCan, Timer1)

    def Cancel():
        Validate_Clear()
        Entry1.config(state='normal')
        Entry1.delete(0, END)
        Entry1.config(state='disabled')
        
        Entry2.delete(0, END)
        Entry4.delete(0, END)
        Entry5.delete(0, END)
        Entry6.delete(0, END)
        Entry7.delete(0, END)
        Entry8.delete(0, END)
        Entry8_1.delete(0, END)
        Entry8_2.delete(0, END)
        Entry9.delete(0, END)
        Entry10.delete(0, END)
        Entry11.delete(1.0, END)

    Button1 = Button(ArchiveCan, text="Reopen", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(ArchiveCan, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')

########################################################## This is OIMIO Project for OIMIO ########################################################

def ProjectOIMIO(Home):
    Home.title("KYC Solutions-OIMIO")
    RBCan=Canvas(Home,bg="#006E8E", width=1190, height=590, highlightthickness=0)
    RBCan.place(x=5, y= 5)

    UNameLabel = Label(RBCan, text=Var_UserName,height=2,fg="white", bg="#006E8E",font=("Calibri",12,"bold"))
    UNameLabel.place(x=1000, y=0)

    Timer1=TimerRun()

    global WorkQueueOIMIO_B, CreateOIMIO_B, AdminOIMIO_B, ArchiveOIMIO_B, UserStatsOIMIO_B

    ProjectsOIMIO_B = Button(RBCan, text="Projects", width=12, height=1, command=lambda:AllProjectsCheck(Home),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    WorkQueueOIMIO_B = Button(RBCan, text="Work Queue", width=12, height=1, command=lambda:WorkQueueOIMIOCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    CreateOIMIO_B = Button(RBCan, text="Create", width=12, height=1, command=lambda:CreateIssueOIMIOCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    AdminOIMIO_B = Button(RBCan, text="Admin", width=12, height=1, command=lambda:AdminOIMIOCheck(RBCan),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    ArchiveOIMIO_B = Button(RBCan, text="Archive", width=12, height=1, command=lambda:ArchiveOIMIOCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    UserStatsOIMIO_B = Button(RBCan, text="User Stats", width=12, height=1, command=lambda:UserStatsCheck(RBCan, 'OIMIO'),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    NonProOIMIO_B = Button(RBCan, text="Non Production", width=15, height=1, command=lambda:NonProRB(Home, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        
    ProjectsOIMIO_B.place(x=50, y=10)
    WorkQueueOIMIO_B.place(x=150, y=10)
    CreateOIMIO_B.place(x=250, y=10)
    AdminOIMIO_B.place(x=350, y=10)
    ArchiveOIMIO_B.place(x=450, y=10)
    UserStatsOIMIO_B.place(x=550, y=10)
    NonProOIMIO_B.place(x=650, y=10)

    WorkQueueOIMIOCheck(RBCan, Timer1)
    
############################################################################## OIMIO END ###########################################################################################
############################################################################## OIMIO END ###########################################################################################
############################################################################## OIMIO END ###########################################################################################
############################################################################## OIMIO END ###########################################################################################
############################################################################## OIMIO END ###########################################################################################

############################################################################## Rabobank Start ###########################################################################################
############################################################################## Rabobank Start ###########################################################################################
############################################################################## Rabobank Start ###########################################################################################
############################################################################## Rabobank Start ###########################################################################################
############################################################################## Rabobank Start ###########################################################################################


########################################################## This is Create Issue Page for Rabo ########################################################

global CreateAnother, InvoiceVar2, InvoiceVar2_1, InvoiceVar3, InvoiceVar4, InvoiceVar5, InvoiceVar6
CreateAnother = 'No'
InvoiceVar2 = ''
InvoiceVar2_1 = ''
InvoiceVar3 = ''
InvoiceVar4 = ''
InvoiceVar5 = ''
InvoiceVar6 = ''

def CreateIssueRaboCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        CreateIssueRabo(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            CreateIssueRabo(RBCan, Timer1)

def CreateIssueRabo(RBCan, Timer1):
    global CreateAnother, InvoiceVar2, InvoiceVar2_1, InvoiceVar3, InvoiceVar4, InvoiceVar5, InvoiceVar6
    global WorkQueueRabo_B, CreateRabo_B, AdminRabo_B, ArchiveRabo_B, UserStatsRabo_B

    WorkQueueRabo_B.config(bg='sky blue')
    CreateRabo_B.config(bg='#E7E6E6')
    AdminRabo_B.config(bg='sky blue')
    ArchiveRabo_B.config(bg='sky blue')
    UserStatsRabo_B.config(bg='sky blue')

    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False

    global NPTotalHours
    NPTotalHours = datetime.min

    ProjectsCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ProjectsCan.place(x=5, y=40)
    
    ProjectLabel = Label(ProjectsCan, text="Rabo Bank",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)
    
    CreateLabel = Label(ProjectsCan, text="Create Issue",width=18,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    CreateLabel.place(x=550, y=5)

    Can1=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
    Can1.place(x=10, y=40)
    
    RBGeneral_V_Entry1 = StringVar()
    RBGeneral_V_Entry3 = StringVar()
    RBGeneral_V_Entry4 = StringVar()
    RBGeneral_V_Entry8_1 = StringVar()
    RBGeneral_V_Entry8_2 = StringVar()
    RBGeneral_V_Entry10 = StringVar()
    RBGeneral_V_Entry10_1 = StringVar()
    RBGeneral_V_Entry10_2 = StringVar()
    
    Timer1.start_clock(Can1)
    StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

    def Validate_Clear():
        LabelList = [Label2, Label3, Label4, Label5, Label6, Label8, Label8_1, Label8_2, Label10, Label10_1, Label10_2, Label11, Label12, InvoiceLabel2, InvoiceLabel3, InvoiceLabel4, InvoiceLabel5, InvoiceLabel6, LabelFilePath]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_SubmitIssueRabo():
        Validate_Clear()
        
        AllLabelList = [Label2, Label5, Label6, Label8_1, Label8_2, Label10_1, Label10_2, Label11, Label12, InvoiceLabel2]
        AllEntryList = [Entry2, Entry5, Entry6, Entry8_1, Entry8_2, Entry10_1, Entry10_2, Entry11, Entry12, InvoiceEntry2]
        AllEntryValues = [Entry2_Values, Entry5_Values, Entry6_Values, Entry8_1_Values, Entry8_2_Values, Entry10_1_Values, Entry10_2_Values, Entry11_Values, Entry12_Values, InvoiceEntry2_Values]
        AllEntryMessage = [Entry2_msg, Entry5_msg, Entry6_msg, Entry8_1_msg, Entry8_2_msg, Entry10_1_msg, Entry10_2_msg, Entry11_msg, Entry12_msg, InvoiceEntry2_msg]

        DateLabelList = [Label8, Label10]
        DateEntryList = [Entry8, Entry10]
        
        if (Entry1.get() == '' or Entry2.get() == '' or int(Entry3.get()) == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry8.get() == '' or Entry8_1.get() == '' or Entry8_2.get() == '' 
            or Entry10.get() == '' or Entry10_1.get() == '' or Entry10_2.get() == '' or Entry12.get() == '' or InvoiceEntry2.get() == '' or InvoiceEntry2_1.get() == '' or InvoiceEntry3.get() == '' or InvoiceEntry4.get() == '' or InvoiceEntry5.get() == '' or InvoiceEntry6.get() == ''):
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        elif Entry12.get() == "Yes in mail" and EntryFilePath.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        elif Entry12.get() == "Yes in mail" and EntryFilePath.get()[:2] != r'\\':
            LabelFilePath.config(foreground='red')
            EntryFilePath.focus_set()
            messagebox.showerror('Validation Check','File Path should be a valid network path, please check the path!')
            return False

        elif Entry12.get() == "Yes in mail" and not os.path.isdir(EntryFilePath.get()):
            LabelFilePath.config(foreground='red')
            EntryFilePath.focus_set()
            messagebox.showerror('Validation Check','File Path is not valid path, please check the path!')
            return False

        else:
            Submit = True
            query = "SELECT EXISTS(SELECT 1 FROM tblIssuesGenRabo WHERE ReviewID = (?));"
            record = [int(Entry3.get())]
            ReviewIDResult = ReviewID_Check(ProDBPath,query,record)
            
            if ReviewIDResult:
                Label3.config(foreground='red')
                messagebox.showerror('Duplicate Review ID','This Review ID '+ int(Entry3.get()) + ' is already available! please check')
                Entry3.focus_set()
                Submit = False
                return False

            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                SubmitIssueRabo()

    def SubmitIssueRabo():
        global NPTotalHours
        global CreateAnother, InvoiceVar2, InvoiceVar2_1, InvoiceVar3, InvoiceVar4, InvoiceVar5, InvoiceVar6
        
        if Entry11.get() == '':
            Status = 'Unassigned'
        else:
            Status = 'Assigned'
        
        EntryStatus = 'Created'
        Stage = 'Analysis'

        if Entry12.get() == 'Yes in mail':
            FilePath = EntryFilePath.get()
        else:
            FilePath = ''

        DateReceived = Entry8.get() + " " + Entry8_1.get() + ":" + Entry8_2.get()
        DueDate = Entry10.get() + " " + Entry10_1.get() + ":" + Entry10_2.get()

        Record = (Entry1.get(),	Entry2.get(), int(Entry3.get()), Entry4.get(), Entry5.get(), Entry6.get(), DateReceived, DueDate, Entry12.get(), InvoiceEntry2.get(), InvoiceEntry2_1.get(), InvoiceEntry3.get(), InvoiceEntry4.get(), InvoiceEntry5.get(), InvoiceEntry6.get().strip(), InvoiceEntry7.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), FilePath)
        query = ("""INSERT INTO tblIssuesGenRabo (ProjectName, IssueType, ReviewID, EntityName, Country, Priority, DateReceived, DueDate, Documents, BankNr, BankNrID, CostCentre, Department, ClientContact, BillingTime, Comments, EntryBy, EntryTime, FilePath) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)
        
        Record = (IssueID, Entry1.get(), Entry2.get(), int(Entry3.get()), Entry4.get(), Entry5.get(), Entry6.get(), DateReceived, DueDate, Entry12.get(), InvoiceEntry2.get(), InvoiceEntry2_1.get(), InvoiceEntry3.get(), InvoiceEntry4.get(), InvoiceEntry5.get(), InvoiceEntry6.get().strip(), InvoiceEntry7.get(1.0, END).strip(), Entry11.get(), Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), FilePath)
        query = ("""INSERT INTO tblIssuesMainRabo (IssueID, ProjectName, IssueType, ReviewID, EntityName, Country, Priority, DateReceived, DueDate, Documents, BankNr, BankNrID, CostCentre, Department, ClientContact, BillingTime, Comments, CurAssignee, CurStatus, CurStage, UpdatedBy, UpdatedTime, FilePath) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)

        Record = ('Create', IssueID, int(Entry3.get()), Entry11.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')
        query = ("""INSERT INTO tblIssuesStatusRabo (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        UpdateQueryfun(ProDBPath, query, Record)
        NPTotalHours = datetime.min
        
        global ActiveJobPage
        ActiveJobPage = False
        Timer1.stop_clock()
        messagebox.showinfo('Completed','Issue Created Successfully!')

        if CheckboxVar.get() == 1:
            CreateAnother = 'Yes'
            InvoiceVar2 = InvoiceEntry2.get()
            InvoiceVar2_1 = InvoiceEntry2_1.get()
            InvoiceVar3 = InvoiceEntry3.get()
            InvoiceVar4 = InvoiceEntry4.get()
            InvoiceVar5 = InvoiceEntry5.get()
            InvoiceVar6 = InvoiceEntry6.get()

            CreateIssueRabo(RBCan, Timer1)

        else:
            WorkQueueRaboCheck(RBCan, Timer1)
            
    def ClearIssueRabo():
        Validate_Clear()
        Entry2.set('')
        Entry3.delete(0, END)
        Entry4.delete(0, END)
        Entry5.set('')
        Entry6.set('')
        Entry6.set('Medium')
        Entry8.delete(0, END)
        Entry8.set_date(datetime.now().strftime('%d/%m/%Y'))
        LabelSLA.config(text='SLA: ')
        Entry8_1.delete(0, END)
        Entry8_2.delete(0, END)
        Entry10.delete(0, END)
        Entry10_1.delete(0, END)
        Entry10_2.delete(0, END)
        Entry11.set('')
        Entry12.set('')
        EntryFilePath.delete(0, END)
        InvoiceEntry2.set('')
        InvoiceEntry2_1.config(state = "normal")
        InvoiceEntry2_1.delete(0, END)
        InvoiceEntry2_1.config(state = "disabled")
        InvoiceEntry3.delete(0, END)
        InvoiceEntry4.delete(0, END)
        InvoiceEntry5.delete(0, END)
        InvoiceEntry6.delete(0, END)
        InvoiceEntry7.delete(1.0, END)

    def GetBillingTime(event):
        if Entry2.get() != '' and Entry5.get() != '':
            IssueTypeList = ['Extract', 'Extract + Statutes', 'Extract + Shareholder', 'Extract + Statutes + Shareholder', 'Background check', 'UBO', 'Inbound']
            CountryList = ['Belgium', 'France', 'Germany', 'Luxembourg', 'Poland', 'The Netherlands', 'United Kingdom', 'United States', 'Italy']

            if Entry2.get() in IssueTypeList:
                query = "Select BillingTime from tblBillingType1 WHERE IssueType = '" + Entry2.get() + "';"
            else:
                if Entry5.get() in CountryList:
                    query = "Select BillingTime from tblBillingType2 WHERE IssueType = '" + Entry2.get() + "' AND Country = '" + Entry5.get() + "';"
                else:
                    query = "Select BillingTime from tblBillingType2 WHERE IssueType = '" + Entry2.get() + "' AND Country = 'Other';"

            InvoiceEntry6.delete(0, END)
            InvoiceEntry6.insert(0, SelectQueryfun(SupportDBPath, query))

        if Entry2.get() != '':
            query = "Select DeadLine from tblIssueTypes WHERE IssueTypeName = '" + Entry2.get() + "';"
            WorkingDay = SelectQueryfun(SupportDBPath, query)[0]
            if WorkingDay == 1:
                LabelSLA.config(text='SLA: ' + str(WorkingDay) + ' Workingday')
            elif WorkingDay >= 1:
                LabelSLA.config(text='SLA: ' + str(WorkingDay) + ' Workingdays')
            else:
                LabelSLA.config(text='SLA: Not Available')
            
    Label1 = Label(Can1, text="Project*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can1, text="Issue Type*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can1, text="Review ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can1, text="Entity Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can1, text="Country*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can1, text="Priority*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label7 = Label(Can1, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label8 = Label(Can1, text="Date Received*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    LabelSLA = Label(Can1, text="SLA: ",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label8_1 = Label(Can1, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label8_1_1 = Label(Can1, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label8_2 = Label(Can1, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    
    Label9 = Label(Can1, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label10 = Label(Can1, text="Due Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10_1 = Label(Can1, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label10_1_1 = Label(Can1, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label10_2 = Label(Can1, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    
    Label11 = Label(Can1, text="Assignee",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label12 = Label(Can1, text="Documents*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    LabelFilePath = Label(Can1, text="File Path*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    Entry1 = Entry(Can1,textvariable=RBGeneral_V_Entry1,font=("Calibri",10),width=22)
    Entry1.insert(0, 'Rabo Bank')
    Entry1.config(state = "disabled")

    Entry2_Values = SelectQueryfun(SupportDBPath,"Select IssueTypeName from tblIssueTypes;")
    Entry2 = AutocompleteCombobox(Can1, width=23, completevalues=Entry2_Values)
    Entry2_msg = 'This typed Issue Type is not available in the list, please check!'
    Entry2.bind("<FocusOut>", lambda event: GetBillingTime(event))
    Entry2.bind("<<ComboboxSelected>>", lambda event: GetBillingTime(event))
    
    Entry3 = Entry(Can1,validate="key", textvariable=RBGeneral_V_Entry3,bg="white",font=("Calibri",10),width=22)
    Entry3['validatecommand'] = (Entry3.register(AcceptNum),'%P','%d')
    
    Entry4 = Entry(Can1,textvariable=RBGeneral_V_Entry4,bg="white",font=("Calibri",10),width=22)
    
    Entry5_Values = SelectQueryfun(SupportDBPath,"Select CountryName from tblCountries;")
    Entry5 = AutocompleteCombobox(Can1, width=23, completevalues=Entry5_Values)
    Entry5_msg = 'This typed Country is not available in the list, please check!'
    Entry5.bind("<FocusOut>", lambda event: GetBillingTime(event))
    Entry5.bind("<<ComboboxSelected>>", lambda event: GetBillingTime(event))
    
    Entry6_Values = SelectQueryfun(SupportDBPath,"Select PriorityName from tblPriorites;")
    Entry6 = AutocompleteCombobox(Can1, width=12, completevalues=Entry6_Values)
    Entry6.set('Medium')
    Entry6_msg = 'This typed Priority is not available in the list, please check!'
    
    today = date.today()
    Entry8 = DateEntry(Can1,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy',maxdate=today)
    Entry8.delete(0, END)
    Entry8.set_date(datetime.now().strftime('%d/%m/%Y'))
    
    Entry8_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry8_1 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry8_1,bg="white",font=("Calibri",10),width=2)
    Entry8_1['validatecommand'] = (Entry8_1.register(AcceptNum),'%P','%d')
    Entry8_1_msg = 'This typed hour is not correct, please check!'
    
    Entry8_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry8_2 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry8_2,bg="white",font=("Calibri",10),width=2)
    Entry8_2['validatecommand'] = (Entry8_2.register(AcceptNum),'%P','%d')
    Entry8_2_msg = 'This typed minute is not correct, please check!'
    
    today = date.today()
    Entry10 = DateEntry(Can1,textvariable=RBGeneral_V_Entry10,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry10.delete(0, END)
    
    Entry10_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry10_1 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry10_1,bg="white",font=("Calibri",10),width=2)
    Entry10_1['validatecommand'] = (Entry10_1.register(AcceptNum),'%P','%d')
    Entry10_1_msg = 'This typed hour is not correct, please check!'
    
    Entry10_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry10_2 = Entry(Can1,validate='key',textvariable=RBGeneral_V_Entry10_2,bg="white",font=("Calibri",10),width=2)
    Entry10_2['validatecommand'] = (Entry10_2.register(AcceptNum),'%P','%d')
    Entry10_2_msg = 'This typed minute is not correct, please check!'
            
    Entry11_Values = SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' AND Analyst = 'Yes' ORDER BY EmpName ASC;")
    Entry11 = AutocompleteCombobox(Can1, width=23, completevalues=Entry11_Values)
    Entry11_msg = 'This typed Name is not available in the list, please check!'
        
    Entry12_Values = ['Yes in mail', 'No']
    Entry12 = AutocompleteCombobox(Can1, width=12, completevalues=Entry12_Values)
    Entry12_msg = 'This typed option is not available in the list, please check!'
    
    EntryFilePath = Entry(Can1,bg="white",font=("Calibri",10),width=70)

    def DocSelect(event, EntrySelect):
        if EntrySelect.get() == 'Yes in mail':
            LabelFilePath.place(x=10, y=370+40)
            EntryFilePath.place(x=140, y=370+40)
        else:
            LabelFilePath.place_forget()
            EntryFilePath.delete(0,END)
            EntryFilePath.place_forget()

    Entry12.bind("<FocusOut>", lambda event: DocSelect(event, Entry12))
    Entry12.bind("<<ComboboxSelected>>", lambda event: DocSelect(event, Entry12))
    
    Label1.place(x=10, y=20+40)
    Label2.place(x=350, y=20+40)
    Label3.place(x=10, y=90+40)
    Label4.place(x=350, y=90+40)
    Label5.place(x=10, y=160+40)
    Label6.place(x=350, y=160+40)

    Label7.place(x=120, y=210+40)
    Label8.place(x=10, y=230+40)
    LabelSLA.place(x=140, y=253+40)
    Label8_1.place(x=230, y=210+40)
    Label8_2.place(x=260, y=210+40)

    Label9.place(x=460, y=210+40)
    Label10.place(x=350, y=230+40)
    Label10_1.place(x=570, y=210+40)
    Label10_2.place(x=600, y=210+40)

    Label11.place(x=10, y=300+40)
    Label12.place(x=350, y=300+40)
    
    Entry1.place(x=140, y=20+40)
    Entry2.place(x=480, y=20+40)
    Entry3.place(x=140, y=90+40)
    Entry4.place(x=480, y=90+40)
    Entry5.place(x=140, y=160+40)
    Entry6.place(x=480, y=160+40)
    
    Entry8.place(x=140, y=230+40)
    Entry8_1.place(x=240, y=230+40)
    Label8_1_1.place(x=255, y=230+40)
    Entry8_2.place(x=270, y=230+40)
    
    Entry10.place(x=480, y=230+40)
    Entry10_1.place(x=580, y=230+40)
    Label10_1_1.place(x=595, y=230+40)
    Entry10_2.place(x=610, y=230+40)
        
    Entry11.place(x=140, y=300+40)
    Entry12.place(x=480, y=300+40)

    def BankNrIDSelect(event, EntryObj):
        if EntryObj.get() != '':
            InvoiceEntry2_1.config(state = "normal")
            InvoiceEntry2_1.delete(0, END)
            InvoiceEntry2_1.insert(0, SelectQueryfun(SupportDBPath,"Select BankNrID from tblBanksRabo WHERE BankNr = '" + EntryObj.get() + "';"))
            InvoiceEntry2_1.config(state = "disabled")

    InvoiceLabel1 = Label(Can1, text="INVOICE",width=15,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"))
    InvoiceLabel2 = Label(Can1, text="Bank Nr*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel3 = Label(Can1, text="Cost Centre*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel4 = Label(Can1, text="Department*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel5 = Label(Can1, text="Client Contact*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel6 = Label(Can1, text="Billing Time*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel7 = Label(Can1, text="Comments",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    InvoiceEntry2_Values = SelectQueryfun(SupportDBPath,"Select BankNr from tblBanksRabo;")
    InvoiceEntry2 = AutocompleteCombobox(Can1, width=32, completevalues=InvoiceEntry2_Values)
    InvoiceEntry2_msg = 'This typed Issue Type is not available in the list, please check!'
    InvoiceEntry2.bind("<FocusOut>", lambda event: BankNrIDSelect(event, InvoiceEntry2))
    InvoiceEntry2.bind("<<ComboboxSelected>>", lambda event: BankNrIDSelect(event, InvoiceEntry2))

    InvoiceEntry2_1 = Entry(Can1,bg="white",font=("Calibri",10),width=10)
    InvoiceEntry3 = Entry(Can1,bg="white",font=("Calibri",10),width=15)
    InvoiceEntry4 = Entry(Can1,bg="white",font=("Calibri",10),width=25)
    InvoiceEntry5 = Entry(Can1,bg="white",font=("Calibri",10),width=25)
    InvoiceEntry6 = Entry(Can1,validate='key',bg="white",font=("Calibri",10),width=10)
    InvoiceEntry6['validatecommand'] = (InvoiceEntry6.register(AcceptDecimal),'%P')
    
    InvoiceEntry7 = Text(Can1,bg="white",font=("Calibri",10),width=40,height=3)
    InvoiceEntry7.bind('<Tab>', lambda event: focusNext(InvoiceEntry7))
    InvoiceEntry7.bind('<Shift-Tab>', lambda event: focusPrev(InvoiceEntry7))

    InvoiceEntry7_vsb = ttk.Scrollbar(Can1, orient="vertical", command=InvoiceEntry7.yview)
    InvoiceEntry7_vsb.place(x=1102, y=360+40, height=50)
    InvoiceEntry7.configure(yscrollcommand=InvoiceEntry7_vsb.set)

    InvoiceLabel1.place(x=870, y=20)
    InvoiceLabel2.place(x=700, y=20+40)
    InvoiceLabel3.place(x=700, y=90+40)
    InvoiceLabel4.place(x=700, y=160+40)
    InvoiceLabel5.place(x=700, y=230+40)
    InvoiceLabel6.place(x=700, y=300+40)
    InvoiceLabel7.place(x=700, y=370+40)

    InvoiceEntry2.place(x=820, y=20+40)
    InvoiceEntry2_1.place(x=1040, y=20+40)
    InvoiceEntry2_1.config(state = "disabled")
    InvoiceEntry3.place(x=820, y=90+40)
    InvoiceEntry4.place(x=820, y=160+40)
    InvoiceEntry5.place(x=820, y=230+40)
    InvoiceEntry6.place(x=820, y=300+40)
    InvoiceEntry7.place(x=820, y=360+40)

    CheckboxVar = IntVar()
 
    Checkbox1 = Checkbutton(Can1, text = "Create Another", variable=CheckboxVar, fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Checkbox1.place(x=820, y=460)
        
    SubmitB = Button(Can1, text="Create", width=15, height=1, command=lambda:Validate_SubmitIssueRabo(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')
    CancelB = Button(Can1, text="Clear", width=15, height=1, command=lambda:ClearIssueRabo(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')           

    SubmitB.place(x=420, y=460)
    CancelB.place(x=620, y=460)

    if CreateAnother == 'Yes':
        InvoiceEntry2.set(InvoiceVar2)
        InvoiceEntry2_1.config(state = "normal")
        InvoiceEntry2_1.insert(0, InvoiceVar2_1)
        InvoiceEntry2_1.config(state = "disabled")
        InvoiceEntry3.insert(0, InvoiceVar3)
        InvoiceEntry4.insert(0, InvoiceVar4)
        InvoiceEntry5.insert(0, InvoiceVar5)
        InvoiceEntry6.insert(0, InvoiceVar6)
        CreateAnother = 'No'
    else:
        ClearIssueRabo()

########################################################## This is View Selected Issue Page for Rabo ########################################################

def ViewGeneralRabo(Can2, ReviewID, Tname, RBCan):

    global GeneralRabo_B, AnalysisRabo_B, PeerRabo_B

    GeneralRabo_B.config(bg='sky blue',fg='black')
    AnalysisRabo_B.config(bg='#006E8E',fg='white')
    PeerRabo_B.config(bg='#006E8E',fg='white')

    global ActiveDashboard
    ActiveDashboard = False

    Can3=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can3.place(x=5, y=35)

    RBGeneral_V_Entry1 = StringVar()
    RBGeneral_V_Entry3 = StringVar()
    RBGeneral_V_Entry4 = StringVar()
    RBGeneral_V_Entry7_1 = StringVar()
    RBGeneral_V_Entry7_2 = StringVar()
    RBGeneral_V_Entry9_1 = StringVar()
    RBGeneral_V_Entry9_2 = StringVar()
        
    Label1 = Label(Can3, text="Project*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can3, text="Issue Type*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can3, text="Review ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can3, text="Entity Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can3, text="Country*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can3, text="Priority*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label7 = Label(Can3, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label8 = Label(Can3, text="Date Received*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label8_1 = Label(Can3, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label8_1_1 = Label(Can3, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label8_2 = Label(Can3, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    
    Label9 = Label(Can3, text="dd/mm/yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label10 = Label(Can3, text="Due Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10_1 = Label(Can3, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label10_1_1 = Label(Can3, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label10_2 = Label(Can3, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    
    Label11 = Label(Can3, text="Assignee",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label12 = Label(Can3, text="Documents*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    LabelFilePath = Label(Can3, text="File Path*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        
    query = ("SELECT * FROM tblIssuesMainRabo WHERE ReviewID = '" + ReviewID + "';")
    result = ViewQueryfun(ProDBPath,query)

    Entry1 = Entry(Can3,textvariable=RBGeneral_V_Entry1,font=("Calibri",10), width=22)
    Entry1.insert(0, result[0][1])
    Entry1.config(state = "disabled")
    
    Entry2_Values = SelectQueryfun(SupportDBPath,"Select IssueTypeName from tblIssueTypes;")
    Entry2 = AutocompleteCombobox(Can3, width=23, completevalues=Entry2_Values)
    Entry2_msg = 'This typed Issue Type is not available in the list, please check!'
    Entry2.set(result[0][2])
    
    Entry3 = Entry(Can3,textvariable=RBGeneral_V_Entry3,bg="white",font=("Calibri",10), width=22)
    Entry3.insert(0, result[0][3])
    Entry3.config(state = "disabled")

    Entry4 = Entry(Can3,textvariable=RBGeneral_V_Entry4,bg="white",font=("Calibri",10), width=22)
    Entry4.insert(0, result[0][4])
    
    Entry5_Values = SelectQueryfun(SupportDBPath,"Select CountryName from tblCountries;")
    Entry5 = AutocompleteCombobox(Can3, width=23, completevalues=Entry5_Values)
    Entry5_msg = 'This typed Country is not available in the list, please check!'
    Entry5.set(result[0][5])
    
    Entry6_Values = SelectQueryfun(SupportDBPath,"Select PriorityName from tblPriorites;")
    Entry6 = AutocompleteCombobox(Can3, width=12, completevalues=Entry6_Values)
    Entry6_msg = 'This typed Priority is not available in the list, please check!'
    Entry6.set(result[0][6])
        
    ReceivedDate = result[0][7].split(' ')
    HourMin = ReceivedDate[1].split(':')

    Entry8 = DateEntry(Can3,width=12,bg="darkblue",fg="white")
    Entry8.set_date(ReceivedDate[0])
    Entry8.config(state = "disabled")

    Entry8_1 = Entry(Can3,textvariable=RBGeneral_V_Entry7_1,bg="white",font=("Calibri",10), width=2)
    Entry8_1.insert(0, HourMin[0])
    Entry8_1.config(state = "disabled")

    Entry8_2 = Entry(Can3,textvariable=RBGeneral_V_Entry7_2,bg="white",font=("Calibri",10), width=2)
    Entry8_2.insert(0, HourMin[1])
    Entry8_2.config(state = "disabled")

    ReceivedDate = result[0][8].split(' ')
    HourMin = ReceivedDate[1].split(':')

    Entry10 = DateEntry(Can3,width=12,bg="darkblue",fg="white")
    Entry10.set_date(ReceivedDate[0])
    Entry10.config(state = "disabled")

    Entry10_1 = Entry(Can3,textvariable=RBGeneral_V_Entry9_1,bg="white",font=("Calibri",10), width=2)
    Entry10_1.insert(0, HourMin[0])
    Entry10_1.config(state = "disabled")

    Entry10_2 = Entry(Can3,textvariable=RBGeneral_V_Entry9_2,bg="white",font=("Calibri",10), width=2)
    Entry10_2.insert(0, HourMin[1])
    Entry10_2.config(state = "disabled")

    query = ("""SELECT ID, Assignee, MAX(StatusID), TableName 
                FROM tblIssuesStatusRabo 
                WHERE TableName = 'Create';""")
    
    result2 = ViewQueryfun(ProDBPath,query)

    Entry11 = ttk.Combobox(Can3,font=("Calibri",10))
    Entry11.set(result2[0][1])
    Entry11.config(state = "disabled")

    Entry12_Values = ['Yes in mail', 'No']
    Entry12 = AutocompleteCombobox(Can3, width=12, completevalues=Entry12_Values)
    Entry12_msg = 'This typed option is not available in the list, please check!'
    Entry12.set(result[0][9])
    
    EntryFilePath = Entry(Can3,bg="white",font=("Calibri",10),width=70)
    if result[0][22] != None:
        EntryFilePath.insert(0, str(result[0][22]))

    def DocSelect(event, EntrySelect):
        if EntrySelect.get() == 'Yes in mail':
            LabelFilePath.place(x=10, y=370+10)
            EntryFilePath.place(x=140, y=370+10)
        else:
            LabelFilePath.place_forget()
            EntryFilePath.delete(0,END)
            EntryFilePath.place_forget()

    Entry12.bind("<FocusOut>", lambda event: DocSelect(event, Entry12))
    Entry12.bind("<<ComboboxSelected>>", lambda event: DocSelect(event, Entry12))
    
    Label1.place(x=10, y=20+10)
    Label2.place(x=350, y=20+10)
    Label3.place(x=10, y=90+10)
    Label4.place(x=350, y=90+10)
    Label5.place(x=10, y=160+10)
    Label6.place(x=350, y=160+10)

    Label7.place(x=120, y=210+10)
    Label8.place(x=10, y=230+10)
    Label8_1.place(x=230, y=210+10)
    Label8_2.place(x=260, y=210+10)

    Label9.place(x=460, y=210+10)
    Label10.place(x=350, y=230+10)
    Label10_1.place(x=570, y=210+10)
    Label10_2.place(x=600, y=210+10)

    Label11.place(x=10, y=300+10)
    Label12.place(x=350, y=300+10)
    
    Entry1.place(x=140, y=20+10)
    Entry2.place(x=480, y=20+10)
    Entry3.place(x=140, y=90+10)
    Entry4.place(x=480, y=90+10)
    Entry5.place(x=140, y=160+10)
    Entry6.place(x=480, y=160+10)
    
    Entry8.place(x=140, y=230+10)
    Entry8_1.place(x=240, y=230+10)
    Label8_1_1.place(x=255, y=230+10)
    Entry8_2.place(x=270, y=230+10)
    
    Entry10.place(x=480, y=230+10)
    Entry10_1.place(x=580, y=230+10)
    Label10_1_1.place(x=595, y=230+10)
    Entry10_2.place(x=610, y=230+10)
        
    Entry11.place(x=140, y=300+10)
    Entry12.place(x=480, y=300+10)

    def BankNrIDSelect(event, EntryObj):
        if EntryObj.get() != '':
            InvoiceEntry2_1.config(state = "normal")
            InvoiceEntry2_1.delete(0, END)
            InvoiceEntry2_1.insert(0, SelectQueryfun(SupportDBPath,"Select BankNrID from tblBanksRabo WHERE BankNr = '" + EntryObj.get() + "';"))
            InvoiceEntry2_1.config(state = "disabled")

    InvoiceLabel1 = Label(Can3, text="INVOICE",width=15,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"))
    InvoiceLabel2 = Label(Can3, text="Bank Nr*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel3 = Label(Can3, text="Cost Centre*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel4 = Label(Can3, text="Department*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel5 = Label(Can3, text="Client Contact*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel6 = Label(Can3, text="Billing Time*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    InvoiceLabel7 = Label(Can3, text="Comments",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    InvoiceEntry2_Values = SelectQueryfun(SupportDBPath,"Select BankNr from tblBanksRabo;")
    InvoiceEntry2 = AutocompleteCombobox(Can3, width=32, completevalues=InvoiceEntry2_Values)
    InvoiceEntry2_msg = 'This typed Issue Type is not available in the list, please check!'
    InvoiceEntry2.set(result[0][10])
    InvoiceEntry2.bind("<FocusOut>", lambda event: BankNrIDSelect(event, InvoiceEntry2))
    InvoiceEntry2.bind("<<ComboboxSelected>>", lambda event: BankNrIDSelect(event, InvoiceEntry2))
    
    InvoiceEntry2_1 = Entry(Can3,bg="white",font=("Calibri",10),width=10)
    InvoiceEntry2_1.insert(0, result[0][11])
    InvoiceEntry2_1.config(state = "disabled")

    InvoiceEntry3 = Entry(Can3,bg="white",font=("Calibri",10),width=15)
    InvoiceEntry3.insert(0, result[0][12])
    
    InvoiceEntry4 = Entry(Can3,bg="white",font=("Calibri",10),width=25)
    InvoiceEntry4.insert(0, result[0][13])
    
    InvoiceEntry5 = Entry(Can3,bg="white",font=("Calibri",10),width=25)
    InvoiceEntry5.insert(0, result[0][14])
    
    InvoiceEntry6 = Entry(Can3,validate='key',bg="white",font=("Calibri",10),width=10)
    InvoiceEntry6['validatecommand'] = (InvoiceEntry6.register(AcceptDecimal),'%P')
    InvoiceEntry6.insert(0, result[0][15])
    
    InvoiceEntry7 = Text(Can3,bg="white",font=("Calibri",10),width=40,height=3)

    if result[0][16] != None:
        InvoiceEntry7.insert(1.0, result[0][16])

    InvoiceEntry7.bind('<Tab>', lambda event: focusNext(InvoiceEntry7))
    InvoiceEntry7.bind('<Shift-Tab>', lambda event: focusPrev(InvoiceEntry7))

    InvoiceEntry7_vsb = ttk.Scrollbar(Can3, orient="vertical", command=InvoiceEntry7.yview)
    InvoiceEntry7_vsb.place(x=1102, y=360+10, height=50)
    InvoiceEntry7.configure(yscrollcommand=InvoiceEntry7_vsb.set)

    InvoiceLabel1.place(x=870, y=0)
    InvoiceLabel2.place(x=700, y=20+10)
    InvoiceLabel3.place(x=700, y=90+10)
    InvoiceLabel4.place(x=700, y=160+10)
    InvoiceLabel5.place(x=700, y=230+10)
    InvoiceLabel6.place(x=700, y=300+10)
    InvoiceLabel7.place(x=700, y=370+10)

    InvoiceEntry2.place(x=820, y=20+10)
    InvoiceEntry2_1.place(x=1040, y=20+10)
    InvoiceEntry2_1.config(state = "disabled")
    InvoiceEntry3.place(x=820, y=90+10)
    InvoiceEntry4.place(x=820, y=160+10)
    InvoiceEntry5.place(x=820, y=230+10)
    InvoiceEntry6.place(x=820, y=300+10)
    InvoiceEntry7.place(x=820, y=360+10)

    def Validate_Clear():
        LabelList = [Label2, Label4, Label5, Label6, Label12, InvoiceLabel2, InvoiceLabel3, InvoiceLabel4, InvoiceLabel5, InvoiceLabel6, InvoiceLabel7, LabelFilePath]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_SubmitIssueRabo():
        Validate_Clear()

        AllLabelList = [Label2, Label5, Label6, Label12, InvoiceLabel2]
        AllEntryList = [Entry2, Entry5, Entry6, Entry12, InvoiceEntry2]
        AllEntryValues = [Entry2_Values, Entry5_Values, Entry6_Values, Entry12_Values, InvoiceEntry2_Values]
        AllEntryMessage = [Entry2_msg, Entry5_msg, Entry6_msg, Entry12_msg, InvoiceEntry2_msg]

        DateLabelList = [Label8, Label10]
        DateEntryList = [Entry8, Entry10]
        
        if (Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry8.get() == '' or Entry8_1.get() == '' or Entry8_2.get() == '' 
            or Entry10.get() == '' or Entry10_1.get() == '' or Entry10_2.get() == '' or Entry12.get() == '' or InvoiceEntry2.get() == '' or InvoiceEntry2_1.get() == '' or InvoiceEntry3.get() == '' or InvoiceEntry4.get() == '' or InvoiceEntry5.get() == '' or InvoiceEntry6.get() == ''):
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        
        elif Entry12.get() == "Yes in mail" and EntryFilePath.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        elif Entry12.get() == "Yes in mail" and EntryFilePath.get()[:2] != r'\\':
            LabelFilePath.config(foreground='red')
            EntryFilePath.focus_set()
            messagebox.showerror('Validation Check','File Path should be a valid network path, please check the path!')
            return False

        elif Entry12.get() == "Yes in mail" and not os.path.isdir(EntryFilePath.get()):
            LabelFilePath.config(foreground='red')
            EntryFilePath.focus_set()
            messagebox.showerror('Validation Check','File Path is not valid path, please check the path!')
            return False

        else:
            Submit = True
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                SubmitIssueRabo()

    def SubmitIssueRabo():

        if Entry12.get() == 'Yes in mail':
            FilePath = EntryFilePath.get()
        else:
            FilePath = ''
        
        DateReceived = Entry8.get() + " " + Entry8_1.get() + ":" + Entry8_2.get()
        DueDate = Entry10.get() + " " + Entry10_1.get() + ":" + Entry10_2.get()

        Record = (Entry1.get(),	Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), DateReceived, DueDate, Entry12.get(), InvoiceEntry2.get(), InvoiceEntry2_1.get(), InvoiceEntry3.get(), InvoiceEntry4.get(), InvoiceEntry5.get(), InvoiceEntry6.get().strip(), InvoiceEntry7.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), FilePath)
        query = ("""INSERT INTO tblIssuesGenRabo (ProjectName, IssueType, ReviewID, EntityName, Country, Priority, DateReceived, DueDate, Documents, BankNr, BankNrID, CostCentre, Department, ClientContact, BillingTime, Comments, EntryBy, EntryTime, FilePath) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)
        
        Record = (IssueID, Entry2.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry12.get(), InvoiceEntry2.get(), InvoiceEntry2_1.get(), InvoiceEntry3.get(), InvoiceEntry4.get(), InvoiceEntry5.get(), InvoiceEntry6.get().strip(), InvoiceEntry7.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), FilePath, Entry3.get())
        query = ("""UPDATE tblIssuesMainRabo SET IssueID = ?, IssueType = ?, EntityName = ?, Country = ?, Priority = ?, Documents = ?, BankNr = ?, BankNrID = ?, CostCentre = ?, Department = ?, ClientContact = ?, BillingTime = ?, Comments = ?, UpdatedBy = ?, UpdatedTime = ?, FilePath = ? WHERE ReviewID = ?;""")
        UpdateQueryfun(ProDBPath, query, Record)
       
        messagebox.showinfo('Updated','Issue Updated Successfully!')
            
    def ClearIssueRabo():
        Validate_Clear()
        Entry2.set('')
        Entry4.delete(0, END)
        Entry5.set('')
        Entry6.set('')
        Entry6.set('Medium')
        Entry12.set('')
        EntryFilePath.delete(0, END)
        InvoiceEntry2.set('')
        InvoiceEntry2_1.config(state = "normal")
        InvoiceEntry2_1.delete(0, END)
        InvoiceEntry2_1.config(state = "disabled")
        InvoiceEntry3.delete(0, END)
        InvoiceEntry4.delete(0, END)
        InvoiceEntry5.delete(0, END)
        InvoiceEntry6.delete(0, END)
        InvoiceEntry7.delete(1.0, END)

    SubmitB = Button(Can3, text="Update", width=15, height=1, command=lambda:Validate_SubmitIssueRabo(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')
    CancelB = Button(Can3, text="Clear", width=15, height=1, command=lambda:ClearIssueRabo(),bg="sky blue",fg="black",font=("Calibri",10,"bold"),cursor='hand2')           
    CancelB.config(state = "disabled")

    SubmitB.place(x=420, y=420)
    CancelB.place(x=620, y=420)

    if Tname == 'Archive':
        global ActiveJobPage
        ActiveJobPage = False
        Entry1.config(state = "normal")
        Entry3.config(state = "normal")
        Entry8.config(state = "normal")
        Entry8_1.config(state = "normal")
        Entry8_2.config(state = "normal")
        Entry10.config(state = "normal")
        Entry10_1.config(state = "normal")
        Entry10_2.config(state = "normal")
        Entry11.config(state = "normal")
        InvoiceEntry2_1.config(state = "normal")
               
        SubmitB.config(state = 'disabled')
        CancelB.config(state = 'disabled')

    DocSelect(Event, Entry12)

########################################################## This is Analysis Page for Rabo ########################################################

def ViewAnalysisRabo(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = ''):

    global GeneralRabo_B, AnalysisRabo_B, PeerRabo_B

    GeneralRabo_B.config(bg='#006E8E',fg='white')
    AnalysisRabo_B.config(bg='sky blue',fg='black')
    PeerRabo_B.config(bg='#006E8E',fg='white')

    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False
    
    Can4=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can4.place(x=5, y=35)
        
    EntryDate = datetime.now().strftime('%d-%m-%Y')
    StartTime = StartTime

    query = ("SELECT IssueType FROM tblIssuesMainRabo WHERE ReviewID = '" + ReviewID + "';")
    ScreenCheck = ViewQueryfun(ProDBPath, query)

    def Validate_Clear():
        LabelList = [Label1, Label2, Label3, Label4, Label6, Label7, DocCost_L, Label8, Label9, Label10, Label11, Label12]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label4, Label6, Label7, Label10]
        AllEntryList = [Entry4, Entry6, Entry7, Entry10]
        AllEntryValues = [Entry4_Values, Entry6_Values, Entry7_Values, Entry10_Values]
        AllEntryMessage = [Entry4_msg, Entry6_msg, Entry7_msg, Entry10_msg]

        DateLabelList = [Label12]
        DateEntryList = [Entry12]

        Submit = True
        if Entry10.get() not in ['In Process', 'Cancelled', 'Cancelled-Billable']:
            if Entry8.get()[:2] != r'\\':
                Label8.config(foreground='red')
                Entry8.focus_set()
                messagebox.showerror('Validation Check','File Path should be a valid network path, please check the path!')
                return False

            if not os.path.isdir(Entry8.get()):
                Label8.config(foreground='red')
                Entry8.focus_set()
                messagebox.showerror('Validation Check','File Path is not valid path, please check the path!')
                return False

            if Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry6.get() == '' or Entry7.get() == '' or DocCost_E.get() == '' or Entry8.get() == '' or Entry10.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

            elif Entry10.get() == "RM" or Entry10.get() == "On Hold":
                if Entry11.get(1.0, END).strip() == '' or Entry12.get() == '':
                    messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                    return False
            
        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='red')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[i])
                    Submit = False
                    break
        
        for i in range(0,len(DateEntryList)):
            if DateEntryList[i].get() != '':
                result = Date_Validation(DateEntryList[i])
                if result == 'Failed':
                    DateLabelList[i].config(foreground='red')
                    DateEntryList[i].focus_set()
                    messagebox.showerror('Date Error','This typed date is not valid! Please check')
                    Submit = False
                    break

        if Submit:
            SubmitAnaRabo()
    
    def SubmitAnaRabo():
        global NPTotalHours
        global ActiveJobPage

        if Entry10.get() == 'Cancelled' or Entry10.get() == 'Cancelled-Billable':
            EntryStatus = Entry10.get()
            Status = Entry10.get()
            Stage = 'Job Completed'
            Assignee = ''
        elif Entry10.get() == 'Completed':
            EntryStatus = 'Completed'
            Status = 'Unassigned'
            Stage = 'Peer Reviewer'
            Assignee = ''
        else:
            EntryStatus = Entry10.get()
            Status = Entry10.get()
            Stage = 'Analysis'
            Assignee = Var_UserName

        EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

        Record = (ReviewID, Entry2.get(), Entry3.get(), Entry4.get(), Entry6.get(), Entry7.get(), DocCost_E.get().strip(), Entry8.get(), Entry9.get(1.0, END).strip(),
                    Entry10.get(), Entry11.get(1.0, END).strip(), Entry12.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesAnaRabo (ReviewID, Individual, Entity, RiskLevel, Sanctions, PEP, DocCost, FileLinks, Comments, Status, Reason, DatetoBank, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        
        AnalysisID = UpdateQueryReturn(ProDBPath, query, Record)

        if Tname == 2 or T4Stage == 'Analysis':
            Record = ('Analysis', AnalysisID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')            
            query = ("INSERT INTO tblIssuesStatusRabo (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
            UpdateQueryfun(ProDBPath, query, Record)

            Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
            query = ("""UPDATE tblIssuesMainRabo SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
            UpdateQueryfun(ProDBPath, query, Record)

            NPTotalHours = datetime.min
            ActiveJobPage = False
            Cancel()
            Timer1.stop_clock()

        messagebox.showinfo('Completed','Analysis Updated Successfully!')
        if Tname == 2 or T4Stage == 'Analysis':
            WorkQueueRaboCheck(RBCan, Timer1)

    def Cancel():
        Validate_Clear()
        Entry2.delete(0, END)
        Entry3.delete(0, END)
        Entry4.delete(0, END)
        if ScreenCheck[0][0] in ['Client Identification + Checks', 'Structure', 'Separate Checks', 'UBO']:
            Entry6.config(state='normal')
            Entry7.config(state='normal')
            Entry6.delete(0, END)
            Entry7.delete(0, END)
            
        else:
            Entry6.config(state='normal')
            Entry7.config(state='normal')
            Entry6.delete(0, END)
            Entry7.delete(0, END)
            Entry6.set('NA')
            Entry7.set('NA')
            Entry6.config(state='disabled')
            Entry7.config(state='disabled')
    
        DocCost_E.delete(0, END)
        Entry8.delete(0, END)

        Entry9.delete(1.0, END)
        Entry10.set('')

        Entry11.config(state='normal')
        Entry12.config(state='normal')
        Entry11.delete(1.0, END)
        Entry12.delete(0, END)
        Label11.config(text="Reason")
        Label12.config(text="Date Communicated to Bank")
        Entry11.config(state='disabled')
        Entry12.config(state='disabled')

    def StatusSelected(event):
        TempStatus = Entry10.get()

        if TempStatus == "RM" or TempStatus == "On Hold":
            Label11.config(text='Reason*')
            Label12.config(text='Date Communicated to Bank*')
            Entry11.config(state='normal')
            Entry12.config(state='normal')
                
        else:
            Entry11.config(state='normal')
            Entry12.config(state='normal')
            Entry11.delete(1.0, END)
            Entry12.delete(0, END)

            Label11.config(text='Reason')
            Label12.config(text='Date Communicated to Bank')
            Entry11.config(state='disabled')
            Entry12.config(state='disabled')
        
    RBAnalysis_V_Entry2 = StringVar()
    RBAnalysis_V_Entry3 = StringVar()
    RBAnalysis_V_Entry8 = StringVar()
    RBAnalysis_V_Entry12 = StringVar()
    RBAnalysis_V_DocCost_E = StringVar()

    Label1 = Label(Can4, text="No of Layers*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can4, text="Individual*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label3 = Label(Can4, text="Entity*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"))
    Label4 = Label(Can4, text="Risk Level*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can4, text="Sanctions*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7 = Label(Can4, text="PEP*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    DocCost_L = Label(Can4, text="Document Cost*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label8 = Label(Can4, text="File Path*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label9 = Label(Can4, text="Comments",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10 = Label(Can4, text="Status*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label11 = Label(Can4, text="Reason*",width=16,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label12_0 = Label(Can4, text="dd/mm/yyyy",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"))
    Label12 = Label(Can4, text="Date Communicated to Bank*",width=16,height=2,fg="#054457", bg="white",font=("Calibri",10,"bold"), wraplength=125,anchor='e')

    Entry2 = Entry(Can4,validate='key',textvariable=RBAnalysis_V_Entry2,bg="white",font=("Calibri",10),width=10)
    Entry2['validatecommand'] = (Entry2.register(AcceptNum),'%P','%d')
    Entry3 = Entry(Can4,validate='key',textvariable=RBAnalysis_V_Entry3,bg="white",font=("Calibri",10),width=10)
    Entry3['validatecommand'] = (Entry3.register(AcceptNum),'%P','%d')

    Entry4_Values = SelectQueryfun(SupportDBPath,"SELECT RiskName FROM tblRiskLevel WHERE Project = 'Rabo';")
    Entry4 = AutocompleteCombobox(Can4, font=("Calibri",10), width=15, completevalues=Entry4_Values)
    Entry4_msg = 'This typed Risk Level is not available in the list, please check!'
    
    if ScreenCheck[0][0] in ['Client Identification + Checks', 'Structure', 'Separate Checks', 'UBO']:
        Entry6_Values = ['Yes', 'No']
        Entry6 = AutocompleteCombobox(Can4, font=("Calibri",10), width=10, completevalues=Entry6_Values)
        Entry6.config(state='normal')
        Entry7_Values = ['Yes', 'No']
        Entry7 = AutocompleteCombobox(Can4, font=("Calibri",10), width=10, completevalues=Entry7_Values)
        Entry7.config(state='normal')
    else:
        Entry6_Values = ['NA']
        Entry6 = AutocompleteCombobox(Can4, font=("Calibri",10), width=10, completevalues=Entry6_Values)
        Entry6.set('NA')
        Entry6.config(state='disabled')
        Entry7_Values = ['NA']
        Entry7 = AutocompleteCombobox(Can4, font=("Calibri",10), width=10, completevalues=Entry7_Values)
        Entry7.set('NA')
        Entry7.config(state='disabled')
        
    Entry6_msg = 'This typed Option is not available in the list, please check!'
    Entry7_msg = 'This typed Option is not available in the list, please check!'
    
    DocCost_E = Entry(Can4,validate='key',textvariable=RBAnalysis_V_DocCost_E,bg="white",font=("Calibri",10),width=12)
    DocCost_E['validatecommand'] = (DocCost_E.register(AcceptDecimal),'%P')
       
    Entry8 = Entry(Can4,textvariable=RBAnalysis_V_Entry8,bg="white",font=("Calibri",10),width=40)
    
    Entry9 = Text(Can4,bg="white",font=("Calibri",10),width=65,height=2)
    Entry9.bind('<Tab>', lambda event: focusNext(Entry9))
    Entry9.bind('<Shift-Tab>', lambda event: focusPrev(Entry9))

    Entry10_Values = SelectQueryfun(SupportDBPath,"SELECT StatusName FROM tblStatusSelect WHERE StatusName != 'Revert Back' AND Project = 'Rabo';")
    Entry10 = AutocompleteCombobox(Can4, font=("Calibri",10), width=15, completevalues=Entry10_Values)
    Entry10_msg = 'This typed Status is not available in the list, please check!'
    Entry10.bind("<<ComboboxSelected>>", StatusSelected)
    Entry10.bind("<FocusOut>", StatusSelected)
    
    Entry11 = Text(Can4,bg="white",font=("Calibri",10),width=28,height=3)
    Entry11.bind('<Tab>', lambda event: focusNext(Entry11))
    Entry11.bind('<Shift-Tab>', lambda event: focusPrev(Entry11))
    
    today = date.today()
    Entry12 = DateEntry(Can4,textvariable=RBAnalysis_V_Entry12,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy',maxdate=today)
    Entry12.delete(0, END)
    
    Button1 = Button(Can4, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(Can4, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')

    Button1.place(x=450, y=430)
    Button2.place(x=650, y=430)

    StatusSelected(Event)

    query = ("SELECT * FROM tblIssuesAnaRabo WHERE ReviewID = '" + ReviewID + "' ORDER BY AnalysisID DESC;")
    result = ViewQueryfun(ProDBPath, query)
    if len(result) > 0:
        Entry2.insert(0,result[0][2])
        Entry3.insert(0,result[0][3])
        Entry4.insert(0,result[0][4])
        if ScreenCheck[0][0] in ['Client Identification + Checks', 'Structure', 'Separate Checks', 'UBO']:
            Entry6.config(state='normal')
            Entry7.config(state='normal')
            Entry6.insert(0,result[0][5])
            Entry7.insert(0,result[0][6])
        else:
            Entry6.config(state='normal')
            Entry7.config(state='normal')
            Entry6.set('NA')
            Entry7.set('NA')
            Entry6.config(state='disabled')
            Entry7.config(state='disabled')

        DocCost_E.insert(0,result[0][7])
        Entry8.insert(0,result[0][8])
        Entry9.insert(1.0,result[0][9])
        Entry10.set(result[0][10])

        StatusSelected(Event)

        Entry11.insert(1.0,result[0][11])

        DateValue = result[0][12]
        if DateValue == '' or DateValue == None:
            Entry12.delete(0,END)
        else:
            Entry12.set_date(result[0][12])
    
    if Tname == 3 or T4Stage == 'Peer Reviewer':
        Entry9.config(state = "normal")
        Entry9.bind("<Key>", lambda a: "break")
        Entry10.config(state = "disabled")
        
        Button1.config(text="Update")
        Button2.config(state = 'disabled')

    if Tname == 'Archive':
        ActiveJobPage = False
        
        Button1.config(state = 'disabled')
        Button2.config(state = 'disabled')
        
    Label1.place(x=280, y=30)
    Label2.place(x=410, y=10)
    Label3.place(x=500, y=10)
    Label4.place(x=280, y=80)
    Label6.place(x=280, y=130)
    Label7.place(x=630, y=130)

    DocCost_L.place(x=280, y=180)
    Label8.place(x=630, y=180)

    Label9.place(x=280, y=235)
    Label10.place(x=280, y=295)
        
    Entry2.place(x=410, y=30)
    Entry3.place(x=500, y=30)
    Entry4.place(x=410, y=80)
    Entry6.place(x=410, y=130)
    Entry7.place(x=760, y=130)

    DocCost_E.place(x=410, y=180)
    Entry8.place(x=760, y=180)

    Entry9.place(x=410, y=230)
    Entry10.place(x=410, y=295)

    Label11.place(x=280, y=360)
    Label12.place(x=630, y=350)
    Entry11.place(x=410, y=350)
    Label12_0.place(x=750, y=340)
    Entry12.place(x=760, y=360)
    
    Entry9_vsb = ttk.Scrollbar(Can4, orient="vertical", command=Entry9.yview)
    Entry9_vsb.place(x=865, y=230, height=35)
    Entry9.configure(yscrollcommand=Entry9_vsb.set)

    Entry11_vsb = ttk.Scrollbar(Can4, orient="vertical", command=Entry11.yview)
    Entry11_vsb.place(x=610, y=350, height=50)
    Entry11.configure(yscrollcommand=Entry11_vsb.set)

    TempStatus = Entry10.get()

    if TempStatus == "RM" or TempStatus == "On Hold":
        Label11.config(text='Reason*')
        Label12.config(text='Date Communicated to Bank*')
        Entry11.config(state='normal')
        Entry12.config(state='normal')
       
    else:
        Entry11.config(state='normal')
        Entry12.config(state='normal')
        Entry11.delete(1.0, END)
        Entry12.delete(0, END)

        Label11.config(text='Reason')
        Label12.config(text='Date Communicated to Bank')
        Entry11.config(state='disabled')
        Entry12.config(state='disabled')

########################################################## This is Peer Reviewer Page for Rabo ########################################################

def ViewPeerRabo(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = ''):

    global GeneralRabo_B, AnalysisRabo_B, PeerRabo_B

    GeneralRabo_B.config(bg='#006E8E',fg='white')
    AnalysisRabo_B.config(bg='#006E8E',fg='white')
    PeerRabo_B.config(bg='sky blue',fg='black')

    global ActiveJobPage
    ActiveJobPage = True

    global ActiveDashboard
    ActiveDashboard = False

    Can5=Canvas(Can2,bg="white", width=1150, height=460, highlightthickness=0)
    Can5.place(x=5, y=35)

    EntryDate = datetime.now().strftime('%d-%m-%Y')
    StartTime = StartTime

    def Validate_Clear():
        LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label14, Label15, Label16, Label17, Label18, Label19, Label20, Label21]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label14, Label15, Label16, Label17, Label18]
        AllEntryList = [Entry1, Entry2, Entry3, Entry4, Entry5, Entry6, Entry7, Entry8, Entry9, Entry10, Entry11, Entry12, Entry13, Entry14, Entry15, Entry16, Entry17, Entry18]
        AllEntryValues = [Entry1_Values]
        AllEntryMessage = [Entry1_msg]
        
        Submit = True

        if Entry20.get() == 'On Hold' and Entry21.get(1.0, END).strip() == '':
            Label21.config(foreground='red')
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        if Entry20.get() != 'In Process':
            if (Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or 
                Entry9.get() == '' or Entry10.get() == '' or Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == '' or Entry14.get() == '' or Entry15.get() == '' or Entry16.get() == '' or 
                Entry17.get() == '' or Entry18.get() == '' or Entry20.get() == ''):
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[0], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='red')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[0])
                    Submit = False
                    break
        
        if Entry20.get() != '':
            result = DropDown_Validation(Entry20_Values, Entry20)
            if result == 'Failed':
                Label20.config(foreground='red')
                Entry20.focus_set()
                messagebox.showerror('Validation Check',AllEntryMessage[0])
                Submit = False

        if Submit:
            SubmitPRRabo()
    
    def SubmitPRRabo():
        global NPTotalHours
        global ActiveJobPage
        
        if Entry20.get() == 'Completed':
            EntryStatus = 'Completed'
            Status = 'Completed'
            Stage = 'Job Completed'
            Assignee = ''
        elif Entry20.get() == 'Revert Back':
            EntryStatus = 'Revert Back'
            Status = 'Revert Back'
            Stage = 'Analysis'
            Assignee = ''
        else:
            EntryStatus = Entry20.get()
            Status = Entry20.get()
            Stage = 'Peer Reviewer'
            Assignee = Var_UserName

        EndTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

        Record = (ReviewID, Entry1.get(), Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(), 
                    Entry11.get(), Entry12.get(), Entry13.get(), Entry14.get(), Entry15.get(), Entry16.get(), Entry17.get(), Entry18.get(), Entry19.get(1.0, END).strip(), Entry20.get(), Entry21.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesPRRabo (ReviewID, LegalName, LegalForm, RegNumber, Address, RegAddress, BusinessActivities, DateInc, MostRecStaChange, Directors, LegalSignature, 
                    LegalActs, SpecificDetails, ShareholderStructure, BackgroundChecks, SepPassportFails, KeyFindings, AdminErrors, Form, Comments, Status, Reason, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        
        PRID = UpdateQueryReturn(ProDBPath, query, Record)

        if Tname == 3 or T4Stage == 'Peer Reviewer':
            Record = ('PR', PRID, ReviewID, Assignee, Var_UserID, EntryDate, StartTime, EndTime, EntryStatus, Status, Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Peer Reviewer')            
            query = ("INSERT INTO tblIssuesStatusRabo (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
            UpdateQueryfun(ProDBPath, query, Record)

            Record = (Assignee, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
            query = ("""UPDATE tblIssuesMainRabo SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
            UpdateQueryfun(ProDBPath, query, Record)

            NPTotalHours = datetime.min
            ActiveJobPage = False
            Cancel()
            Timer1.stop_clock()
        
        messagebox.showinfo('Completed','Peer Reviewer Updated Successfully!')
        if Tname == 3 or T4Stage == 'Peer Reviewer':
            WorkQueueRaboCheck(RBCan, Timer1)

    def Cancel():
        Validate_Clear()
        Entry1.set('')
        Entry2.set('')
        Entry3.set('')
        Entry4.set('')
        Entry5.set('')
        Entry6.set('')
        Entry7.set('')
        Entry8.set('')
        Entry9.set('')
        Entry10.set('')
        Entry11.set('')
        Entry12.set('')
        Entry13.set('')
        Entry14.set('')
        Entry15.set('')
        Entry16.set('')
        Entry17.set('')
        Entry18.set('')
        Entry19.delete(1.0, END)
        Entry20.set('')
        Entry21.delete(1.0, END)

    Label1 = Label(Can5, text="Legal Name*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can5, text="Legal Form*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can5, text="Registration Number*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can5, text="Address*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can5, text="Registered Address*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can5, text="Business Activities*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7 = Label(Can5, text="Date of Incorporation*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label8 = Label(Can5, text="Most Recent Statutory Change*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9 = Label(Can5, text="Directors*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10 = Label(Can5, text="Legal Signature*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label11 = Label(Can5, text="Legal Acts*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label12 = Label(Can5, text="Specific Details*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label13 = Label(Can5, text="Shareholder Structure*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label14 = Label(Can5, text="Background Checks*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label15 = Label(Can5, text="Separate Passport Fails*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label16 = Label(Can5, text="Key Findings*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label17 = Label(Can5, text="Administrative Errors*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label18 = Label(Can5, text="Form*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label19 = Label(Can5, text="Comments",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label20 = Label(Can5, text="Status*",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label21 = Label(Can5, text="Reason",width=25,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    def ApplyStyle(EntryName):
        style= ttk.Style()
        style.theme_use('default')
        style.configure("Style0.TCombobox", foreground= "black", background= "white")
        style.configure("Style1.TCombobox", foreground= "red", background= "white")
        style.configure("Style2.TCombobox", foreground= "green", background= "white")

        if EntryName.get() == 'Fail':
            EntryName.config(style='Style1.TCombobox')
        elif EntryName.get() == 'Pass':
            EntryName.config(style='Style2.TCombobox')
        else:
            EntryName.config(style='Style0.TCombobox')

    Entry1_Values = ['Pass', 'Fail']
    Entry1 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry1_msg = 'This typed text is not available in the list, please check!'
    Entry2 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry3 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry4 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry5 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry6 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry7 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry8 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry9 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry10 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry11 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry12 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry13 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry14 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry15 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry16 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry17 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
    Entry18 = AutocompleteCombobox(Can5, font=("Calibri",10), width=10, completevalues=Entry1_Values)
        
    Entry19 = Text(Can5,bg="white",font=("Calibri",10),width=30,height=12)
    Entry19.bind('<Tab>', lambda event: focusNext(Entry19))
    Entry19.bind('<Shift-Tab>', lambda event: focusPrev(Entry19))

    Entry20_Values=SelectQueryfun(SupportDBPath,"SELECT StatusName FROM tblStatusSelect WHERE Project = 'Rabo';")
    Entry20 = AutocompleteCombobox(Can5, font=("Calibri",10), width=15, completevalues=Entry20_Values)
    
    Entry21 = Text(Can5,bg="white",font=("Calibri",10),width=30,height=2)
    Entry21.bind('<Tab>', lambda event: focusNext(Entry21))
    Entry21.bind('<Shift-Tab>', lambda event: focusPrev(Entry21))

    Button1 = Button(Can5, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(Can5, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')

    Button1.place(x=450, y=430)
    Button2.place(x=650, y=430)

    Entry1.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry1))
    Entry2.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry2))
    Entry3.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry3))
    Entry4.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry4))
    Entry5.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry5))
    Entry6.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry6))
    Entry7.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry7))
    Entry8.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry8))
    Entry9.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry9))
    Entry10.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry10))
    Entry11.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry11))
    Entry12.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry12))
    Entry13.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry13))
    Entry14.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry14))
    Entry15.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry15))
    Entry16.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry16))
    Entry17.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry17))
    Entry18.bind("<<ComboboxSelected>>", lambda event: ApplyStyle(Entry18))

    Entry1.bind("<FocusOut>", lambda event: ApplyStyle(Entry1))
    Entry2.bind("<FocusOut>", lambda event: ApplyStyle(Entry2))
    Entry3.bind("<FocusOut>", lambda event: ApplyStyle(Entry3))
    Entry4.bind("<FocusOut>", lambda event: ApplyStyle(Entry4))
    Entry5.bind("<FocusOut>", lambda event: ApplyStyle(Entry5))
    Entry6.bind("<FocusOut>", lambda event: ApplyStyle(Entry6))
    Entry7.bind("<FocusOut>", lambda event: ApplyStyle(Entry7))
    Entry8.bind("<FocusOut>", lambda event: ApplyStyle(Entry8))
    Entry9.bind("<FocusOut>", lambda event: ApplyStyle(Entry9))
    Entry10.bind("<FocusOut>", lambda event: ApplyStyle(Entry10))
    Entry11.bind("<FocusOut>", lambda event: ApplyStyle(Entry11))
    Entry12.bind("<FocusOut>", lambda event: ApplyStyle(Entry12))
    Entry13.bind("<FocusOut>", lambda event: ApplyStyle(Entry13))
    Entry14.bind("<FocusOut>", lambda event: ApplyStyle(Entry14))
    Entry15.bind("<FocusOut>", lambda event: ApplyStyle(Entry15))
    Entry16.bind("<FocusOut>", lambda event: ApplyStyle(Entry16))
    Entry17.bind("<FocusOut>", lambda event: ApplyStyle(Entry17))
    Entry18.bind("<FocusOut>", lambda event: ApplyStyle(Entry18))
    
    query = ("SELECT * FROM tblIssuesPRRabo WHERE ReviewID = '" + ReviewID + "' ORDER BY PRID DESC;")
    result = ViewQueryfun(ProDBPath, query)
    if len(result) > 0:
        Entry1.set(result[0][2])
        Entry2.set(result[0][3])
        Entry3.set(result[0][4])
        Entry4.set(result[0][5])
        Entry5.set(result[0][6])
        Entry6.set(result[0][7])
        Entry7.set(result[0][8])
        Entry8.set(result[0][9])
        Entry9.set(result[0][10])
        Entry10.set(result[0][11])
        Entry11.set(result[0][12])
        Entry12.set(result[0][13])
        Entry13.set(result[0][14])
        Entry14.set(result[0][15])
        Entry15.set(result[0][16])
        Entry16.set(result[0][17])
        Entry17.set(result[0][18])
        Entry18.set(result[0][19])
        Entry19.insert(1.0, result[0][20])
        Entry20.set(result[0][21])
        Entry21.insert(1.0, result[0][22])
    
    if Tname == 2 or T4Stage == 'Analysis' or Tname == 'Archive':
        if Tname == 'Archive':
            ActiveJobPage = False
        
        Button1.config(state='disabled')
        Button2.config(state='disabled')

    Label1.place(x=10, y=15)
    Label2.place(x=10, y=70)
    Label3.place(x=10, y=125)
    Label4.place(x=10, y=180)
    Label5.place(x=10, y=235)
    Label6.place(x=10, y=290)
    Label7.place(x=10, y=345)
    Label8.place(x=10, y=400)

    Label9.place(x=370+20, y=15)
    Label10.place(x=370+20, y=70)
    Label11.place(x=370+20, y=125)
    Label12.place(x=370+20, y=180)
    Label13.place(x=370+20, y=235)
    Label14.place(x=370+20, y=290)
    Label15.place(x=370+20, y=345)
    Label16.place(x=370+20, y=400)

    Label17.place(x=710+20, y=15)
    Label18.place(x=710+20, y=70)
    Label19.place(x=710+20, y=215)
    Label20.place(x=710+20, y=345)
    Label21.place(x=710+20, y=400)
    
    Entry1.place(x=200, y=15)
    Entry2.place(x=200, y=70)
    Entry3.place(x=200, y=125)
    Entry4.place(x=200, y=180)
    Entry5.place(x=200, y=235)
    Entry6.place(x=200, y=290)
    Entry7.place(x=200, y=345)
    Entry8.place(x=200, y=400)

    Entry9.place(x=560+20, y=15)
    Entry10.place(x=560+20, y=70)
    Entry11.place(x=560+20, y=125)
    Entry12.place(x=560+20, y=180)
    Entry13.place(x=560+20, y=235)
    Entry14.place(x=560+20, y=290)
    Entry15.place(x=560+20, y=345)
    Entry16.place(x=560+20, y=400)

    Entry17.place(x=900+20, y=15)
    Entry18.place(x=900+20, y=70)
    Entry19.place(x=900+20, y=125)
    Entry20.place(x=900+20, y=345)
    Entry21.place(x=900+20, y=395)

    Entry19_vsb = ttk.Scrollbar(Can5, orient="vertical", command=Entry19.yview)
    Entry19_vsb.place(x=1133, y=125, height=185)
    Entry19.configure(yscrollcommand=Entry19_vsb.set)

    Entry21_vsb = ttk.Scrollbar(Can5, orient="vertical", command=Entry21.yview)
    Entry21_vsb.place(x=1133, y=395, height=35)
    Entry21.configure(yscrollcommand=Entry21_vsb.set)

    def StatusSelected(event):
        TempStatus = Entry20.get()

        if TempStatus == "On Hold":
            Label21.config(text="Reason*")
            Entry21.config(state='normal')
            
        else:
            Label21.config(text="Reason")
            Entry21.delete(1.0, END)
            Entry21.config(state='disabled')
    
    Entry20.bind("<<ComboboxSelected>>", StatusSelected)
    Entry20.bind("<FocusOut>", StatusSelected)
    
    StatusSelected(Event)
    
    FTEList = [Entry1, Entry2, Entry3, Entry4, Entry5, Entry6, Entry7, Entry8, Entry9, Entry10, Entry11, Entry12, Entry13, Entry14, Entry15, Entry16, Entry17, Entry18]
    
    for e in FTEList:
        ApplyStyle(e)
        

def ViewIssuesRabo(IssueCan, ReviewID, Tname, Stage, RBCan, Timer1):
    
    Can2=Canvas(IssueCan,bg="white", width=1160, height=500, highlightthickness=0)
    Can2.place(x=10, y=40)

    StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

    global GeneralRabo_B, AnalysisRabo_B, PeerRabo_B

    GeneralRabo_B = Button(Can2, text="General", width=15, height=1, command=lambda:ViewGeneralRabo(Can2, ReviewID, Tname, RBCan),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')
    AnalysisRabo_B = Button(Can2, text="Analysis", width=15, height=1, command=lambda:ViewAnalysisRabo(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage=Stage),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')           
    PeerRabo_B = Button(Can2, text="Peer Reviewer", width=15, height=1, command=lambda:ViewPeerRabo(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage=Stage),bg="#006E8E",fg="white",font=("Calibri",10,"bold"),cursor='hand2')
    
    GeneralRabo_B.place(x=20, y=7)
    AnalysisRabo_B.place(x=150, y=7)
    PeerRabo_B.place(x=280, y=7)

    Timer1.start_clock(Can2)

    if Tname == 2:
        ViewAnalysisRabo(Can2, ReviewID, Tname, RBCan, StartTime, Timer1)
    elif Tname == 3:
        ViewPeerRabo(Can2, ReviewID, Tname, RBCan, StartTime, Timer1)
    elif Tname == 4:
        if Stage == 'Analysis':
            ViewAnalysisRabo(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = Stage)
        elif Stage == 'Peer Reviewer':
            ViewPeerRabo(Can2, ReviewID, Tname, RBCan, StartTime, Timer1, T4Stage = Stage)
    elif Tname == 'Archive':
        Timer1.hide_clock()
        ViewGeneralRabo(Can2, ReviewID, 'Archive', RBCan)

def SelectedIssueRabo(RBCan, ReviewID, Tname, Stage, Timer1):
    global NPTotalHours
    NPTotalHours = datetime.min
    
    IssueCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    IssueCan.place(x=5, y=40)

    ProjectLabel = Label(IssueCan, text="Rabo Bank",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)

    IssueLabel = Label(IssueCan, text=ReviewID + ' - ' + Stage, width=30,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    IssueLabel.place(x=500, y=5)
    
    if Tname == 'Archive':
        IssueLabel.config(text=ReviewID + ' - Review')
    
    ViewIssuesRabo(IssueCan, ReviewID, Tname, Stage, RBCan, Timer1)

########################################################## This is Work Queue Page for Rabo ########################################################
def WorkQueueRaboCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        WorkQueueRabo(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            WorkQueueRabo(RBCan, Timer1)

def WorkQueueRabo(RBCan, Timer1, Initial=''):

    global WorkQueueRabo_B, CreateRabo_B, AdminRabo_B, ArchiveRabo_B, UserStatsRabo_B

    WorkQueueRabo_B.config(bg='#E7E6E6')
    CreateRabo_B.config(bg='sky blue')
    AdminRabo_B.config(bg='sky blue')
    ArchiveRabo_B.config(bg='sky blue')
    UserStatsRabo_B.config(bg='sky blue')
        
    global NPTotalHours
    NPTotalHours = datetime.min
    
    ProjectsCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ProjectsCan.place(x=5, y=40)
    
    ProjectLabel = Label(ProjectsCan, text="Rabo Bank",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)

    def SelectOption():
        selection = Projects_Option.get()
        
        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        if selection == 1:
            Can1=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
            Can1.place(x=10, y=40)

            Label1 = Label(Can1, text="ANALYSIS",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label2 = Label(Can1, text="PEER REVIEW",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label3 = Label(Can1, text="ON HOLD",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            
            Label1.place(x=100, y=10)
            Label2.place(x=450, y=10)
            Label3.place(x=850, y=10)

            TVFrame2=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame2.place(x=1, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "COUNTRY", "ISSUE TYPE"]
            RBtree2 = MyTreeview(TVFrame2, columns=arrlbHeader, show="headings", height=22)
            
            RBtree2.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree2.heading("#1", text="REVIEW ID")
            RBtree2.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree2.heading("#2", text="DUE DATE")
            RBtree2.column("#3", anchor=tkinter.CENTER, width=80)
            RBtree2.heading("#3", text="STATUS")
            RBtree2.column("#4", anchor=tkinter.CENTER, width=128)
            RBtree2.heading("#4", text="ASSIGNED TO")
            RBtree2.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree2.heading("#5", text="COUNTRY")
            RBtree2.column("#6", anchor=tkinter.CENTER, width=160)
            RBtree2.heading("#6", text="ISSUE TYPE")

            arrSortType = ["num", "date", "name", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree2.column(arrlbHeader[iCount], stretch=True)

            TVFrame3=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame3.place(x=360, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "COUNTRY", "ISSUE TYPE"]
            RBtree3 = MyTreeview(TVFrame3, columns=arrlbHeader, show="headings", height=22)

            RBtree3.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree3.heading("#1", text="REVIEW ID")
            RBtree3.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree3.heading("#2", text="DUE DATE")
            RBtree3.column("#3", anchor=tkinter.CENTER, width=80)
            RBtree3.heading("#3", text="STATUS")
            RBtree3.column("#4", anchor=tkinter.CENTER, width=128)
            RBtree3.heading("#4", text="ASSIGNED TO")
            RBtree3.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree3.heading("#5", text="COUNTRY")
            RBtree3.column("#6", anchor=tkinter.CENTER, width=160)
            RBtree3.heading("#6", text="ISSUE TYPE")

            arrSortType = ["num", "date", "name", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree3.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree3.column(arrlbHeader[iCount], stretch=True)

            TVFrame4=Frame(Can1, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame4.place(x=720, y=40, width=430, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "ASSIGNED TO", "STAGE", "COUNTRY", "ISSUE TYPE"]
            RBtree4 = MyTreeview(TVFrame4, columns=arrlbHeader, show="headings", height=22)

            RBtree4.column("#1", anchor=tkinter.CENTER, width=65)
            RBtree4.heading("#1", text="REVIEW ID")
            RBtree4.column("#2", anchor=tkinter.CENTER, width=65)
            RBtree4.heading("#2", text="DUE DATE")
            RBtree4.column("#3", anchor=tkinter.CENTER, width=75)
            RBtree4.heading("#3", text="STATUS")
            RBtree4.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#4", text="ASSIGNED TO")
            RBtree4.column("#5", anchor=tkinter.CENTER, width=100)
            RBtree4.heading("#5", text="STAGE")
            RBtree4.column("#6", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#6", text="COUNTRY")
            RBtree4.column("#7", anchor=tkinter.CENTER, width=160)
            RBtree4.heading("#7", text="ISSUE TYPE")

            arrSortType = ["num", "date", "name", "name", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree4.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree4.column(arrlbHeader[iCount], stretch=True)

            RBtree2.place(x=0, y=0, height=445, width=340)
            RBtree3.place(x=0, y=0, height=445, width=340)
            RBtree4.place(x=0, y=0, height=445, width=425)
            
            Allworks_vsb2 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree2.yview)
            Allworks_vsb2.place(x=340, y=40, height=460)
            RBtree2.configure(yscrollcommand=Allworks_vsb2.set)

            Allworks_hsb2 = ttk.Scrollbar(TVFrame2, orient="horizontal", command=RBtree2.xview)
            Allworks_hsb2.place(x=0, y=445, width=340)
            RBtree2.configure(xscrollcommand=Allworks_hsb2.set)

            Allworks_vsb3 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree3.yview)
            Allworks_vsb3.place(x=700, y=40, height=460)
            RBtree3.configure(yscrollcommand=Allworks_vsb3.set)

            Allworks_hsb3 = ttk.Scrollbar(TVFrame3, orient="horizontal", command=RBtree3.xview)
            Allworks_hsb3.place(x=0, y=445, width=340)
            RBtree3.configure(xscrollcommand=Allworks_hsb3.set)

            Allworks_vsb4 = ttk.Scrollbar(Can1, orient="vertical", command=RBtree3.yview)
            Allworks_vsb4.place(x=1145, y=40, height=460)
            RBtree4.configure(yscrollcommand=Allworks_vsb4.set)

            Allworks_hsb4 = ttk.Scrollbar(TVFrame4, orient="horizontal", command=RBtree4.xview)
            Allworks_hsb4.place(x=0, y=445, width=425)
            RBtree4.configure(xscrollcommand=Allworks_hsb4.set)
            
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Country, IssueType FROM tblIssuesMainRabo as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM');""",RBtree2)
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Country, IssueType FROM tblIssuesMainRabo as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM');""",RBtree3)
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage, Country, IssueType FROM tblIssuesMainRabo as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID
                            WHERE Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM' );""",RBtree4)

            def OnClick(event, treename, Tname):
                item = treename.selection()
                StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')

                for i in item:
                    Status = treename.item(i, "values")[2]
                    ReviewID = treename.item(i, "values")[0]

                    if Tname == 2:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Analysis"
                        TblName = 'Analysis'
                        AccessLevel = 'Analyst'

                        PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        if len(PreLevelCheck) > 0:
                            PreLevelUser = PreLevelCheck[0][0]
                        else:
                            PreLevelUser = ''

                    elif Tname == 3:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                        
                        Stage = "Peer Reviewer"
                        TblName = 'PR'
                        AccessLevel = 'PR'

                        PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                        
                        if len(PreLevelCheck) > 0:
                            PreLevelUser = PreLevelCheck[0][0]
                        else:
                            PreLevelUser = ''

                    elif Tname == 4:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM' ) AND A.ReviewID = """ + ReviewID + ";")

                        Stage = treename.item(i, "values")[4]

                        if Stage == 'Analysis':
                            AccessLevel = 'Analyst'

                            PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B WHERE Stage = 'Peer Reviewer' AND Status IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage = 'Peer Reviewer' AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                            
                            if len(PreLevelCheck) > 0:
                                PreLevelUser = PreLevelCheck[0][0]
                            else:
                                PreLevelUser = ''

                        elif Stage == 'Peer Reviewer':
                            AccessLevel = 'PR'

                            PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B WHERE Stage = 'Analysis' AND Status IN ('On Hold', 'RM') GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID
                                                        WHERE Stage = 'Analysis' AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")
                            
                            if len(PreLevelCheck) > 0:
                                PreLevelUser = PreLevelCheck[0][0]
                            else:
                                PreLevelUser = ''                        

                    if len(CrossCheck) == 0:
                        messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                        WorkQueueRabo(RBCan, Timer1)
                    else:
                        if CrossCheck[0][0] == treename.item(i, "values")[0] and CrossCheck[0][1] == treename.item(i, "values")[1] and CrossCheck[0][2] == treename.item(i, "values")[2] and CrossCheck[0][3] == treename.item(i, "values")[3] and CrossCheck[0][4] == Stage:

                                if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                                    if PreLevelUser != Var_UserID:

                                        if Status == 'Unassigned' or Status == 'Revert Back' or (Status == 'Assigned' and treename.item(i, "values")[3] == Var_UserName):
                                            query = ("SELECT MAX(IssueID) FROM tblIssuesGenRabo WHERE ReviewID = '" + ReviewID + "';")
                                            IssueID = SelectQueryfun(ProDBPath, query)
                                            EntryStatus = 'In Process'
                                            Status = 'In Process'
                                            
                                            Record = (TblName, IssueID[0], ReviewID, Var_UserName, Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(datetime.min, '%H:%M:%S'), Stage)
                                            UpdateQueryfun(ProDBPath,"INSERT INTO tblIssuesStatusRabo (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

                                            Record = (Var_UserName, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                                            query = ("""UPDATE tblIssuesMainRabo SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                                            UpdateQueryfun(ProDBPath, query, Record)
                                            
                                            SelectedIssueRabo(RBCan, ReviewID, Tname, Stage, Timer1)
                                        
                                        elif treename.item(i, "values")[3] != Var_UserName:
                                            messagebox.showerror('Validation Check','This Review ID is already assigned to some one else, Please refresh and try again!')
                                            WorkQueueRabo(RBCan, Timer1)

                                        else:
                                            SelectedIssueRabo(RBCan, ReviewID, Tname, Stage, Timer1)

                                    else:
                                        messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")

                                else:
                                    messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                        
                        else:
                            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                            WorkQueueRabo(RBCan, Timer1)
            
            RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2, Tname=2))
            RBtree3.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree3, Tname=3))
            RBtree4.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree4, Tname=4))

        elif selection == 2:
            Can2=Canvas(ProjectsCan,bg="white", width=1160, height=500, highlightthickness=0)
            Can2.place(x=10, y=40)
            
            Label1 = Label(Can2, text="ANALYSIS",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label2 = Label(Can2, text="PEER REVIEW",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            Label3 = Label(Can2, text="ON HOLD",width=15,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"))
            
            Label1.place(x=100, y=10)
            Label2.place(x=450, y=10)
            Label3.place(x=850, y=10)

            TVFrame2=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame2.place(x=1, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "COUNTRY", "ISSUE TYPE"]
            RBtree2 = MyTreeview(TVFrame2, columns=arrlbHeader, show="headings", height=22)

            RBtree2.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree2.heading("#1", text="REVIEW ID")
            RBtree2.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree2.heading("#2", text="DUE DATE")
            RBtree2.column("#3", anchor=tkinter.CENTER, width=150)
            RBtree2.heading("#3", text="STATUS")
            RBtree2.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree2.heading("#4", text="COUNTRY")
            RBtree2.column("#5", anchor=tkinter.CENTER, width=160)
            RBtree2.heading("#5", text="ISSUE TYPE")

            arrSortType = ["num", "date", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree2.column(arrlbHeader[iCount], stretch=True)

            TVFrame3=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame3.place(x=360, y=40, width=340, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "COUNTRY", "ISSUE TYPE"]
            RBtree3 = MyTreeview(TVFrame3, columns=arrlbHeader, show="headings", height=22)

            RBtree3.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree3.heading("#1", text="REVIEW ID")
            RBtree3.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree3.heading("#2", text="DUE DATE")
            RBtree3.column("#3", anchor=tkinter.CENTER, width=150)
            RBtree3.heading("#3", text="STATUS")
            RBtree3.column("#4", anchor=tkinter.CENTER, width=120)
            RBtree3.heading("#4", text="COUNTRY")
            RBtree3.column("#5", anchor=tkinter.CENTER, width=160)
            RBtree3.heading("#5", text="ISSUE TYPE")

            arrSortType = ["num", "date", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree3.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree3.column(arrlbHeader[iCount], stretch=True)
            
            TVFrame4=Frame(Can2, bg='white', highlightbackground="black", highlightthickness=0, borderwidth = 0, relief=FLAT)
            TVFrame4.place(x=720, y=40, width=430, height=460)

            arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "STAGE", "COUNTRY", "ISSUE TYPE"]
            RBtree4 = MyTreeview(TVFrame4, columns=arrlbHeader, show="headings", height=22)

            RBtree4.column("#1", anchor=tkinter.CENTER, width=90)
            RBtree4.heading("#1", text="REVIEW ID")
            RBtree4.column("#2", anchor=tkinter.CENTER, width=100)
            RBtree4.heading("#2", text="DUE DATE")
            RBtree4.column("#3", anchor=tkinter.CENTER, width=140)
            RBtree4.heading("#3", text="STATUS")
            RBtree4.column("#4", anchor=tkinter.CENTER, width=115)
            RBtree4.heading("#4", text="STAGE")
            RBtree4.column("#5", anchor=tkinter.CENTER, width=120)
            RBtree4.heading("#5", text="COUNTRY")
            RBtree4.column("#6", anchor=tkinter.CENTER, width=160)
            RBtree4.heading("#6", text="ISSUE TYPE")

            arrSortType = ["num", "date", "name", "name", "name", "name"]
            for iCount in range(len(arrlbHeader)):
                strHdr = arrlbHeader[iCount]
                RBtree4.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
                RBtree4.column(arrlbHeader[iCount], stretch=True)
            
            RBtree2.place(x=0, y=0, height=445, width=340)
            RBtree3.place(x=0, y=0, height=445, width=340)
            RBtree4.place(x=0, y=0, height=445, width=425)

            Myworks_vsb2 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree2.yview)
            Myworks_vsb2.place(x=340, y=40, height=460)
            RBtree2.configure(yscrollcommand=Myworks_vsb2.set)

            Myworks_hsb2 = ttk.Scrollbar(TVFrame2, orient="horizontal", command=RBtree2.xview)
            Myworks_hsb2.place(x=0, y=445, width=340)
            RBtree2.configure(xscrollcommand=Myworks_hsb2.set)

            Myworks_vsb3 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree3.yview)
            Myworks_vsb3.place(x=700, y=40, height=460)
            RBtree3.configure(yscrollcommand=Myworks_vsb3.set)

            Myworks_hsb3 = ttk.Scrollbar(TVFrame3, orient="horizontal", command=RBtree3.xview)
            Myworks_hsb3.place(x=0, y=445, width=340)
            RBtree3.configure(xscrollcommand=Myworks_hsb3.set)

            Myworks_vsb4 = ttk.Scrollbar(Can2, orient="vertical", command=RBtree3.yview)
            Myworks_vsb4.place(x=1145, y=40, height=460)
            RBtree4.configure(yscrollcommand=Myworks_vsb4.set)

            Myworks_hsb4 = ttk.Scrollbar(TVFrame4, orient="horizontal", command=RBtree4.xview)
            Myworks_hsb4.place(x=0, y=445, width=425)
            RBtree4.configure(xscrollcommand=Myworks_hsb4.set)
            
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Country, IssueType, Assignee FROM tblIssuesMainRabo as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM');""",RBtree2)
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Country, IssueType, Assignee FROM tblIssuesMainRabo as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'Unassigned', 'RM');""",RBtree3)
            ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Country, IssueType, Assignee FROM tblIssuesMainRabo as A 
                            INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                            ON A.ReviewID = G.ReviewID 
                            WHERE G.Assignee = '""" + Var_UserName + """' AND Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM');""",RBtree4)

            def OnClick(event, treename, Tname):
                item = treename.selection()
                StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
                for i in item:
                    Status = treename.item(i, "values")[2]
                    ReviewID = treename.item(i, "values")[0]
                    query = ("SELECT MAX(IssueID) FROM tblIssuesGenRabo WHERE ReviewID = '" + ReviewID + "';")
                    IssueID = SelectQueryfun(ProDBPath, query)
                                       
                    if Tname == 2:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Analysis' AND Status NOT IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Analysis"
                        TblName = 'Analysis'
                    elif Tname == 3:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE Assignee = '""" + Var_UserName + """' AND Stage = 'Peer Reviewer' AND Status NOT IN ('On Hold', 'Unassigned', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = "Peer Reviewer"
                        TblName = 'PR'
                    elif Tname == 4:
                        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainRabo as A 
                                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                                                        ON A.ReviewID = G.ReviewID 
                                                        WHERE G.Assignee = '""" + Var_UserName + """' AND Stage IN ('Analysis', 'Peer Reviewer') AND Status IN ('On Hold', 'RM') AND A.ReviewID = """ + ReviewID + ";")

                        Stage = treename.item(i, "values")[3]


                    if len(CrossCheck) == 0:
                        messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                        WorkQueueRabo(RBCan, Timer1)
                    else:
                        if CrossCheck[0][0] == treename.item(i, "values")[0] and CrossCheck[0][1] == treename.item(i, "values")[1] and CrossCheck[0][2] == treename.item(i, "values")[2] and CrossCheck[0][3] == Stage and CrossCheck[0][4] == Var_UserName:
                    
                            if Status == 'Assigned':
                                EntryStatus = 'In Process'
                                Status = 'In Process'
                                Record = (TblName, IssueID[0], ReviewID, Var_UserName, Var_UserID, datetime.now().strftime('%d-%m-%Y'), StartTime, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), EntryStatus, Status, Stage, datetime.strftime(datetime.min, '%H:%M:%S'), Stage)
                                UpdateQueryfun(ProDBPath,"INSERT INTO tblIssuesStatusRabo (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

                                Record = (Var_UserName, Status, Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), ReviewID)
                                query = ("""UPDATE tblIssuesMainRabo SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
                                UpdateQueryfun(ProDBPath, query, Record)

                                SelectedIssueRabo(RBCan, ReviewID, Tname, Stage, Timer1)
                            else:
                                SelectedIssueRabo(RBCan, ReviewID, Tname, Stage, Timer1)

                        else:
                            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                            WorkQueueRabo(RBCan, Timer1)
                    
                    
            RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2, Tname=2))
            RBtree3.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree3, Tname=3))
            RBtree4.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree4, Tname=4))
    
    Projects_Option = IntVar()
    R1 = Radiobutton(ProjectsCan, text="All Works", variable=Projects_Option, value=1,command=SelectOption, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    R2 = Radiobutton(ProjectsCan, text="My Works", variable=Projects_Option, value=2,command=SelectOption, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    Projects_Option.set(2)
    SelectOption()

    R1.place(x=500, y=5)
    R2.place(x=700, y=5)

    Button1 = Button(ProjectsCan, text="Refresh", width=12, height=1, command=lambda:WorkQueueRabo(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button1.place(x=1000, y=5)

########################################################## This is Admin Page for Rabo ########################################################
def AdminRaboCheck(RBCan):
    global ActiveJobPage
    if ActiveJobPage == False:
        AdminRabo(RBCan)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            AdminRabo(RBCan)

def AdminRabo(RBCan):

    global WorkQueueRabo_B, CreateRabo_B, AdminRabo_B, ArchiveRabo_B, UserStatsRabo_B
    
    if Var_Admin != 'Yes':
        messagebox.showerror('No Access','You have no admin access, please contact your team leader!')
        return False
    else:
        WorkQueueRabo_B.config(bg='sky blue')
        CreateRabo_B.config(bg='sky blue')
        AdminRabo_B.config(bg='#E7E6E6')
        ArchiveRabo_B.config(bg='sky blue')
        UserStatsRabo_B.config(bg='sky blue')

        global ActiveDashboard
        ActiveDashboard = False

        AdminCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
        AdminCan.place(x=5, y=40)
        
        ProjectLabel = Label(AdminCan, text="Rabo Bank",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
        ProjectLabel.place(x=40, y=5)
        
        def AdminRawReports():
            ReportPath = fd.askdirectory(title='Select Folder Path')
            if ReportPath != '':
                TempPath = ReportPath + r"/RaboBank Raw Data Report " + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsx"
                writer = pd.ExcelWriter(TempPath)
                conn = sqlite3.connect(ProDBPath)
                query1 = "SELECT * FROM tblIssuesMainRabo"
                query2 = "SELECT * FROM tblIssuesGenRabo"
                query3 = "SELECT * FROM tblIssuesAnaRabo"
                query4 = "SELECT * FROM tblIssuesPRRabo"
                query5 = "SELECT * FROM tblIssuesReopenRabo"
                query6 = "SELECT * FROM tblIssuesStatusRabo"
                query7 = "SELECT * FROM tblNonPro"
                queries = [query1, query2, query3, query4, query5, query6, query7]
                Excelsheets = ['Main', 'General', 'Analysis', 'Peer Reviewer', 'Reopen', 'Production', 'Non Production']
                
                writer = pd.ExcelWriter(TempPath, engine = 'xlsxwriter')
                for q in queries:
                    df = pd.read_sql_query(q, conn)
                    df.to_excel(writer, sheet_name=Excelsheets[queries.index(q)], index=False)
                conn.close()
                writer.save()
                
                messagebox.showinfo('Rabo Admin Report','Rabo Raw Data Report Exported!')
                startfile(TempPath)
            else:
                messagebox.showerror('Folder Validation','Folder Path Not Selected!')

        def Billing_Validate_Clear():
            LabelList = [Label7, Label8]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='white')

        def Billing_Validate_Submit():
            Billing_Validate_Clear()

            DateLabelList = [Label7, Label8]
            DateEntryList = [Entry7, Entry8]

            if Entry7.get() == '' or Entry8.get() == '':
                messagebox.showerror('Validation Check','Start/End Date should not be left blank!')
                return False
            else:
                Submit = True
                for i in range(0,len(DateEntryList)):
                    if DateEntryList[i].get() != '':
                        result = Date_Validation2(DateEntryList[i])
                        if result == 'Failed':
                            DateLabelList[i].config(foreground='red')
                            DateEntryList[i].focus_set()
                            messagebox.showerror('Date Error','This typed date is not valid! Please check')
                            Submit = False
                            break
                            return false

            if Entry7.get_date() > Entry8.get_date():
                messagebox.showerror('Validation Check','Start Date should not be greater than End Date!')
                return False

            if Submit:
                BillingReports()

        def BillingReports():
            BStartDate = pd.to_datetime(Entry7.get() + ' 00:00:00', format='%d-%m-%Y %H:%M:%S')
            BEndDate = pd.to_datetime(Entry8.get() + ' 23:59:00', format='%d-%m-%Y %H:%M:%S')

            ReportPath = fd.askdirectory(title='Select Folder Path')
            if ReportPath != '':
                conn = sqlite3.connect(ProDBPath)
                query1 = "SELECT * FROM tblIssuesMainRabo;"
                query2 = "SELECT * FROM tblIssuesAnaRabo;"
                queries = [query1, query2]
                for q in queries:
                    df = pd.read_sql_query(q, conn)
                    if queries.index(q) == 0:
                        df_Main = df
                    elif queries.index(q) == 1:
                        df_Ana = df
                    
                conn.close()
                
                df_Main_Completed = pd.DataFrame(df_Main.loc[((df_Main['CurStatus']=='Completed') | (df_Main['CurStatus']=='Cancelled-Billable')) & (df_Main['CurStage']=='Job Completed')])
                df_Main_Completed['UpdatedTime']=pd.to_datetime(df_Main_Completed['UpdatedTime'], format='%d-%m-%Y %H:%M:%S')
                df_Main_Completed = df_Main_Completed.loc[(df_Main_Completed['UpdatedTime']>=BStartDate) & (df_Main_Completed['UpdatedTime']<=BEndDate)]

                df_Main_Completed['OrderID'] = df_Main_Completed['CostCentre'] + ' - ' + df_Main_Completed['Department']
                df_Main_Completed['InvoiceHeader'] = df_Main_Completed['UpdatedTime'].dt.year.astype(str) + df_Main_Completed['UpdatedTime'].dt.strftime('%m').astype(str) + ' - KYC Services - ' + df_Main_Completed['ClientContact']
                
                df_Main_Completed['UpdatedTime'] = df_Main_Completed['UpdatedTime'].dt.strftime('%d-%m-%Y %H:%M:%S')
                df_Main_Completed['ReviewID'] = pd.to_numeric(df_Main_Completed['ReviewID'])
                
                df_Ana_Latest= df_Ana.sort_values(['AnalysisID','ReviewID'], ascending=False)
                df_Ana_Latest = df_Ana_Latest[df_Ana_Latest.duplicated(subset=['ReviewID'])==False]

                df_Ana_Latest = df_Ana_Latest[['ReviewID', 'DocCost']]
                df_Ana_Latest['DocCost'] = pd.to_numeric(df_Ana_Latest['DocCost'])
                df_Main_Completed_Final = df_Main_Completed.merge(df_Ana_Latest, left_on=['ReviewID'], right_on=['ReviewID'], how='left')
                df_Main_Completed_Final.drop(['Documents', 'Comments', 'CurAssignee', 'CurStatus', 'CurStage', 'UpdatedBy'], axis = 1, inplace=True)
                df_Main_Completed_Final = df_Main_Completed_Final[['IssueID', 'ProjectName', 'IssueType', 'ReviewID', 'EntityName', 'Country', 'Priority', 'DateReceived', 'DueDate', 'UpdatedTime', 'BankNr', 'BankNrID', 'CostCentre', 'Department', 'ClientContact', 'BillingTime', 'DocCost', 'OrderID', 'InvoiceHeader']]

                df_Main_Completed_Doc = df_Main_Completed_Final.loc[(df_Main_Completed_Final['DocCost'] != 0)]
                pd.options.mode.chained_assignment = None
                df_Main_Completed_Doc['EntityName'] = df_Main_Completed_Doc['EntityName'] + ' - Documentenkosten'
                
                df_Main_Completed_Final = df_Main_Completed_Final.append(df_Main_Completed_Doc, ignore_index=True)

                df_Support = pd.DataFrame({'Category':['Order Date', 'Start Date', 'End Date'],
                                            'Date':[datetime.today().strftime('%d/%m/%Y'), Entry7.get_date().strftime('%d/%m/%Y'), Entry8.get_date().strftime('%d/%m/%Y')]})
                
                TemplatePath = r"xlsm"
                NewFilePath = ReportPath + r"\Sales Order - Rabobank - " + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsm"
                shutil.copy(TemplatePath, NewFilePath)
                book = openpyxl.load_workbook(NewFilePath, keep_vba=True)
                writer = pd.ExcelWriter(NewFilePath, engine='openpyxl')
                writer.book = book
                writer.sheets = {ws.title: ws for ws in book.worksheets}
                df_Main_Completed_Final.to_excel(writer, sheet_name='Summary', startrow=writer.sheets['Summary'].max_row, index = False,header= False)
                df_Support.to_excel(writer, sheet_name='Lookup - Support', startrow=writer.sheets['Lookup - Support'].max_row, index = False,header= False)
                writer.save()

                wb1 = openpyxl.load_workbook(NewFilePath, keep_vba=True)
                ws1 = wb1.worksheets[1]
                ws2 = wb1.worksheets[0]
                                
                mr = ws1.max_row
                                
                for i in range (2, mr + 1):
                    c = ws1.cell(row = i, column = 5)
            
                    ws2.cell(row = i+4, column = 21).value = c.value
                
                wb1.save(str(NewFilePath))

                messagebox.showinfo('RaboBank Billing Data','RaboBank Billing Report Exported!')
                startfile(NewFilePath)
                
            else:
                messagebox.showerror('Folder Validation','Folder Path Not Selected!')

        def Validate_Clear():
            LabelList = [Label1, Label2, Label2_1, Label2_2, Label3, Label4, Label5, Label6]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='white')

        def Validate_Submit():
            Validate_Clear()
            global Entry4_Values, Entry3_Values, Entry5_Values

            AllLabelList = [Label2_1, Label2_2, Label3, Label4, Label5]
            AllEntryList = [Entry2_1, Entry2_2, Entry3, Entry4, Entry5]
            AllEntryValues = [Entry2_1_Values, Entry2_2_Values, Entry3_Values, Entry4_Values, Entry5_Values]
            AllEntryMessage = [Entry2_1_msg, Entry2_2_msg, Entry3_msg, Entry4_msg, Entry5_msg]

            DateLabelList = [Label2]
            DateEntryList = [Entry2]

            Submit = True

            if Entry1.get() == '' or Entry2.get() == '' or Entry2_1.get() == '' or Entry2_2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False

            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='orange')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        return False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='orange')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        return False
                        break
            
            item = RBtree2.selection()
            for i in item:
                TreeReviewID = RBtree2.item(i, "values")[0]
                TreeStage = RBtree2.item(i, "values")[4]
                
            if TreeStage == 'Analysis':
                AccessLevel = 'Analyst'

                PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRabo as A 
                                            INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B WHERE Stage = 'Peer Reviewer' GROUP BY B.ReviewID) as G
                                            ON A.ReviewID = G.ReviewID
                                            WHERE Stage = 'Peer Reviewer' AND A.ReviewID = """ + TreeReviewID + ";")
                
                if len(PreLevelCheck) > 0:
                    PreLevelUser = PreLevelCheck[0][0]
                else:
                    PreLevelUser = ''

            elif TreeStage == 'Peer Reviewer':
                AccessLevel = 'PR'

                PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRabo as A 
                                            INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B WHERE Stage = 'Analysis' GROUP BY B.ReviewID) as G
                                            ON A.ReviewID = G.ReviewID
                                            WHERE Stage = 'Analysis' AND A.ReviewID = """ + TreeReviewID + ";")
                
                if len(PreLevelCheck) > 0:
                    PreLevelUser = PreLevelCheck[0][0]
                else:
                    PreLevelUser = ''                        

            CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, Assignee, Stage FROM tblIssuesMainRabo as A 
                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                                        ON A.ReviewID = G.ReviewID
                                        WHERE A.ReviewID = """ + TreeReviewID + ";")

            if len(CrossCheck) == 0:
                messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                AdminRabo(RBCan)
                return False
            else:
                if CrossCheck[0][0] == RBtree2.item(i, "values")[0] and CrossCheck[0][2] == RBtree2.item(i, "values")[2] and CrossCheck[0][4] == RBtree2.item(i, "values")[4] and CrossCheck[0][3] == RBtree2.item(i, "values")[5]:

                        if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                            NewUser = SelectQueryfun(SupportDBPath,"SELECT UserID FROM tblUserAccess WHERE EmpName = '" + Entry5.get() + "';")
                            if PreLevelUser != NewUser[0]:
                                Submit = True

                            else:
                                Submit = False
                                messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")
                                return False

                        else:
                            Submit = False
                            messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                            return False
                
                else:
                    Submit = False
                    messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                    return False
        
            if Submit:
                SubmitAdminRabo()

        def SubmitAdminRabo():
            
            global NPTotalHours
            NPTotalHours = datetime.min
            
            Stage = Entry4.get()
            
            if Stage == "Rejected":
                Stage = "Analysis"

            if Entry3.get() == "Cancelled" or Entry3.get() == "Cancelled-Billable":
                Stage = "Job Completed"

            Record = ('Admin', 0, Entry1.get(), Entry5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry3.get(), Entry3.get(), Stage, datetime.strftime(NPTotalHours, '%H:%M:%S'), Entry6.get(1.0, END).strip(), Stage)
            UpdateQueryfun(ProDBPath,"INSERT INTO tblIssuesStatusRabo (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, AdminComments, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

            Record = (Entry5.get(), Entry3.get(), Stage, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
            query = ("""UPDATE tblIssuesMainRabo SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
            UpdateQueryfun(ProDBPath, query, Record)

            NPTotalHours = datetime.min
            messagebox.showinfo('Completed','Data Updated Successfully!')
            
            Cancel()
            AdminRabo(RBCan)

        def Cancel():
            Validate_Clear()
            Entry1.config(state='normal')
            Entry1.delete(0, END)
            Entry1.config(state='disabled')
            
            Entry2.config(state='normal')
            Entry2_1.config(state='normal')
            Entry2_2.config(state='normal')
            Entry2.delete(0, END)
            Entry2_1.delete(0, END)
            Entry2_2.delete(0, END)
            Entry2.config(state='disabled')
            Entry2_1.config(state='disabled')
            Entry2_2.config(state='disabled')

            Entry3.delete(0, END)
            Entry4.delete(0, END)
            Entry5.delete(0, END)
            Entry6.delete(1.0, END)

        Label1 = Label(AdminCan, text="Review ID*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label2_0 = Label(AdminCan, text="dd/mm/yyyy",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
        Label2 = Label(AdminCan, text="Due Date*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label2_1 = Label(AdminCan, text="HH",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
        Label2_1_1 = Label(AdminCan, text=":",width=2,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"bold"))
        Label2_2 = Label(AdminCan, text="MM",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
     
        Label4 = Label(AdminCan, text="Stage*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label3 = Label(AdminCan, text="Status*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label5 = Label(AdminCan, text="Assigned To*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        Label6 = Label(AdminCan, text="Comments",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
        
        Ad_Var_Entry1 = StringVar()
        Ad_Var_Entry2 = StringVar()
        Ad_Var_Entry2_1 = StringVar()
        Ad_Var_Entry2_2 = StringVar()
        
        Entry1 = Entry(AdminCan, textvariable=Ad_Var_Entry1, bg="white",font=("Calibri",10))
        Entry1.config(state='disabled')
                
        Entry2 = DateEntry(AdminCan,textvariable=Ad_Var_Entry2,width=11,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
        Entry2.delete(0, END)
        
        Entry2_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
        Entry2_1 = Entry(AdminCan,validate='key',textvariable=Ad_Var_Entry2_1,bg="white",font=("Calibri",10),width=2)
        Entry2_1['validatecommand'] = (Entry2_1.register(AcceptNum),'%P','%d')
        Entry2_1_msg = 'This typed hour is not correct, please check!'
        
        Entry2_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
        Entry2_2 = Entry(AdminCan,validate='key',textvariable=Ad_Var_Entry2_2,bg="white",font=("Calibri",10),width=2)
        Entry2_2['validatecommand'] = (Entry2_2.register(AcceptNum),'%P','%d')
        Entry2_2_msg = 'This typed minute is not correct, please check!'
        
        Entry2.config(state='disabled')
        Entry2_1.config(state='disabled')
        Entry2_2.config(state='disabled')
                
        def CheckStage(event):
            global Entry4_Values, Entry3_Values, Entry5_Values
            Entry3.config(state='normal')
            Entry3.delete(0, END)
            Entry5.config(state='normal')
            Entry5.delete(0, END)
            if Entry4.get() == "Rejected":
                Entry3.insert(0, 'Assigned')
                Entry3.config(state='disabled')

                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Entry4.get() == "Analysis":
                Entry3_Values = ['Assigned', 'In Process', 'On Hold', 'Cancelled', 'Cancelled-Billable']
                Entry3.config(completevalues=Entry3_Values)

                Entry4_Values= ['Analysis', 'Rejected']
                Entry4.config(completevalues=Entry4_Values)

                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            elif Entry4.get() == "Peer Reviewer":
                Entry3_Values = ['Assigned', 'In Process', 'On Hold']
                Entry3.config(completevalues=Entry3_Values)

                Entry4_Values= ['Peer Reviewer', 'Rejected']
                Entry4.config(completevalues=Entry4_Values)
                
                Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and PeerReviewer = 'Yes' ORDER BY EmpName ASC;")
                Entry5.config(completevalues=Entry5_Values)

            else:
                Entry3.config(state='normal')
                Entry5.config(state='normal')

        global Entry4_Values, Entry3_Values, Entry5_Values
        Entry4_Values= ['Analysis', 'Peer Reviewer', 'Rejected']
        Entry4 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry4_Values)
        Entry4_msg = 'This typed Stage is not available in the list, please check!'
        Entry4.bind("<FocusOut>", lambda event: CheckStage(event))
        Entry4.bind("<<ComboboxSelected>>", lambda event: CheckStage(event))

        Entry3_Values = ['Assigned', 'In Process', 'On Hold', 'Cancelled', 'Cancelled-Billable']
        Entry3 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry3_Values)
        Entry3_msg = 'This typed Status is not available in the list, please check!'
        
        Entry5_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' ORDER BY EmpName ASC;")
        Entry5 = AutocompleteCombobox(AdminCan, width=23, completevalues=Entry5_Values)
        Entry5_msg = 'This typed Name is not available in the list, please check!'
        
        Entry6 = Text(AdminCan,bg="white",font=("Calibri",10),width=30,height=3)
        Entry6.bind('<Tab>', lambda event: focusNext(Entry6))
        Entry6.bind('<Shift-Tab>', lambda event: focusPrev(Entry6))

        Label1.place(x=780, y=70)
        Label2_0.place(x=900, y=100)
        Label2.place(x=780, y=120)
        Label2_1.place(x=1002, y=100)
        Label2_2.place(x=1032, y=100)

        Label4.place(x=780, y=170)
        Label3.place(x=780, y=220)
        Label5.place(x=780, y=270)
        Label6.place(x=780, y=330)

        Entry1.place(x=920, y=70)
        Entry2.place(x=920, y=120)
        Entry2_1.place(x=1010, y=120)
        Label2_1_1.place(x=1025, y=120)
        Entry2_2.place(x=1040, y=120)
        
        Entry4.place(x=920, y=170, width=145)
        Entry3.place(x=920, y=220, width=145)
        Entry5.place(x=920, y=270, width=145)
        Entry6.place(x=920, y=320)
        
        Button2 = Button(AdminCan, text="Submit", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button2.place(x=750, y= 400)
        Button3 = Button(AdminCan, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button3.place(x=850, y= 400)
        Button1 = Button(AdminCan, text="Refresh", width=12, height=1, command=lambda:AdminRabo(RBCan),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button1.place(x=950, y=400)

        Button4 = Button(AdminCan, text="Raw Report", width=12, height=1, command=lambda:AdminRawReports(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button4.place(x=1050, y=400)

        Label7 = Label(AdminCan, text="Start Date*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
        Label8 = Label(AdminCan, text="End Date*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')

        today = date.today()
        Entry7 = DateEntry(AdminCan,width=11,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy', maxdate=today)
        Entry7.delete(0, END)
        Label7.place(x=780, y=445)
        Entry7.place(x=780, y=470)
                
        Entry8 = DateEntry(AdminCan,width=11,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy', maxdate=today)
        Entry8.delete(0, END)
        Label8.place(x=890, y=445)
        Entry8.place(x=890, y=470)
        
        Button5 = Button(AdminCan, text="Billing Report", width=12, height=1, command=lambda:Billing_Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        Button5.place(x=1000, y=467)

        arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "LAST ENTRY TIME", "STAGE", "ASSIGNED TO"]
        RBtree2 = MyTreeview(AdminCan, columns=arrlbHeader, show="headings", height=24)

        RBtree2.column("#1", anchor=tkinter.CENTER, width=80)
        RBtree2.heading("#1", text="REVIEW ID")
        RBtree2.column("#2", anchor=tkinter.CENTER, width=100)
        RBtree2.heading("#2", text="DUE DATE")
        RBtree2.column("#3", anchor=tkinter.CENTER, width=90)
        RBtree2.heading("#3", text="STATUS")
        RBtree2.column("#4", anchor=tkinter.CENTER, width=150)
        RBtree2.heading("#4", text="LAST ENTRY TIME")
        RBtree2.column("#5", anchor=tkinter.CENTER, width=110)
        RBtree2.heading("#5", text="STAGE")
        RBtree2.column("#6", anchor=tkinter.CENTER, width=140)
        RBtree2.heading("#6", text="ASSIGNED TO")

        arrlbHeader = ["REVIEW ID", "DUE DATE", "STATUS", "STAGE", "ASSIGNED TO"]
        arrSortType = ["num", "date", "name", "name", "name"]
        for iCount in range(len(arrlbHeader)):
            strHdr = arrlbHeader[iCount]
            RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
            RBtree2.column(arrlbHeader[iCount], stretch=True)

        RBtree2.place(x=10, y=40)

        Admin_vsb = ttk.Scrollbar(AdminCan, orient="vertical", command=RBtree2.yview)
        Admin_vsb.place(x=680, y=40, height=500)
        RBtree2.configure(yscrollcommand=Admin_vsb.set)
                
        def OnClick(event, treename):
            global StartTime
            StartTime = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
            Entry3.config(state='normal')
            item = treename.selection()
            for i in item:
                ReviewID = treename.item(i, "values")[0]

                DueDateTime = treename.item(i, "values")[1].split(' ')
                HourMin = DueDateTime[1].split(':')
                DueDate = DueDateTime[0]

                Status = treename.item(i, "values")[2]
                Stage = treename.item(i, "values")[4]
                Assignee = treename.item(i, "values")[5]

            Cancel()

            if Stage == 'Job Completed':
                messagebox.showerror('Validation Check',"This Review ID is in Completed Stage, hence unable to change status!")
                return False
            else:
                Entry1.config(state='normal')
                Entry1.delete(0, END)
                Entry1.insert(0, ReviewID)
                Entry1.config(state='disabled')

                Entry2.config(state='normal')
                Entry2_1.config(state='normal')
                Entry2_2.config(state='normal')

                Entry2.delete(0, END)
                Entry2.insert(0, DueDate)
                Entry2_1.delete(0, END)
                Entry2_1.insert(0, HourMin[0])
                Entry2_2.delete(0, END)
                Entry2_2.insert(0, HourMin[1])

                Entry2.config(state='disabled')
                Entry2_1.config(state='disabled')
                Entry2_2.config(state='disabled')

                Entry3.config(state='normal')
                Entry3.delete(0, END)
                Entry3.insert(0, Status)

                Entry4.delete(0, END)
                Entry4.insert(0, Stage)

                Entry5.config(state='normal')
                Entry5.delete(0, END)
                Entry5.insert(0, Assignee)

                Entry6.delete(1.0, END)

                CheckStage(Event)

        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        ViewDashfn(ProDBPath,"""SELECT A.ReviewID, A.DueDate, Status, G.LastEntryTime, Stage, Assignee FROM tblIssuesMainRabo as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE Stage != 'Job Completed';""",RBtree2)
        
        RBtree2.bind("<<TreeviewSelect>>", lambda event: OnClick(event, treename=RBtree2))


########################################################## This is Archive for Rabo ########################################################

def ArchiveRaboCheck(RBCan, Timer1):
    global ActiveJobPage
    if ActiveJobPage == False:
        ArchiveRabo(RBCan, Timer1)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            ArchiveRabo(RBCan, Timer1)

def ArchiveRabo(RBCan, Timer1):
    global WorkQueueRabo_B, CreateRabo_B, AdminRabo_B, ArchiveRabo_B, UserStatsRabo_B

    WorkQueueRabo_B.config(bg='sky blue')
    CreateRabo_B.config(bg='sky blue')
    AdminRabo_B.config(bg='sky blue')
    ArchiveRabo_B.config(bg='#E7E6E6')
    UserStatsRabo_B.config(bg='sky blue')

    global ActiveDashboard
    ActiveDashboard = False

    ArchiveCan=Canvas(RBCan,bg="#006E8E", width=1180, height=545, highlightthickness=0)
    ArchiveCan.place(x=5, y=40)
    
    ProjectLabel = Label(ArchiveCan, text="Rabo Bank",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",14,"bold"))
    ProjectLabel.place(x=40, y=5)

    global Searched
    Searched = False

    def Search_Submit():
        global Searched
        Reopen_Hide()
        if SearchEntry1.get() != '':
            ReviewIDExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblIssuesMainRabo WHERE ReviewID = '" + SearchEntry1.get() + "');")
            if ReviewIDExists[0][0] == 1:
                Searched = True
                RBtree2.delete(*RBtree2.get_children())
                ArchiveData(ReviewID=SearchEntry1.get(), Country=None)
            else:
                messagebox.showerror('No Review ID','This Review ID is not available!')
        
        elif SearchEntry2.get() != '':
            CountryExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblIssuesMainRabo WHERE Country = '" + SearchEntry2.get().capitalize() + "');")
            if CountryExists[0][0] == 1:
                Searched = True
                RBtree2.delete(*RBtree2.get_children())
                ArchiveData(ReviewID=None, Country=SearchEntry2.get().capitalize())
            else:
                messagebox.showerror('No Country','This typed Country is not available!')
            
        else:
            messagebox.showerror('No Option Selected','Please Select Review ID or Country to Search!')
   
    def Search_Cancel():
        global Searched
        SearchEntry1.delete(0,END)
        SearchEntry2.set('')
        if Searched:
            Searched = False
            RBtree2.delete(*RBtree2.get_children())
            ArchiveData(ReviewID=None, Country=None)
        else:
            messagebox.showwarning('Not Filtered','No data filtered to clear!')
    
    def SearchTyped(event, SearchEntry):
        if SearchEntry == SearchEntry1:
            SearchEntry2.set('')

        if SearchEntry == SearchEntry2:
            SearchEntry1.delete(0,END)

    SearchLabel1 = Label(ArchiveCan, text="Review ID",width=10,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
    SearchEntry1 = Entry(ArchiveCan, bg="white",font=("Calibri",12,"bold"), width=15)
    SearchEntry1['validatecommand'] = (SearchEntry1.register(AcceptNum),'%P','%d')
    
    SearchLabel2 = Label(ArchiveCan, text="Country",width=10,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='e')
    SearchEntry2_Values= SelectQueryfun(SupportDBPath,"Select CountryName from tblCountries;")
    SearchEntry2 = AutocompleteCombobox(ArchiveCan, width=25, font=("Calibri",12,"bold"), completevalues=SearchEntry2_Values)
    
    SearchEntry1.bind("<1>", lambda event: SearchTyped(event, SearchEntry=SearchEntry1))
    SearchEntry2.bind("<1>", lambda event: SearchTyped(event, SearchEntry=SearchEntry2))

    Image1= PhotoImage(file=r'')
    Image2= PhotoImage(file=r'')

    SearchButton1 = Button(ArchiveCan, image=Image1, fg='black', bg="#006E8E", width=25, height=25, command=lambda:Search_Submit(), borderwidth=0, cursor='hand2', relief='flat')
    SearchButton1.image = Image1

    SearchButton2 = Button(ArchiveCan, image=Image2, fg='black', bg="#006E8E", width=25, height=25, command=lambda:Search_Cancel(), borderwidth=0, cursor='hand2', relief='flat')
    SearchButton2.image = Image2

    SearchLabel1.place(x=360, y=10)
    SearchEntry1.place(x=450, y=10)
    
    SearchLabel2.place(x=560, y=10)
    SearchEntry2.place(x=650, y=10)

    SearchButton1.place(x=882, y=8)
    SearchButton2.place(x=927, y=8)

    arrlbHeader = ["REVIEW ID", "COUNTRY", "ISSUE TYPE", "RECEIVED DATE", "DUE DATE", "STATUS", "STAGE", "LAST ENTRY TIME", "ANALYST", "PEER REVIEWER"]
    RBtree2 = MyTreeview(ArchiveCan, columns=arrlbHeader, show="headings", height=16)

    RBtree2.column("#1", anchor=tkinter.CENTER, width=90)
    RBtree2.heading("#1", text="REVIEW ID")
    RBtree2.column("#2", anchor=tkinter.CENTER, width=100)
    RBtree2.heading("#2", text="COUNTRY")
    RBtree2.column("#3", anchor=tkinter.CENTER, width=160)
    RBtree2.heading("#3", text="ISSUE TYPE")
    RBtree2.column("#4", anchor=tkinter.CENTER, width=108)
    RBtree2.heading("#4", text="RECEIVED DATE")
    RBtree2.column("#5", anchor=tkinter.CENTER, width=107)
    RBtree2.heading("#5", text="DUE DATE")
    RBtree2.column("#6", anchor=tkinter.CENTER, width=110)
    RBtree2.heading("#6", text="STATUS")
    RBtree2.column("#7", anchor=tkinter.CENTER, width=100)
    RBtree2.heading("#7", text="STAGE")
    RBtree2.column("#8", anchor=tkinter.CENTER, width=115)
    RBtree2.heading("#8", text="LAST ENTRY TIME")
    RBtree2.column("#9", anchor=tkinter.CENTER, width=130)
    RBtree2.heading("#9", text="ANALYST")
    RBtree2.column("#10", anchor=tkinter.CENTER, width=130)
    RBtree2.heading("#10", text="PEER REVIEWER")
        
    arrlbHeader = ["REVIEW ID", "COUNTRY", "ISSUE TYPE", "RECEIVED DATE", "DUE DATE", "STATUS", "STAGE", "LAST ENTRY TIME", "ANALYST", "PEER REVIEWER"]
    arrSortType = ["num", "name", "name", "date", "date", "name", "name", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        RBtree2.heading(strHdr, text=strHdr.title(), sort_by=arrSortType[iCount])
        RBtree2.column(arrlbHeader[iCount], stretch=True)

    RBtree2.place(x=10, y=45)

    Archive_vsb = ttk.Scrollbar(ArchiveCan, orient="vertical", command=RBtree2.yview)
    Archive_vsb.place(x=1160, y=45, height=340)
    RBtree2.configure(yscrollcommand=Archive_vsb.set)

    style = ttk.Style()
    style.theme_use('default')
    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
    style.map('Treeview', background=[('selected', 'green')])

    def ArchiveData(ReviewID=None, Country=None):
        if ReviewID != None and Country == None:
            query = """SELECT A.ReviewID, A.Country, A.IssueType, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainRabo as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE A.ReviewID = '""" + ReviewID + """';"""
        elif ReviewID == None and Country != None:
            query = """SELECT A.ReviewID, A.Country, A.IssueType, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainRabo as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID 
                        WHERE A.Country = '""" + Country + """';"""
        else:
            query = """SELECT A.ReviewID, A.Country, A.IssueType, A.DateReceived, A.DueDate, Status, Stage, G.LastEntryTime FROM tblIssuesMainRabo as A 
                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID), EntryEndTime as LastEntryTime FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                        ON A.ReviewID = G.ReviewID;"""
            
        conn = sqlite3.connect(ProDBPath)
        df_Arc1 = pd.read_sql_query(query, conn)
        conn.close()
        
        query = """SELECT StatusID, TableName, ReviewID, EntryBy FROM tblIssuesStatusRabo 
                    WHERE TableName = 'Analysis' OR TableName = 'PR';"""
        conn = sqlite3.connect(ProDBPath)
        df_Arc2 = pd.read_sql_query(query, conn)
        df_Arc2['EntryBy'] = df_Arc2['EntryBy'].str.lower()
        conn.close()
                
        df_group=df_Arc2.groupby(['ReviewID','TableName'],as_index = False).max('StatusID')
        Merge_df_1 = df_group.merge(df_Arc2[['StatusID', 'EntryBy']], left_on=['StatusID'], right_on=['StatusID'], how='left')
        
        query = """SELECT EmpName, UserID FROM tblUserAccess;"""
        conn = sqlite3.connect(SupportDBPath)
        df_Arc3 = pd.read_sql_query(query, conn)
        conn.close()
        
        Merge_df_2 = Merge_df_1.merge(df_Arc3, left_on=['EntryBy'], right_on=['UserID'], how='left')
        
        dfpivot=pd.pivot_table(Merge_df_2, index='ReviewID', columns='TableName', values='EmpName', aggfunc='max').fillna('')
        dfpivot = dfpivot.reset_index(drop=False)
        dfpivot['ReviewID'] = dfpivot['ReviewID'].astype(str)
        
        Merge_df_Final = df_Arc1.merge(dfpivot, left_on=['ReviewID'], right_on=['ReviewID'], how='left')
        Arc_List = Merge_df_Final.values.tolist()

        for row in Arc_List:
            RBtree2.insert("", END, values=row)
        
    RBtree2.bind("<<TreeviewSelect>>", lambda event: OnChange(event, treename=RBtree2))
    RBtree2.bind("<Double-1>", lambda event: OnClick(event, treename=RBtree2))
    
    ArchiveData()
    
    def OnClick(event, treename):
        item = treename.selection()
        for i in item:
            ReviewID = treename.item(i, "values")[0]

        SelectedIssueRabo(RBCan, ReviewID, 'Archive', 'Analysis', Timer1)

    def Reopen_Hide():
        Label1.place_forget()
        Label2.place_forget()
        Label4.place_forget()
        Label5_0.place_forget()
        Label5.place_forget()
        Label6.place_forget()
        Label7.place_forget()
        Label8_0.place_forget()
        Label8.place_forget()
        Label8_1.place_forget()
        Label8_2.place_forget()
        Label9.place_forget()
        Label10.place_forget()
        Label11.place_forget()
        
        Entry1.place_forget()
        Entry2.place_forget()
        Entry4.place_forget()
        Entry5.place_forget()
        Entry6.place_forget()
        Entry7.place_forget()
        Entry8.place_forget()
        Entry8_1.place_forget()
        Label8_1_1.place_forget()
        Entry8_2.place_forget()
        Entry9.place_forget()
        Entry10.place_forget()
        Entry11.place_forget()

        Comments_vsb.place_forget()

        Button1.place_forget()
        Button2.place_forget()
        
    def OnChange(event, treename):
        Cancel()
        item = treename.selection()
        for i in item:
            ReviewID = treename.item(i, "values")[0]
            Stage = treename.item(i, "values")[6]

            if Stage == 'Job Completed':
                Label1.place(x=10, y=410)
                Label2.place(x=280, y=410)
                Label4.place(x=590, y=410)
                Label5_0.place(x=1040, y=390)
                Label5.place(x=960, y=410)
                
                Label6.place(x=10, y=460)
                Label7.place(x=300, y=460)
                Label8.place(x=610, y=460)
                Label8_0.place(x=720, y=440)
                Label8_1.place(x=832, y=440)
                Label8_2.place(x=862, y=440)
                Label9.place(x=1000, y=460)
                
                Label10.place(x=10, y=510)
                Label11.place(x=310, y=510)
                
                Entry1.place(x=90, y=410)
                Entry1.config(state='normal')
                Entry1.delete(0, END)
                Entry1.insert(0, ReviewID)
                Entry1.config(state='disabled')
                Entry2.place(x=400, y=410)
                Entry4.place(x=750, y=410)
                Entry5.place(x=1070, y=410)
                
                Entry6.place(x=90, y=460)
                Entry7.place(x=400, y=460)
                Entry8.place(x=750, y=460)
                Entry8_1.place(x=840, y=460)
                Label8_1_1.place(x=855, y=460)
                Entry8_2.place(x=870, y=460)
                Entry9.place(x=1070, y=460)
                
                Entry10.place(x=90, y=510)
                Entry11.place(x=400, y=500)

                Comments_vsb.place(x=613, y=500, height=47)

                Button1.place(x=750, y= 510)
                Button2.place(x=900, y= 510)

            else:
                Reopen_Hide()

    Label1 = Label(ArchiveCan, text="Review ID*",width=20,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label2 = Label(ArchiveCan, text="Reopen Reason*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label4 = Label(ArchiveCan, text="Reopen Classification*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label5_0 = Label(ArchiveCan, text="dd/mm/yyyy",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label5 = Label(ArchiveCan, text="Reopen Date*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label6 = Label(ArchiveCan, text="QC Status*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label7 = Label(ArchiveCan, text="Reopen for*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')

    Label8_0 = Label(ArchiveCan, text="dd/mm/yyyy",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label8 = Label(ArchiveCan, text="Revised Due Date*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label8_1 = Label(ArchiveCan, text="HH",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    Label8_1_1 = Label(ArchiveCan, text=":",width=2,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"bold"))
    Label8_2 = Label(ArchiveCan, text="MM",width=4,height=1,fg="white", bg="#006E8E",font=("Calibri",10,"italic"))
    
    Label9 = Label(ArchiveCan, text="Status*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label10 = Label(ArchiveCan, text="Assigned*",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
    Label11 = Label(ArchiveCan, text="Comments",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",12,"bold"),anchor='w')
            
    Entry1 = Entry(ArchiveCan, bg="white",font=("Calibri",10), width=19)
    Entry1.config(state='disabled')

    Entry2_Values = ['Client', 'Internal']
    Entry2 = AutocompleteCombobox(ArchiveCan, width=20, completevalues=Entry2_Values)
    Entry2_msg = 'This typed Reason is not available in the list, please check!'

    Entry4_Values = ['External Reason (No fault of EQ)', 'Formulation/Translation Error', 'Key Findings', 'KI Form incosistent with Analysis', 'Mistake only in final report', 'Typos', 'Not a Rejection', 
                        'FA Comments', 'Incorrect Analysis', 'Incorrect/Incomplete Document uploaded', 'Incorrect/Incomplete Screenings', 'Relationship Tree']
    Entry4 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry4_Values)
    Entry4_msg = 'This typed Classification is not available in the list, please check!'

    Entry5 = DateEntry(ArchiveCan,width=12,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry5.delete(0, END)
    Entry5.bind("<FocusOut>", lambda event: Date_Check(event, Entry5))

    Entry6_Values = ['Pass', 'Fail', 'Advisory']
    Entry6 = AutocompleteCombobox(ArchiveCan, width=20, completevalues=Entry6_Values)
    Entry6_msg = 'This typed Status is not available in the list, please check!'

    Entry7_Values = ['Analyst, Peer & Case Reviewer', 'Peer & Case Reviewer', 'Case Reviewer', 'External Reason', 'Analyst, Peer Reviewer']
    Entry7 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry7_Values)
    Entry7_msg = 'This typed Status is not available in the list, please check!'
            
    Entry8 = DateEntry(ArchiveCan,width=11,bg="darkblue",fg="white",date_pattern='dd/mm/yyyy')
    Entry8.delete(0, END)
    Entry8.bind("<FocusOut>", lambda event: Date_Check(event, Entry8))

    Entry8_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
    Entry8_1 = Entry(ArchiveCan,validate='key',bg="white",font=("Calibri",10),width=2)
    Entry8_1['validatecommand'] = (Entry8_1.register(AcceptNum),'%P','%d')
    Entry8_1_msg = 'This typed hour is not correct, please check!'
    
    Entry8_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry8_2 = Entry(ArchiveCan,validate='key',bg="white",font=("Calibri",10),width=2)
    Entry8_2['validatecommand'] = (Entry8_2.register(AcceptNum),'%P','%d')
    Entry8_2_msg = 'This typed minute is not correct, please check!'
    
    Entry9_Values = ['Assigned', 'On Hold']
    Entry9 = AutocompleteCombobox(ArchiveCan, width=12, completevalues=Entry9_Values)
    Entry9_msg = 'This typed Status is not available in the list, please check!'
    
    Entry10_Values= SelectQueryfun(SupportDBPath,"SELECT EmpName FROM tblUserAccess WHERE Active = 'Yes' and Analyst = 'Yes' ORDER BY EmpName ASC;")
    Entry10 = AutocompleteCombobox(ArchiveCan, width=25, completevalues=Entry10_Values)
    Entry10_msg = 'This typed Name is not available in the list, please check!'
    
    Entry11 = Text(ArchiveCan,bg="white",font=("Calibri",10),width=30,height=3)
    Entry11.bind('<Tab>', lambda event: focusNext(Entry11))
    Entry11.bind('<Shift-Tab>', lambda event: focusPrev(Entry11))

    Comments_vsb = ttk.Scrollbar(ArchiveCan, orient="vertical", command=Entry11.yview)
    Entry11.configure(yscrollcommand=Comments_vsb.set)

    def Validate_Clear():
        LabelList = [Label1, Label2, Label4, Label5, Label6, Label7, Label8, Label8_1, Label8_2, Label9, Label10, Label11]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='white')

    def Validate_Submit():
        Validate_Clear()

        AllLabelList = [Label2, Label4, Label6, Label7, Label8_1, Label8_2, Label9, Label10]
        AllEntryList = [Entry2, Entry4, Entry6, Entry7, Entry8_1, Entry8_2, Entry9, Entry10]
        AllEntryValues = [Entry2_Values, Entry4_Values, Entry6_Values, Entry7_Values, Entry8_1_Values, Entry8_2_Values, Entry9_Values, Entry10_Values]
        AllEntryMessage = [Entry2_msg, Entry4_msg, Entry6_msg, Entry7_msg, Entry8_1_msg, Entry8_2_msg, Entry9_msg, Entry10_msg]

        DateLabelList = [Label5, Label8]
        DateEntryList = [Entry5, Entry8]

        Submit = True

        if Entry1.get() == '' or Entry2.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or Entry8_1.get() == '' or Entry8_2.get() == '' or Entry9.get() == '' or Entry10.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False

        for i in range(0,len(AllEntryList)):
            if AllEntryList[i].get() != '':
                result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                if result == 'Failed':
                    AllLabelList[i].config(foreground='orange')
                    AllEntryList[i].focus_set()
                    messagebox.showerror('Validation Check',AllEntryMessage[i])
                    Submit = False
                    return False
                    break
        
        for i in range(0,len(DateEntryList)):
            if DateEntryList[i].get() != '':
                result = Date_Validation(DateEntryList[i])
                if result == 'Failed':
                    DateLabelList[i].config(foreground='orange')
                    DateEntryList[i].focus_set()
                    messagebox.showerror('Date Error','This typed date is not valid! Please check')
                    Submit = False
                    return False
                    break
        
        item = RBtree2.selection()
        for i in item:
            TreeReviewID = RBtree2.item(i, "values")[0]
            
        AccessLevel = 'Analyst'

        PreLevelCheck = ViewQueryfun(ProDBPath,"""SELECT G.EntryBy, A.ReviewID, Status, Stage FROM tblIssuesMainRabo as A 
                                    INNER JOIN (SELECT EntryBy, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B WHERE Stage = 'Peer Reviewer' GROUP BY B.ReviewID) as G
                                    ON A.ReviewID = G.ReviewID
                                    WHERE Stage = 'Peer Reviewer' AND A.ReviewID = """ + TreeReviewID + ";")
        if len(PreLevelCheck) > 0:
            PreLevelUser = PreLevelCheck[0][0]
        else:
            PreLevelUser = ''

        CrossCheck = ViewQueryfun(ProDBPath,"""SELECT A.ReviewID, A.DateReceived, A.DueDate, Status, Stage, Assignee FROM tblIssuesMainRabo as A 
                                        INNER JOIN (SELECT Assignee, Status, Stage, B.ReviewID, MAX(StatusID) FROM tblIssuesStatusRabo AS B GROUP BY B.ReviewID) as G
                                        ON A.ReviewID = G.ReviewID
                                        WHERE A.ReviewID = """ + TreeReviewID + ";")
        
        if len(CrossCheck) == 0:
            messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
            ArchiveRabo(RBCan, Timer1)
            return False
        else:
            if CrossCheck[0][0] == RBtree2.item(i, "values")[0] and CrossCheck[0][1] == RBtree2.item(i, "values")[3] and CrossCheck[0][2] == RBtree2.item(i, "values")[4] and CrossCheck[0][3] == RBtree2.item(i, "values")[5] and CrossCheck[0][4] == RBtree2.item(i, "values")[6]:

                    if EmpLevel == 'Both' or EmpLevel == AccessLevel:

                        NewUser = SelectQueryfun(SupportDBPath,"SELECT UserID FROM tblUserAccess WHERE EmpName = '" + Entry10.get() + "';")
                        if PreLevelUser != NewUser[0]:
                            Submit = True

                        else:
                            Submit = False
                            messagebox.showerror('Validation Check',"Analysis and Peer Review should not be done by same user. Please check!")
                            return False

                    else:
                        Submit = False
                        messagebox.showerror('Validation Check',"Your are not authorized to work at this stage. Please check!")    
                        return False
            else:
                Submit = False
                messagebox.showerror('Validation Check',"This Review ID's status is changed, please refresh and try again!")
                return False

        if Submit:
            SubmitArchiveRabo()

    def SubmitArchiveRabo():

        global NPTotalHours
        NPTotalHours = datetime.min

        RevisedDueDate = Entry8.get() + " " + Entry8_1.get() + ":" + Entry8_2.get()

        Record = (Entry1.get(),	Entry2.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), RevisedDueDate, Entry9.get(), Entry10.get(), Entry11.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = ("""INSERT INTO tblIssuesReopenRabo (ReviewID, ReopenReason, ReopenClassification, ReopenDate, QCStatus, Reopenfor, RevisedDueDate, Status, AssignedTo, Comments, EntryBy, EntryTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        IssueID = UpdateQueryReturn(ProDBPath, query, Record)

        Record = (Entry10.get(), Entry9.get(), 'Analysis', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
        query = ("""UPDATE tblIssuesMainRabo SET CurAssignee = ?, CurStatus = ?, CurStage = ?, UpdatedBy = ?, UpdatedTime = ? WHERE ReviewID = ?;""")
        UpdateQueryfun(ProDBPath, query, Record)

        Record = ('Reopen', IssueID, Entry1.get(), Entry10.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry9.get(), Entry9.get(), 'Analysis', datetime.strftime(NPTotalHours, '%H:%M:%S'), 'Analysis')
        query = ("""INSERT INTO tblIssuesStatusRabo (TableName, ID, ReviewID, Assignee, EntryBy, EntryDate, EntryStartTime, EntryEndTime, EntryStatus, Status, Stage, NPHours, EntryStage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""")
        UpdateQueryfun(ProDBPath,query, Record)

        NPTotalHours = datetime.min
        messagebox.showinfo('Completed','Reopen Details Updated Successfully!')
        
        Cancel()
        ArchiveRabo(RBCan, Timer1)

    def Cancel():
        Validate_Clear()
        Entry1.config(state='normal')
        Entry1.delete(0, END)
        Entry1.config(state='disabled')
        
        Entry2.delete(0, END)
        Entry4.delete(0, END)
        Entry5.delete(0, END)
        Entry6.delete(0, END)
        Entry7.delete(0, END)
        Entry8.delete(0, END)
        Entry8_1.delete(0, END)
        Entry8_2.delete(0, END)
        Entry9.delete(0, END)
        Entry10.delete(0, END)
        Entry11.delete(1.0, END)

    Button1 = Button(ArchiveCan, text="Reopen", width=12, height=1, command=lambda:Validate_Submit(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    Button2 = Button(ArchiveCan, text="Clear", width=12, height=1, command=lambda:Cancel(),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')

########################################################## This is Rabo Project for Rabo ########################################################

def ProjectRabo(Home):
    Home.title("KYC Solutions-Rabo Bank")
    RBCan=Canvas(Home,bg="#006E8E", width=1190, height=590, highlightthickness=0)
    RBCan.place(x=5, y= 5)

    UNameLabel = Label(RBCan, text=Var_UserName,height=2,fg="white", bg="#006E8E",font=("Calibri",12,"bold"))
    UNameLabel.place(x=1000, y=0)
    
    Timer1=TimerRun()

    global WorkQueueRabo_B, CreateRabo_B, AdminRabo_B, ArchiveRabo_B, UserStatsRabo_B

    ProjectsRabo_B = Button(RBCan, text="Projects", width=12, height=1, command=lambda:AllProjectsCheck(Home),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    WorkQueueRabo_B = Button(RBCan, text="Work Queue", width=12, height=1, command=lambda:WorkQueueRaboCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    CreateRabo_B = Button(RBCan, text="Create", width=12, height=1, command=lambda:CreateIssueRaboCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    AdminRabo_B = Button(RBCan, text="Admin", width=12, height=1, command=lambda:AdminRaboCheck(RBCan),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    ArchiveRabo_B = Button(RBCan, text="Archive", width=12, height=1, command=lambda:ArchiveRaboCheck(RBCan, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    UserStatsRabo_B = Button(RBCan, text="User Stats", width=12, height=1, command=lambda:UserStatsCheck(RBCan, 'Rabo'),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
    NonProRabo_B = Button(RBCan, text="Non Production", width=15, height=1, command=lambda:NonProRB(Home, Timer1),bg="sky blue",font=("Calibri",10,"bold"),cursor='hand2')
        
    ProjectsRabo_B.place(x=50, y=10)
    WorkQueueRabo_B.place(x=150, y=10)
    CreateRabo_B.place(x=250, y=10)
    AdminRabo_B.place(x=350, y=10)
    ArchiveRabo_B.place(x=450, y=10)
    UserStatsRabo_B.place(x=550, y=10)
    NonProRabo_B.place(x=650, y=10)

    WorkQueueRaboCheck(RBCan, Timer1)

############################################################################## Rabobank END ###########################################################################################
############################################################################## Rabobank END ###########################################################################################
############################################################################## Rabobank END ###########################################################################################
############################################################################## Rabobank END ###########################################################################################
############################################################################## Rabobank END ###########################################################################################

########################################################## This is All Projects Page ########################################################
def AllProjectsCheck(Home):
    global ActiveJobPage
    if ActiveJobPage == False:
        AllProjects(Home)
    else:
        answer = messagebox.askquestion('Job not submitted','Are your sure want to exit without submitting it!')
        if answer == 'yes':
            ActiveJobPage = False
            AllProjects(Home)

def AllProjects(Home):
    Home.title("KYC Solutions-Home Page")
    ProjectsCan=Canvas(Home,bg="#006E8E", width=1190, height=590, highlightthickness=0)
    ProjectsCan.place(x=5, y=5)

    UNameLabel = Label(ProjectsCan, text=Var_UserName,height=2,fg="white", bg="#006E8E",font=("Calibri",12,"bold"))
    UNameLabel.place(x=1000, y=0)

    Label1 = Label(ProjectsCan, text="All Projects",height=2,fg="white", bg="#006E8E",font=("Calibri",16,"bold"))
    Label1.place(x=590, y=0)

    Can2=Canvas(ProjectsCan,bg="white", width=1175, height=530)
    Can2.place(x=5, y=50)
    style = ttk.Style()
    style.theme_use('default')

    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",14,"bold"))
    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",12,"italic"),rowheight=30)
    style.map('Treeview', background=[('selected', 'green')])

    conn = sqlite3.connect(SupportDBPath)
    c = conn.cursor()
    
    c.execute("SELECT ProjectName, Key, Type, Lead, Category FROM tblProjects;")
    rows=c.fetchall()
    conn.close()

    tree = ttk.Treeview(Can2, column=("c1", "c2", "c3"), show='headings', height=16)

    tree.column("#1", anchor=tkinter.CENTER, width=400)
    tree.heading("#1", text="ProjectName")
    tree.column("#2", anchor=tkinter.CENTER, width=300)
    tree.heading("#2", text="Key")
    tree.column("#3", anchor=tkinter.CENTER, width=400)
    tree.heading("#3", text="Type")
    
    tree.place(x=40, y=20)
    
    tree.tag_configure("evenrow",background='lightblue')
    tree.tag_configure("oddrow",background='white')
    rowid = 0
    for row in rows:
        rowid = rowid + 1
        if rowid % 2 == 0:
            tree.insert("", tkinter.END, values=row, tags=('oddrow',))
        else:
            tree.insert("", tkinter.END, values=row, tags=('evenrow',))
    
    def selectItem(a):
        curItem = tree.focus()
        treedict = (tree.item(curItem))
        ProjectName = treedict['values'][0]

        if ProjectName == 'Roland Berger':
            ProjectRB(Home)
        elif ProjectName == 'OIMIO':
            ProjectOIMIO(Home)
        elif ProjectName == 'Rabobank & SAREF':
            ProjectRabo(Home)

    tree.bind('<ButtonRelease-1>', selectItem)

########################################################## This is Home Page ########################################################

def HomePage():
    Home=Tk()
    Home.geometry("1200x600")
    Home.resizable(False,False)
    Home.title("KYC Solutions-Home Page")
    Home.iconbitmap(ImgPath + '\EQ_HD.ico')
    
    AllProjects(Home)
    
    Home.protocol('WM_DELETE_WINDOW',lambda:ClosePage(Home))
    Home.mainloop()

########################################################## This is Login Page ########################################################

def WindowCheck():
    WindowsList = []
    def winEnumHandler( hwnd, ctx ):
        if win32gui.IsWindowVisible( hwnd ):
            WindowsList.append(win32gui.GetWindowText( hwnd ))

    win32gui.EnumWindows( winEnumHandler, None )
    return WindowsList

def LoginPage():
    
    CheckWindow = WindowCheck()

    if "KYC Solutions-Home Page" in CheckWindow or "KYC Solutions-Login Page" in CheckWindow or "KYC Solutions-Rabo Bank" in CheckWindow or "KYC Solutions-Roland Berger" in CheckWindow or "KYC Solutions-OIMIO" in CheckWindow:
        messagebox.showerror('Already Opened','This application is already opened! Please check')
    else:
        Var_UserID = getpass.getuser()
        Temp = ViewQueryfun(SupportDBPath,"SELECT EmpName, Admin from tblUserAccess WHERE UserID = '" + Var_UserID.lower() + "' AND Active = 'Yes';")

        if len(Temp) > 0:
            
            LoginCheck = ViewQueryfun(ProDBPath,"SELECT * from tblNonPro WHERE NPReason = 'Login' AND EntryBy = '" + Var_UserID + "' AND EntryDate = '" + datetime.now().strftime('%d-%m-%Y') + "';")

            if len(LoginCheck) == 0:
                Record = ('Login', '', '', '', Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                query = ("INSERT INTO tblNonPro (NPReason, NPActivity, NPTransName, NPComments, EntryBy, EntryDate, NPStartTime, NPEndTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?);")
                UpdateQueryfun(ProDBPath, query, Record)
            else:
                Record = ('Entry', '', '', '', Var_UserID, datetime.now().strftime('%d-%m-%Y'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                query = ("INSERT INTO tblNonPro (NPReason, NPActivity, NPTransName, NPComments, EntryBy, EntryDate, NPStartTime, NPEndTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?);")
                UpdateQueryfun(ProDBPath, query, Record)

            HomePage()
        else:
            Login=Tk()
            Login.geometry("1200x600")
            Login.resizable(False,False)
            Login.title("KYC Solutions-Login Page")
            messagebox.showerror('User ID not available','You are not authorised to access this application, Please check with your Team Leader') 
            Login.destroy()
            Login.mainloop()

def VersionCheck():
    ProjectID = 'EQ2021-001'
    Version = 'V4.0'
    VersionResult = ViewQueryfun(SupportDBPath,"SELECT Status from tblVersions WHERE ProjectID = '" + ProjectID + "' AND Version = '" + Version + "';")

    if VersionResult[0][0] == 'Live':
        LoginPage()
    else:
        NewerVersion = ViewQueryfun(SupportDBPath,"SELECT Version from tblVersions WHERE ProjectID = '" + ProjectID + "' AND Status = 'Live';")
        messagebox.showerror('Version Check','You are using an older version of this application, Please close and open Newer Version ' + NewerVersion[0][0])
        return False

VersionCheck()