from asyncio.windows_events import NULL
from email import message
from email.mime import image
from enum import unique

from glob import glob
from lib2to3.pgen2.token import NAME
from operator import ge, index
from os import startfile, stat, stat_result
from tkinter import *
from sqlite3.dbapi2 import Cursor, Date, Row
from tkinter import Tk
from tkinter import ttk
from tkinter import messagebox
from tkinter import font
from tkinter.font import BOLD
from tkinter.ttk import Combobox, Style, Treeview
from tkinter import Canvas
from turtle import end_fill, width
from babel.core import default_locale
from numpy import bitwise_and, e, record
from pandas.io import sql
from pandas.io.pytables import Table
from pandas.tseries.offsets import Hour
from ttkwidgets.autocomplete import AutocompleteCombobox, autocompletecombobox
from datetime import datetime, date
from tkcalendar import Calendar, DateEntry
from tkinter import filedialog as fd
from functools import partial
from tkinter import ttk as objTTK
from PIL import Image, ImageTk
from calendar import month, month_name

import win32gui
import sqlite3
import getpass
import pandas as pd
import tkinter
import datetime as dt
import sys
import babel.numbers
import xlwings as xw
import pandas as pd
import tkinter as objTK
import datetime as objDateTime
import xlwings as xl
import numpy as np
import openpyxl
import shutil


def WindowCheck():
    WindowsList = []
    def winEnumHandler( hwnd, ctx):
        if win32gui.IsWindowVisible( hwnd ):
            WindowsList.append(win32gui.GetWindowText( hwnd ))

    win32gui.EnumWindows( winEnumHandler, None )
    return WindowsList

dbRPH = r''
#dbpath = r''
dbpath = r''
Supportdb = r'
Otherdb = r''
icon_im = r''


user_name = getpass.getuser().lower()
User_ID = getpass.getuser().lower()
UserID = getpass.getuser().lower()

######## Treeview Sorting #################

class MyTreeview(objTTK.Treeview):
    def heading(self, column, sort_by=None, **kwargs):
        if sort_by and not hasattr(kwargs, 'command'):
            func = getattr(self, f"_sort_by_{sort_by}", None)
            if func:
                kwargs['command'] = partial(func, column, False)

        return super().heading(column, **kwargs)

    def _sort(self, column, reverse, data_type, callback):
        l = [(self.set(k, column), k) for k in self.get_children('')]
        l.sort(key=lambda t: data_type(t[0]), reverse=reverse)
        for index, (_, k) in enumerate(l):
            self.move(k, '', index)

        self.heading(column, command=partial(callback, column, not reverse))

    def _sort_by_num(self, column, reverse):
        self._sort(column, reverse, int, self._sort_by_num)

    def _sort_by_name(self, column, reverse):
        self._sort(column, reverse, str, self._sort_by_name)

    def _sort_by_date(self, column, reverse):
        def _str_to_datetime(string):
            return objDateTime.datetime.strptime(string, "%d-%m-%Y")

        self._sort(column, reverse, _str_to_datetime, self._sort_by_date)


class TimerRun():
    def __init__(self, label):
        self.label = label
        self.StartTime = datetime.now()

        self.reset_clock()

        global RunningTimer
        RunningTimer = True

        self.update_clock()

    def reset_clock(self):
        global RunningTimer
        RunningTimer = False
        self.label.config(text="Timer: " + "00:00:00")

    def update_clock(self):
        now = datetime.now()
        diff = str(now - self.StartTime)[0:7]
        self.label.configure(text="Timer: " + diff)

        global RunningTimer
        if RunningTimer == True:
            self.label.after(1000, self.update_clock)
        else:
            self.label.config(text="Timer: " + "00:00:00")


def import_data(db,Insert_column,Insert_hd):
    sqlconnect = sqlite3.connect(db)
    sqlcur = sqlconnect.cursor()
    sqlcur.execute(Insert_column,Insert_hd)
    sqlconnect.commit()
    sqlconnect.close()

def Select_data(db,query):
    conn = sqlite3.connect(db)
    c = conn.cursor()
    c.execute(query)
    data = []
    for r in c.fetchall():
        data.append(r[0])
    conn.close()
    return data

def Viewtable_data(db,query,record):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    cur.execute(query,record)
    data = []
    for r in cur.fetchall():
        data.append(r[0])

    conn.close()
    return data

def View_query(db,query,record):
    conn = sqlite3.connect(db)
    c = conn.cursor()
    c.execute(query,record)
    data = []
    for row in c.fetchall():
        data.append(row)
    conn.close()
    return data

def Update_query(query,record):
    sqlconn = sqlite3.connect(dbpath)
    cc = sqlconn.cursor()
    cc.execute(query,record)
    sqlconn.commit()
    sqlconn.close()

def Delete_qury(query, record):
    sqlconn = sqlite3.connect(dbpath)
    conn = sqlconn.cursor()
    conn.execute(query, record)
    sqlconn.commit()
    sqlconn.close()

def AcceptNum(inStr,acttyp):
    if acttyp == '1': #insert
        if not inStr.isdigit():
            return False
    return True

def focusNext(widget):
    widget.tk_focusNext().focus_set()
    return 'break'

def focusPrev(widget):
    widget.tk_focusPrev().focus_set()
    return 'break'

def ClosePage(Window):
    Msgbox = messagebox.askyesnocancel('Logout?','''Are you sure want to Logout for the day?

    Yes = Logout for the day!
    No = Just Closing the Application''',icon = 'warning')

    if Msgbox == True:
        query = ("INSERT INTO tblhalt_NonP_Hrs (NpDate, NPBreakItem, NPActivity, NPTransactionName, NPComments, NPEntryBY, NPStartTime, NPEndTime, NPHours) Values (?,?,?,?,?,?,?,?,?);")
        record = (datetime.now().strftime('%d-%m-%Y'), 'Logout', '', '', '', UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.min.strftime('%H:%M:%S'))
        import_data(dbpath, query, record)

        MyWindow = Window
        try:
            MyWindow.destroy()
        except:
            MyWindow.destroy()

    elif Msgbox == False:

        # query = ("INSERT INTO tblhalt_NonP_Hrs (NpDate, NPBreakItem, NPActivity, NPTransactionName, NPComments, NPEntryBY, NPStartTime, NPEndTime, NPHours) Values (?,?,?,?,?,?,?,?,?);")
        # record = (datetime.now().strftime('%d-%m-%Y'), 'Exit', '', '', '', UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.min.strftime('%H:%M:%S'))
        # import_data(dbpath, query, record)

        MyWindow = Window
        try:
            MyWindow.destroy()
        except:
            MyWindow.destroy()
    else:
        pass


############################## IS_Maintenance Home page & Username updated ##############################

def Main_Function():
    ismaint = Tk()
    ismaint.geometry("1200x700")
    ismaint.resizable(False,False)

    ismaint.title("IS_Maintaince_Reporting_V1.6")
    ismaint.config(bg="#00728F")
    ismaint.iconbitmap(icon_im)

    ismaint.protocol('WM_DELETE_WINDOW',lambda:ClosePage(ismaint))

    def Login():

        global active_page
        active_page = False

        stframe = Frame(ismaint,bg="white",width=850,height=600, borderwidth=0,highlightcolor="white", highlightthickness=1,highlightbackground="#faffff")
        stframe.pack(fill=BOTH, padx=10,pady=10,expand=True)
        stframe.propagate(False)

        record = [user_name]
        query = ("Select * from TblUser_data where USER_ID =? and Admin_Access ='Yes';")
        user_access = View_query(Supportdb,query,record)

        if len(user_access) <= 0 :
            messagebox.showerror("UserID Validation","You don't have Reporting access, Kindly check with your team leader!")
            quit()

        # else:
        #     # record = [user_name]
        #     login_status = Select_data(dbpath, "Select count(NPBreakItem) from tblhalt_NonP_Hrs where NPEntryBY ='"+ User_ID +"' and NpDate ='" + datetime.now().strftime('%d-%m-%Y') + "' and NPBreakItem ='Login';")
        #     if login_status[0] == 0:
        #         query = ("INSERT INTO tblhalt_NonP_Hrs (NpDate, NPBreakItem, NPActivity, NPTransactionName, NPComments, NPEntryBY, NPStartTime, NPEndTime, NPHours) Values (?,?,?,?,?,?,?,?,?);")
        #         record = (datetime.now().strftime('%d-%m-%Y'), 'Login', '', '', '', UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.min.strftime('%H:%M:%S'))
        #         import_data(dbpath, query, record)
        #     else:
        #         query = ("INSERT INTO tblhalt_NonP_Hrs (NpDate, NPBreakItem, NPActivity, NPTransactionName, NPComments, NPEntryBY, NPStartTime, NPEndTime, NPHours) Values (?,?,?,?,?,?,?,?,?);")
        #         record = (datetime.now().strftime('%d-%m-%Y'), 'Entry', '', '', '', UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.now().strftime('%d-%m-%Y %H:%M:%S'), datetime.min.strftime('%H:%M:%S'))
        #         import_data(dbpath, query, record)

        for rw in user_access:
            emp_name = rw[1]

        ent_uname = Label(stframe, text="Welcome "+ emp_name,bg="white",fg='#0069B2',font=("Calibri (Body)",12,"bold"),width=35)
        ent_uname.place(relx=0.01,rely=0.03)

        global But1, But2, But3, But4, But6, But7

        #img_adm = PhotoImage(file= r'')
        But1 = Button(stframe,text="Home Page", command=lambda:Work_Queue(stframe), width=13,height=1,bg="#00728F",foreground="white", font=("Calibri (Body)", 10,"bold"),borderwidth=3)
        But1.place(relx=0.35,rely=0.02)

        But2 = Button(stframe,text="Hourly Count", command=lambda:Hourly_Count(stframe), width=13,height=1,bg="#00728F",foreground="white", font=("Calibri (Body)", 10,"bold"),borderwidth=3)
        But2.place(relx=0.48,rely=0.02)

        But3 = Button(stframe,text="Admin",width=13,height=1,bg="#00728F",foreground="white", font=("Calibri (Body)", 10,"bold"),borderwidth=3, command= lambda: Admin_ISM(stframe))
        But3.place(relx=0.61,rely=0.02)

        But4 = Button(stframe,text="IPD Reports",width=13,height=1,bg="#00728F",foreground="white", font=("Calibri (Body)", 10,"bold"),borderwidth=3,command=lambda: IPD_Report(stframe))
        But4.place(relx=0.74,rely=0.02)

        But7 = Button(stframe,text="DashBoard",width=13,height=1,bg="#00728F",foreground="white", font=("Calibri (Body)", 10,"bold"),borderwidth=3, command=dashboardPage)
        #But7.place(relx=0.74,rely=0.02)



        edframe=Frame(stframe,bg="white",width=5,height=2,relief="solid", borderwidth=0,highlightcolor="#00728F", highlightthickness=2,highlightbackground="#41729c")
        edframe.place(relx=0.000,rely=0.10,width=1199)

        Work_Queue(stframe)

    #############################  Work Queue details update from source table #############################

    # def Work_Queue_Check(stframe):
    #     global active_page
    #     if active_page == True:
    #         output = messagebox.askquestion("Active Page Validation", 'Are you sure you want to exit without submitting?')
    #         if output == "yes":
    #             active_page = False
    #             Work_Queue(stframe)
    #     else:
    #         Work_Queue(stframe)

    def Work_Queue(stframe):

        But1.config(bg ='sky blue')
        But2.config(background ='#00728F')
        But3.config(background ='#00728F')
        But4.config(background ='#00728F')
        But7.config(background ='#00728F')

        can_dash = Canvas(stframe,bg="white", height=600,width=1178,highlightthickness=0)
        can_dash.place(relx=0.00,rely=0.11)

        #Scroll_bar = ttk.Scrollbar(can_dash, orient="vertical", command=can_dash.yview)
        # can_dash.configure(yscrollcommand= Scroll_bar.set)
        # Scroll_bar.place(relx=0.540,rely=0.45,height=300)
        
        # hbar=Scrollbar(can_dash,orient=HORIZONTAL)
        # hbar.pack(side=BOTTOM,fill=X)
        # hbar.config(command=can_dash.xview)
        # vbar=Scrollbar(can_dash,orient=VERTICAL)
        # vbar.pack(side=RIGHT,fill=Y)
        # vbar.config(command=can_dash.yview)
        # can_dash.config(width=1178,height=600)
        # can_dash.config(yscrollcommand=vbar.set)
        #can_dash.pack(side=LEFT,expand=True,fill=BOTH)

        # Label3 = Label(can_dash, text="Team",width=15,height=1,fg="black", bg="white",font=("Calibri (Body)",13,"bold"))
        # Label3.place(relx=0.150,rely=0.02)
        
        def Start_date(a):
            date_1 = dt.datetime.strptime(Date_entry1.get(), "%d-%m-%Y")
            end_date = date_1 + dt.timedelta(days=60)
            Date_entry2.config(maxdate=end_date)
        def End_date(b):
            dt1=date(2021,11,1)
            Date_entry1.config(mindate=dt1)

        Label1 = Label(can_dash,text="Team Name",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label1.place(relx=0.03,rely=0.03)
        Ent1 = Entry(can_dash, bg="white",font=("Calibri",11),highlightbackground=None,highlightcolor=None)
        Ent1.insert(0,"IS-Maintaince")
        Ent1.place(relx=0.03,rely=0.07)

        dt1=date(2021,11,1)
        Label2 = Label(can_dash,text="Start Date",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label2.place(relx=0.17,rely=0.03)
        Date_entry1=DateEntry(can_dash, background= "black", foreground= "white",bd=0,font=('Calibri',12),date_pattern='dd-MM-yyyy', maxdate =  date.today(), mindate=dt1)
        Date_entry1.place(relx=0.17,rely=0.07)
        Date_entry1.bind('<FocusOut>', Start_date)

        Label17 = Label(can_dash,text="End Date",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label17.place(relx=0.29,rely=0.03)
        Date_entry2=DateEntry(can_dash, background= "black", foreground= "white",bd=0,font=('Calibri',12),date_pattern='dd-MM-yyyy', maxdate =  date.today())
        Date_entry2.place(relx=0.29,rely=0.07)
        Date_entry2.bind('<FocusOut>', End_date)
                        
        

        #############################  Collect Team Information Details #############################

        def Reporting_Sumbit():
            # -------- Production Count --------#
            date1 = Date_entry1.get()
            date2 = Date_entry2.get()
             
            Label3.config(text= date1)
            Label10.config(text= date1)
            
            #Report_Sdate=dt.datetime.strptime(date1, "%d-%m-%Y").strftime('%Y-%m-%d')
            Report_Sdate=dt.datetime.strptime(date1, "%d-%m-%Y")
            #Report_Edate=dt.datetime.strptime(date2, "%d-%m-%Y").strftime('%Y-%m-%d')
            Report_Edate=dt.datetime.strptime(date2, "%d-%m-%Y")
            
            print(Report_Edate)
            print(Report_Sdate)

            # -------- Remoe treeview1 data  --------#              
            if Report_Sdate > Report_Edate:
                messagebox.showerror("Date Missmatch", 'Kindly check the date format.')
                return False                                            
                                    
            #--Database Connection--
            conn = sqlite3.connect(dbpath)
            conn_O = sqlite3.connect(Otherdb)

            # -------- Non-Production  --------#
            Non_Prod = pd.read_sql_query("Select * FROM tblhalt_NonP_Hrs", conn)
            Non_Prod['NpDate'] = pd.to_datetime(Non_Prod['NpDate'], format='%d-%m-%Y')
            Non_Prod = Non_Prod.loc[(Non_Prod['NpDate'] >=Report_Sdate) & (Non_Prod['NpDate'] <= Report_Edate)]

            # -------- Other Team Production  --------#
            OtherT_Prod = pd.read_sql_query("SELECT * FROM TblProduction", conn_O)
            OtherT_Prod['P_Date'] = pd.to_datetime(OtherT_Prod['P_Date'], format= '%d-%m-%Y')
            OtherT_Prod = OtherT_Prod.loc[(OtherT_Prod['P_Date'] >=Report_Sdate) & (OtherT_Prod['P_Date'] <= Report_Edate)]

            # -------- Other Team NonProduction  --------#
            OtherT_NonProd = pd.read_sql_query("SELECT * FROM TblNon_Production", conn_O)
            OtherT_NonProd['P_DATE'] = pd.to_datetime(OtherT_NonProd['P_DATE'], format= '%d-%m-%Y')
            OtherT_NonProd = OtherT_NonProd.loc[(OtherT_NonProd['P_DATE'] >=Report_Sdate) & (OtherT_NonProd['P_DATE'] <= Report_Edate)]
                       
            # -------- Production --------#
            Pro_df1 = pd.read_sql_query("SELECT * FROM tblInput where Status = 'Completed' and Process_Status in ('Completed', 'Re-update Done');", conn)
            Pro_df1['ProcessDate'] =  pd.to_datetime(Pro_df1['ProcessDate'], format='%d-%m-%Y')
            

            Pro_df = Pro_df1.loc[(Pro_df1['ProcessDate'] == Report_Sdate)]
            
            Pro_df1 = Pro_df1.loc[(Pro_df1['ProcessDate'] >=Report_Sdate) & (Pro_df1['ProcessDate'] <= Report_Edate)]
            #Pro_df1['Week']  = Pro_df1['ProcessDate'].dt.week
            
            
            #Pro_df['NoofItems'] = np.where(Pro_df['NoofItems'] == NULL, 0, Pro_df['NoofItems'])
            #xl.view(Pro_df1, table=False)
            Pro_daily = Pro_df['NoofItems'].sum()
            
            Pro_range =  Pro_df1['NoofItems'].sum()
            # xl.view(Pro_df1, table = False)
            # xl.view(Pro_df, table=False)
            Ent_Label1.config(text= int(Pro_daily))
            Ent_Label2.config(text= int(Pro_range))


            # -------- Authorisation Count --------#
            Auth_df = pd.read_sql_query("Select * FROM tblAuthorisation;", conn)            
            #Auth_df['Authdate'] = pd.to_datetime(Auth_df['Authdate'])                        
            Auth_df['Authdate'] = pd.to_datetime(Auth_df['Authdate'], format='%d-%m-%Y')
            Auth_df = Auth_df.loc[(Auth_df['Authdate'] >= Report_Sdate) & (Auth_df['Authdate']<=Report_Edate)]
            print(Auth_df)
            Auth_df1 = Auth_df.loc[(Auth_df['Authdate'] == Report_Sdate)]
            Auth_daily = Auth_df1['UserName'].count()
            Auth_cunt = Auth_df['UserName'].count()
            Ent_Label4.config(text=Auth_daily)
            Ent_Label5.config(text=Auth_cunt)
            

            # -------- QC Database --------#
            QC_df = pd.read_sql_query("Select * FROM tblQc_Production;", conn)
            #QC_df['WITProcessDate'] = pd.to_datetime(QC_df['WITProcessDate'])  
            QC_df['Qcdate'] = pd.to_datetime(QC_df['Qcdate'], format='%d-%m-%Y')            
            QC_df['WITProcessDate'] = pd.to_datetime(QC_df['WITProcessDate'], format='%d-%m-%Y')
            QC_df = QC_df.loc[(QC_df['Qcdate'] >= Report_Sdate) & (QC_df['Qcdate']<=Report_Edate)]
            QC_df1 = QC_df.loc[(QC_df['Qcdate'] == Report_Sdate)]
            #xl.view(QC_df, table=False)
            # xl.view(QC_df1, table=False)
            
            
            
            QC_daily = QC_df1['QcCount'].sum()
            QC_cunt = QC_df['QcCount'].sum()
            Ent_Label7.config(text=QC_daily)
            Ent_Label8.config(text=QC_cunt)
            
            # -------- Error Database --------#                        
            QC_df2 = QC_df.loc[(QC_df['WITProcessDate'] >= Report_Sdate) & (QC_df['WITProcessDate']<=Report_Edate)]
            #xl.view(QC_df2, table=False)
            #print(QC_df2)
            
            # -------- Error Item --------#
            # QC_Error_item = QC_df['QcCount'].sum()
            
            # QC_Error_item_D = QC_df['QcCount'].sum()
            # # Ent_Label22.config(text = QC_Error_item_D)
            # # Ent_Label23.config(text = QC_Error_item)
            # print(QC_Error_item, QC_Error_item_D )

            # -------- Error Count day & range --------#
            Item_checked_d = pd.DataFrame(QC_df2.loc[(QC_df2['WITProcessDate'] == Report_Sdate)])
            Item_checked_day = Item_checked_d['QcCount'].sum()                       
            QC_Error1 = Item_checked_d.loc[(Item_checked_d['CompletedCorrectly'] == 'No')]
            Qc_Error_daily = QC_Error1['QcCount'].sum()
            
            Item_checked_Rng = QC_df2['QcCount'].sum()
            Error_Rng = pd.DataFrame(QC_df2.loc[(QC_df2['CompletedCorrectly'] == 'No')] )                   
            Qc_Error_cunt = Error_Rng['QcCount'].sum()
            
            print('Error')
            print(Item_checked_day, Item_checked_Rng)
            print(Qc_Error_daily,Qc_Error_cunt)
            
            # -------- Error Itemchecked count --------#
            Ent_Label10.config(text= Item_checked_day)
            Ent_Label11.config(text= Item_checked_Rng)
            
            # -------- Error count --------#
            Ent_Label22.config(text = Qc_Error_daily)
            Ent_Label23.config(text = Qc_Error_cunt)
           
                       
         #############################  Treeview Production & QC #############################
            def Input_Treeview(Pro_QC_df, Selection):
                
            #-------- Treeview1 Style & view data  --------#   
                global tv1, Myworks_vsb1
                # -------- Treeview 1 --------#
                style = ttk.Style()
                style.theme_use('default')
                style.configure("Treeview.Heading",foreground="Black",font=("Trebuchet MS",9,"bold"))
                style.configure("Treeview",background='white',foreground="Black",font=("Trebuchet MS",8),rowheight=20)
                style.map('Treeview', background=[('selected', '#00728F')])
                tv1 = MyTreeview(can_dash) 
                                                                                                                                             
                Myworks_vsb1 = ttk.Scrollbar(can_dash, orient="vertical", command=tv1.yview)
                tv1.configure(yscrollcommand=Myworks_vsb1.set)
                tv1.tag_configure('evenrow', background='skyblue')               
                
                if Selection == 1:     
                                        
                                        
                    tv1.place(relx=0.03,rely=0.48, height=300, width=625)
                    Myworks_vsb1.place(relx=0.560,rely=0.48,height=300)
                                                                                   
                    df2=Pro_QC_df.drop(columns=['Transactions','UserID'], axis=1)                    
                    
                    tv1.insert('', '0', 'i1', text ='Transactions')
                    tv1.heading('#0', text ='Transactions', anchor=CENTER)
                    tv1['columns'] = df2.columns.tolist()            

                    for i in df2.columns.tolist():
                        tv1.column(i, width = 80, anchor='center')
                        tv1.heading(i, text = i)
                    
                    transkeyno=1
                    userkeyno=100                    
                        
                    for trans2 in Pro_QC_df['Transactions'].drop_duplicates().tolist():
                        #print(transname)
                        tv1.insert('', str(transkeyno), trans2.strip(), text=trans2)
                        tv1.move(trans2, 'i1', 'end')

                        # sub hierarchy userid level in treeview
                        rowid = 0
                        for userid in Pro_QC_df[Pro_QC_df['Transactions']==trans2]['UserID'].tolist():
                            if rowid%2==0:
                                tv1.insert('', str(userkeyno), userkeyno, text=userid,tags=('oddrow',))
                            else:
                                tv1.insert('', str(userkeyno), userkeyno, text=userid,tags=('evenrow',))

                            tv1.move(userkeyno, trans2, 'end')
                            rowid=rowid+1

                        # Mapping value to respective row and column combination

                            for index, row in Pro_QC_df[(Pro_QC_df['Transactions']==trans2) & (Pro_QC_df['UserID']==userid)].iterrows():
                                for colname in df2.columns.tolist():
                                    tv1.set(userkeyno, colname,row[colname])

                            userkeyno=userkeyno+1

                        transkeyno=transkeyno+1
                        
                    
                    dftrans1= Pro_QC_df.groupby(['Transactions'])[['NoofItems_day', 'NoofItems_Range', 'QcCount_day', 'QcCount_Range']].sum().reset_index()

                    #print(dftrans)
                    # xw.view(dftrans,table=false)
                    
                    #print(dftrans1)

                    for index, row in dftrans1.iterrows():
                        for colname1 in dftrans1.columns.tolist():
                            #print(row['Transactions'])
                            if colname1 != 'Transactions':
                                tv1.set(row['Transactions'].strip(), colname1,row[colname1])
                            
                elif Selection == 2:
                    
                    for item in tv1.get_children():
                        tv1.delete(item) 
                    for item in tv2.get_children():
                        tv2.delete(item)                 
                    tv1.place_forget()
                    tv2.place_forget()
                    Myworks_vsb2.place_forget()
                    #messagebox.showinfo('Alter', 'Checking')
                                                                                                                                                                                     
                    
                    tv1.place(relx=0.03,rely=0.48, height=300, width=750)
                    Myworks_vsb1.place(relx=0.660,rely=0.48,height=300) 
                                                           
                            
                    df2=Pro_QC_df.drop(columns=['UserID', 'Transactions'], axis=1)
                                                                              
                    #tv3.insert('', '0', 'i1', text ='Transactions')
                    tv1.heading('#0', text ='UserID', anchor=CENTER)
                    User_tree_df = pd.DataFrame(Pro_QC_df).round(0)
                    User_tree_df['Prod %'] = '-'
                    User_tree_df['Utilz %'] = '-'
                    User_tree_df['QC %'] = '-'
                    
                    
                    tv1['columns'] = df2.columns.tolist()            
                    for i in df2.columns.tolist():
                        tv1.column(i, width = 60, anchor='center')
                        tv1.heading(i, text = i, anchor = 'center')
                    
                    transkeyno=1
                    userkeyno=100                    
                        
                    for trans2 in Pro_QC_df['UserID'].drop_duplicates().tolist():
                        #print(transname)
                        tv1.insert('', str(transkeyno), trans2.strip(), text=trans2)
                        #tv3.move(userkeyno, trans2, 'end')

                        # sub hierarchy userid level in treeview
                        rowid = 0
                        for userid in Pro_QC_df[Pro_QC_df['UserID']==trans2]['Transactions'].tolist():
                            if rowid%2==0:
                                tv1.insert('', str(userkeyno), userkeyno, text=userid,tags=('oddrow',))
                            else:
                                tv1.insert('', str(userkeyno), userkeyno, text=userid,tags=('evenrow',))

                            tv1.move(userkeyno, trans2, 'end')
                            rowid=rowid+1

                        # Mapping value to respective row and column combination

                            for index, row in User_tree_df[(User_tree_df['UserID']==trans2) & (User_tree_df['Transactions']==userid)].iterrows():
                                for colname in df2.columns.tolist():
                                    tv1.set(userkeyno, colname,row[colname])

                            userkeyno=userkeyno+1

                        transkeyno=transkeyno+1                        
                    
                    dftrans1= Pro_QC_df.groupby(['UserID']).agg({'Prod':'sum', 'Auth':'sum', 'QC':'sum','CheckedItm':'sum', 'Error':'sum', 'Prod %':'mean', 'Utilz %':'mean', 'QC %':'mean'}).reset_index()
                    dftrans1 = dftrans1.round({'Prod %':2, 'Utilz %':2, 'QC %':2})
                    print(dftrans1)
                    #print(Pro_QC_df)                    
                    # xw.view(dftrans,table=false)
                    
                    #print(dftrans1)

                    for index, row in dftrans1.iterrows():
                        for colname1 in dftrans1.columns.tolist():
                            #print(row['Transactions'])
                            if colname1 != 'UserID':
                                tv1.set(row['UserID'].strip(), colname1,row[colname1])
                                                            
         #############################  Treeview1 End #############################
                        
                               
            
         #############################  Treeview Authorisation #############################
            def Auth_Treeview(Auth_tv, Selection):
            #-------- Treeview2 Style & view data  --------#                
                
                # -------- Treeview 2 --------#
                global tv2, Myworks_vsb2
                print(Selection)
                tv2 = MyTreeview(can_dash)                            
                Myworks_vsb2 = ttk.Scrollbar(can_dash, orient="vertical", command=tv2.yview)
                #Myworks_vsb2.place(x=25+(75*(len(Pro_QC_df.columns)+1)), y=100, height=425)
                #Myworks_vsb2.place(relx=0.920,rely=0.45,height=300)
                tv2.configure(yscrollcommand=Myworks_vsb2.set)
                tv2.tag_configure('evenrow', background='skyblue')
                # for col in tv2['columns']:
                #     tv2.heading(col, text='')
                if Selection == 1:
                    tv2.delete(*tv2.get_children())                
                    for item in tv2.get_children():
                            tv2.delete(item)
                    tv2.place_forget()     
                    tv2.place(relx=0.600,rely=0.48, height=300, width=425)
                    Myworks_vsb2.place(relx=0.960,rely=0.48,height=300)
                    df2=Auth_tv.drop(columns=['AuthScreen','AuthUserID'], axis=1)

                    tv2.insert('', '0', 'i1', text ='AuthScreen')

                    tv2.heading('#0', text ='Transactions', anchor=CENTER)
                    tv2['columns'] = df2.columns.tolist()

                    for i in df2.columns.tolist():
                        tv2.column(i, width = 60, anchor='center')
                        tv2.heading(i, text = i)
                    

                    transkeyno=1
                    userkeyno=100                    
                        
                    for trans2 in Auth_tv['AuthScreen'].drop_duplicates().tolist():
                        #print(transname)
                        tv2.insert('', str(transkeyno), trans2.strip(), text=trans2)
                        tv2.move(trans2, 'i1', 'end')

                        # sub hierarchy userid level in treeview
                        rowid = 0
                        for userid in Auth_tv[Auth_tv['AuthScreen']==trans2]['AuthUserID'].tolist():
                            if rowid%2==0:
                                tv2.insert('', str(userkeyno), userkeyno, text=userid,tags=('oddrow',))
                            else:
                                tv2.insert('', str(userkeyno), userkeyno, text=userid,tags=('evenrow',))

                            tv2.move(userkeyno, trans2, 'end')
                            rowid=rowid+1

                        # Mapping value to respective row and column combination

                            for index, row in Auth_tv[(Auth_tv['AuthScreen']==trans2) & (Auth_tv['AuthUserID']==userid)].iterrows():
                                for colname in df2.columns.tolist():
                                    tv2.set(userkeyno, colname,row[colname])

                            userkeyno=userkeyno+1

                        transkeyno=transkeyno+1
                    
                    dftrans2= Auth_tv.groupby(['AuthScreen'])[['Auth_day', 'Auth_Range']].sum().reset_index()

                        # #print(dftrans2)
                        # # xw.view(dftrans,table=false)                        

                    for index, row in dftrans2.iterrows():
                        for colname2 in dftrans2.columns.tolist():                    
                            if colname2 != 'AuthScreen':
                                tv2.set(row['AuthScreen'], colname2,row[colname2])
                elif Selection == 2:
                    tv2.delete(*tv2.get_children())
                    tv2.place_forget()
                    Myworks_vsb2.place_forget()
                        
         #############################  Treeview2 End #############################
            
            
            
            
         
         #############################  Utalization start #############################

            #----- Day & week wise total available hours -----#

            Pro_df1 = pd.DataFrame(Pro_df1)
            PMin = Pro_df1.groupby(['ProcessDate', 'UserID']).agg(Min_time = ('StartTime', np.min), Max_time = ('EndTime', np.max))

            NP_Min = Non_Prod.groupby(['NpDate', 'NPEntryBY']).agg(Min_time = ('NPStartTime', np.min), Max_time = ('NPEndTime', np.max))
            NP_Min = NP_Min.rename(columns={'NPStartTime': 'StartTime', 'NPEndTime': 'EndTime'})

            TMax_Min = PMin.append(NP_Min)
            TMax_Min = TMax_Min.reset_index(drop=False)
            TMax_Min['ProcessDate']=pd.to_datetime(TMax_Min['ProcessDate'])
            TMax_Min['Min_time']=pd.to_datetime(TMax_Min['Min_time'])
            TMax_Min['Max_time']=pd.to_datetime(TMax_Min['Max_time'])
            TMax_Min = TMax_Min.groupby(['ProcessDate','UserID'])
            TMax_Min = TMax_Min.agg(Min_time=('Min_time', np.min), Max_time=('Max_time', np.max))
            TMax_Min = TMax_Min.reset_index(drop=False)
            TMax_Min = pd.DataFrame(TMax_Min)

            TMax_Min['Date_Diff'] = TMax_Min['Max_time'] - TMax_Min['Min_time']                                    
            #TMax_Min['Date_Diff'] = TMax_Min['Date_Diff'].replace('0 days','')            
            Pro_avl = round(TMax_Min['Date_Diff'].sum()/pd.Timedelta(hours=1),2)
            # print('Available hours')
            # print(TMax_Min)
                        
            
            #-------Daily Availabe hours
            Pro_avl_day = TMax_Min.loc[(TMax_Min['ProcessDate'] == Report_Sdate)]
            Pro_avl_day = round(Pro_avl_day['Date_Diff'].sum()  /pd.Timedelta(hours=1),2)

            # print('Available hrs')
            # print(Pro_avl, Pro_avl_day)
            #print(TMax_Min)
            #print(TMax_Min.dtypes)

            if Pro_avl_day==0.0:
                Pro_avl_day = 0
                messagebox.showerror("No Data", "No Data found for " + date1)
                return False

            #----- Non Production & Break hours -----#
            # Non_Prod['NPStartTime'] = Non_Prod['NPStartTime'].str[-8:]
            # Non_Prod['NPStartTime'] = pd.to_timedelta(Non_Prod['NPStartTime'])
            # Non_Prod['NPEndTime'] = Non_Prod['NPEndTime'].str[-8:]
            # Non_Prod['NPEndTime'] = pd.to_timedelta(Non_Prod['NPEndTime'])
            # Non_Prod['Date_Diff'] = Non_Prod['NPEndTime'] - Non_Prod['NPStartTime']
            #print(round(Non_Prod['Date_Diff'].sum()/pd.Timedelta(hours=1),2))

            Non_Prod['NPStartTime'] = pd.to_datetime(Non_Prod['NPStartTime'])
            Non_Prod['NPEndTime'] = pd.to_datetime(Non_Prod['NPEndTime'])
            Non_Prod['Date_Diff'] = Non_Prod['NPEndTime'] - Non_Prod['NPStartTime']
            #print(Non_Prod)
                        
            # print(round(Non_Prod['Hours'].sum()/pd.Timedelta(hours=1),2))

            Weekly_Break=pd.DataFrame(Non_Prod[Non_Prod['NPBreakItem'] =='Break'])
            Total_break=round((Weekly_Break['Date_Diff'].sum())/pd.Timedelta(hours=1),2)
            Day_Break=pd.DataFrame(Weekly_Break[Weekly_Break['NpDate'] == Report_Sdate])
            Current_break=round((Day_Break['Date_Diff'].sum())/pd.Timedelta(hours=1),2)            
            # print('Non Breaks')
            # print(Total_break, Current_break)

            #----- Non Break hours -----#
            Weekly_Nhrs=pd.DataFrame(Non_Prod[Non_Prod['NPBreakItem'] !='Break'])
            Total_Nhrs=round((Weekly_Nhrs['Date_Diff'].sum())/pd.Timedelta(hours=1),2)
            Day_NonHrs=pd.DataFrame(Weekly_Nhrs[Weekly_Nhrs['NpDate'] ==Report_Sdate])
            Current_Nhrs =round((Day_NonHrs['Date_Diff'].sum())/pd.Timedelta(hours=1),2)

            # print('NonP Breaks')
            # print(Total_Nhrs, Current_Nhrs)


            #----- Other team production - Loan IN 3 -----#

            OtherT_Prod['START_TIME'] = pd.to_datetime(OtherT_Prod['START_TIME'])
            OtherT_Prod['END_TIME'] = pd.to_datetime(OtherT_Prod['END_TIME'])
            OtherT_Prod['Date_Diff'] = OtherT_Prod['END_TIME'] - OtherT_Prod['START_TIME']

            Loin_P=pd.DataFrame(OtherT_Prod[OtherT_Prod['USER_TEAM'] == 'IS - Maintenance'])
            if len(Loin_P) == 0:
                Loin_all = 0
                Loin_Day = 0
            else:
                Loin_all=round((Loin_P['Date_Diff'].sum())/pd.Timedelta(hours=1),2)
                Loin_Day_df=Loin_P[Loin_P['P_Date'] == Report_Sdate]            
                Loin_Day=round((Loin_Day_df['Date_Diff'].sum())/pd.Timedelta(hours=1),2)

            # print('Other Tem Production' )
            # print(Loin_Day, Loin_all)

            #----- Other team Non-Production - Loan IN 4 -----#

            OtherT_NonProd['START_TIME'] = pd.to_datetime(OtherT_NonProd['START_TIME'])
            OtherT_NonProd['END_TIME'] = pd.to_datetime(OtherT_NonProd['END_TIME'])
            OtherT_NonProd['Date_Diff'] = OtherT_NonProd['END_TIME'] - OtherT_NonProd['START_TIME']

            OtherT_NonProd =pd.DataFrame(OtherT_NonProd[OtherT_NonProd['USER_TEAM'] == 'IS - Maintenance'])
            OtherT_NonProd=pd.DataFrame(OtherT_NonProd[OtherT_NonProd['ACTIVITY']=='Process Training'])
            Loin_NProd=pd.DataFrame(OtherT_NonProd[OtherT_NonProd['ACTIVITY_TEAM'] != 'IS - Maintenance'])

            if len(Loin_NProd)==0:
                Loin_Np_all=0
                Loin_Np_day=0
            else:
                Loin_Np_all=round((Loin_NProd['Date_Diff'].sum())/pd.Timedelta(hours=1),2)
                Loin_Np_day=Loin_NProd[Loin_NProd.P_DATE==Report_Sdate]
                Loin_Np_day=round((Loin_Np_day['Date_Diff'].sum())/pd.Timedelta(hours=1),2)

            # print('Other Tem Non-P')
            # print(Loin_Np_day, Loin_Np_all)

            #----- Production - Lout IN 5 -----#
            Pro_df1['StartTime'] = pd.to_datetime(Pro_df1['StartTime'])
            Pro_df1['EndTime'] = pd.to_datetime(Pro_df1['EndTime'])
            Pro_df1['Break_Hrs'] = pd.to_timedelta(Pro_df1['Break_Hrs'])
            Pro_df1['Date_Diff'] = Pro_df1['EndTime'] - Pro_df1['StartTime']
            Pro_df1['Date_Diff'] = Pro_df1['Date_Diff'] - Pro_df1['Break_Hrs']

            #Lout_P=pd.DataFrame(Pro_df1[Pro_df1['USER_TEAM'] == 'IS - Maintenance'])
            Lout_all=round((Pro_df1['Date_Diff'].sum())/pd.Timedelta(hours=1),2)
            Lout_Day_df=Pro_df1[Pro_df1['ProcessDate'] == Report_Sdate]
            Lout_Day=round((Lout_Day_df['Date_Diff'].sum())/pd.Timedelta(hours=1),2)

            # print('Production Lout')
            # print(Lout_Day, Lout_all)

            #----- Non-Production - Loan IN 6 -----#

            #Non_Prod =pd.DataFrame(Non_Prod[Non_Prod['USER_TEAM'] == 'IS - Maintenance'])
            Non_Prod_df=pd.DataFrame(Non_Prod[Non_Prod['NPBreakItem']=='Process Training'])
            Lout_NProd=pd.DataFrame(Non_Prod_df[Non_Prod_df['NPActivity'] != 'IS - Maintenance'])

            if len(Lout_NProd)==0:
                Lout_Np_all=0
                Lout_Np_day=0
            else:
                Lout_Np_all=round((Lout_NProd['Date_Diff'].sum())/pd.Timedelta(hours=1),2)
                Lout_Np_day=Lout_NProd[Lout_NProd['NpDate']==Report_Sdate]
                Lout_Np_day=round((Lout_Np_day['Date_Diff'].sum())/pd.Timedelta(hours=1),2)

            # print('Non Production Lout')
            # print(Lout_Np_day, Lout_Np_all)

            #----- Error & Error item check % -----#

            if Qc_Error_daily==0 or Item_checked_day==0:
                Error_day="100%"
            else:
                Error_day="{:.2%}".format(1-(Qc_Error_daily/Item_checked_day))


            if Qc_Error_cunt==0 or Item_checked_Rng==0:
                Error_total="100%"
            else:
                Error_total="{:.2%}".format(1-(Qc_Error_cunt/Item_checked_Rng))

             #----- QC % -----#
            Ent_Label19.config(text=Error_day)
            Ent_Label20.config(text=Error_total)

            #----- Utalization % -----#

            Utliisation_Day="{:.2%}".format(((Pro_avl_day+Loin_Day+Loin_Np_day)-(Current_break+Lout_Day+Current_Nhrs))/((Pro_avl_day-(Current_break+Lout_Day+Lout_Np_day))+(Loin_Day+Loin_Np_day)))
            Utliisation_all="{:.2%}".format(((Pro_avl+Loin_all+Loin_Np_all)-(Total_break+Lout_all+Total_Nhrs))/((Pro_avl-(Total_break+Lout_all+Lout_Np_all))+(Loin_all+Loin_Np_all)))
            Ent_Label16.config(text=Utliisation_Day)
            Ent_Label17.config(text=Utliisation_all)
            
            #############################  Utalization End #############################
            
            #############################  Productivity start #############################

            #----- Production & QC RPH -----#
            conn1 = sqlite3.connect(Supportdb, timeout=45,uri=True)
            Pro_RPH = pd.read_sql_query("SELECT Transactions, ProductionRPH, QCRPH FROM tblISM_Process_1", conn1)
            Pro_RPH = Pro_RPH.groupby(['Transactions', 'ProductionRPH', 'QCRPH']).size().reset_index()
            
            Auth_RPH = pd.read_sql_query("Select Authorisationscreen, AuthRPH From tblISM_Process", conn1)
            Auth_RPH = Auth_RPH.groupby(['Authorisationscreen', 'AuthRPH']).size().reset_index()
            Auth_RPH = Auth_RPH.rename(columns={'Authorisationscreen' : 'Transactions'})                                            
            Auth_RPH.drop(columns=[0], axis=1, inplace=True)
            #print(RPH_df)

            # conn.close()
            # conn_O.close()

            #----- Authorisation Productivity % -----#            
            Auth_df_Range = Auth_df.pivot_table(values='UserName', index=['AuthScreen', 'AuthUserID'], aggfunc= 'count', fill_value=0).reset_index()
            Auth_df_Range = Auth_df_Range.rename(columns={'AuthScreen' : 'Transactions', 'AuthUserID' : 'UserID', 'UserName' : 'NoofItems'})            
            
            Auth_df_day = Auth_df1.pivot_table(values='UserName', index=['AuthScreen', 'AuthUserID'], aggfunc= 'count', fill_value=0).reset_index()
            Auth_df_day = Auth_df_day.rename(columns={'AuthScreen' : 'Transactions', 'AuthUserID' : 'UserID', 'UserName' : 'NoofItems'})
                        
            Auth_df_Range = pd.merge(Auth_df_day, Auth_df_Range, how='outer', left_on=['Transactions', 'UserID'], right_on=['Transactions', 'UserID'], suffixes= ('_day', '_Range')).fillna(0)
            
            #----- Authorisation validation -----#
            if len(Auth_df_Range) == 0:
                messagebox.showinfo("Data Information", "Oops! Authorisation data is not available for the selected date range.")
                Auth_df_Range['Transactions'] = 0
                Auth_df_Range['UserID'] = 0
                Auth_df_Range['NoofItems_day'] = 0
                Auth_df_Range['NoofItems_Range'] = 0 
                    
            
                       
            
            #----- Production & Auth RPH Range -----#
            # print("prodcution data")
            # print(Pro_df)
            Pro_df_day = Pro_df.rename(columns={"TransactionType": "Transactions"})
            Pro_df_day = Pro_df_day.loc[(Pro_df_day['ProcessDate'] == Report_Sdate)]
            #xl.view(Pro_df_day, table=False)
            Pro_df_day = Pro_df_day.pivot_table(values='NoofItems', index=['Transactions','UserID'], aggfunc=np.sum, fill_value=0).reset_index()            
            #print(Pro_df_day)
            

            Pro_df_Range = Pro_df1.rename(columns={"TransactionType": "Transactions"})
            Pro_df_Range=Pro_df_Range.pivot_table(values='NoofItems', index=['Transactions','UserID'], aggfunc=np.sum, fill_value=0).reset_index()                                                
            Pro_df_Range =  pd.merge(Pro_df_day, Pro_df_Range, how='outer', left_on=['Transactions', 'UserID'], right_on=['Transactions', 'UserID'], suffixes= ('_day', '_Range')).fillna(0)
                        
            # print('Merge day & range')
            # xl.view(Pro_df_Range, table=False)


            #----- QC RPH Range -----#
            
            QC_df_Range = QC_df.rename(columns={"QCUserID": "UserID"})
            Qc_df_day   = QC_df_Range.loc[(QC_df['Qcdate'] == Report_Sdate)]
            Qc_df_day = Qc_df_day.pivot_table(values ='QcCount', index=['Transactions', 'UserID'], aggfunc=np.sum, fill_value=0)
            Qc_df_day = Qc_df_day.reset_index(drop= False)

            QC_df_Range = QC_df_Range.pivot_table(values ='QcCount', index=['Transactions', 'UserID'], aggfunc=np.sum, fill_value=0)
            QC_df_Range = QC_df_Range.reset_index(drop= False)

            QC_df_Range =  pd.merge(Qc_df_day, QC_df_Range, how='outer', left_on=['Transactions', 'UserID'], right_on=['Transactions', 'UserID'], suffixes= ('_day', '_Range')).fillna(0)
            #print(Qc_df_day)
            #print(QC_df_Range)
                                    

            #----- Validation to Prodcution & QC dataframe -----#
            if len(Pro_df_Range) == 0:
                messagebox.showinfo("Data Information", "Oops! Production data is not available for the selected date range.")
                return False
            elif len(QC_df_Range) == 0:
                messagebox.showinfo("Data Information", "Oops! QC data is not available for the selected date range.")
                QC_df_Range['Transactions'] = 0
                QC_df_Range['UserID'] = 0
                QC_df_Range['QcCount_day'] = 0
                QC_df_Range['QcCount_Range'] = 0 
                 
                                                              
                #return False
                
            #----- Authorisation Productivity between & days wise % -----#   
            Auth_RPH_df =  pd.merge(Auth_df_Range, Auth_RPH, left_on=['Transactions'], right_on=['Transactions'], suffixes= ('_day', '_Range')).fillna(0)                              
            Auth_RPH_df['RPH_Auth_d'] = Auth_RPH_df['NoofItems_day']/Auth_RPH_df['AuthRPH']
            Auth_RPH_df['RPH_Auth_R'] = Auth_RPH_df['NoofItems_Range']/Auth_RPH_df['AuthRPH']
            Auth_RPH_df['Totlal_Auth_RPH'] = Auth_RPH_df['RPH_Auth_d'] + Auth_RPH_df['RPH_Auth_R']
            Day_Auth_RPH = round(Auth_RPH_df['RPH_Auth_d'].sum(),2)
            Range_Auth_RPH = round(Auth_RPH_df['RPH_Auth_R'].sum(),2)
            
            # print('auth data')
            # print(Auth_RPH_df)
            # print(Day_Auth_RPH, Range_Auth_RPH)    
            

            #----- Merge dataframe from Production & QC, RPH -----#            
            Pro_QC_R =  pd.merge(Pro_df_Range, QC_df_Range, how='outer', left_on=['Transactions', 'UserID'], right_on=['Transactions', 'UserID']).fillna(0)
            Pro_QC_R['NoofItems_day'] = Pro_QC_R['NoofItems_day'].astype(int)
            Pro_QC_R['NoofItems_Range'] = Pro_QC_R['NoofItems_Range'].astype(int)
            Pro_QC_R['QcCount_day'] = Pro_QC_R['QcCount_day'].astype(int)
            Pro_QC_R['QcCount_Range'] = Pro_QC_R['QcCount_Range'].astype(int)


            Productivity = pd.merge(Pro_QC_R, Pro_RPH, how='left', left_on=['Transactions'], right_on=['Transactions']).fillna(0)
            Productivity['ProductionRPH'] = Productivity['ProductionRPH'].astype(int)
            Productivity['QCRPH'] = Productivity['QCRPH'].astype(int)
            # print(Productivity)
            
            

            #----- Productivity between days % -----#
            Productivity['RPH_Prod_R'] =Productivity['NoofItems_Range']/Productivity['ProductionRPH']
            Productivity['RPH_QC_R'] = Productivity['QcCount_Range']/Productivity['QCRPH']
                                    
            Productivity['Total_RPH_R'] = Productivity['RPH_Prod_R'] + Productivity['RPH_QC_R']
            Range_RPH =  round(Productivity['Total_RPH_R'].sum(),2) + Range_Auth_RPH

            #----- Productivity days % -----#
            Productivity['RPH_Prod_D'] =Productivity['NoofItems_day']/Productivity['ProductionRPH']
            Productivity['RPH_QC_D'] = Productivity['QcCount_day']/Productivity['QCRPH']

            Productivity['Total_RPH_D'] = Productivity['RPH_Prod_D'] + Productivity['RPH_QC_D']
            Day_RPH =  round(Productivity['Total_RPH_D'].sum(),2) + Day_Auth_RPH
            #xl.view(Productivity, table=False)
            #print(Pro_QC_R)
            # print(Pro_df_Range)
            # print("QC")
            # print(QC_df_Range)
            # print(Productivity)
            # print(Day_RPH,Range_RPH )


            Production_Day="{:.2%}".format(Day_RPH/((Pro_avl_day+Loin_Day)-(Current_break+Lout_Np_day+Current_Nhrs)))
            Production_all="{:.2%}".format(Range_RPH/((Pro_avl+Loin_all)-(Total_break+Lout_Np_all+Total_Nhrs)))
            Ent_Label13.config(text= Production_Day)
            Ent_Label14.config(text= Production_all)
            #print(Day_RPH,Range_RPH)
            
            #############################  Productivity End #############################
            
            
            #############################  Team & User wise Treeview Information #############################
            
            #----- Treeview Production & QC -----#
                           
            # Prod_day = Pro_df.groupby(['TransactionType', 'UserID'])[['NoofItems']].sum().reset_index()
            # Prod_day = Prod_day.rename(columns={'TransactionType':'Transactions'})  
            
            # #Prod_Rng = Pro_df1.pivot_table(values='NoofItems', index=['UserID', 'TransactionType'],aggfunc=np.sum, fill_value=0)
            # Prod_Rng = Pro_df1.groupby(['TransactionType', 'UserID'])[['NoofItems']].sum().reset_index()
            # Prod_Rng = Prod_Rng.rename(columns={'TransactionType':'Transactions'})              
            # #Tree_Prod =  pd.merge(Prod_day, Prod_Rng, how='outer', left_on=['Transactions', 'UserID'], right_on=['Transactions', 'UserID'], suffixes= ('_day', '_Range')).fillna(0) 
                                
            # QC_day = QC_df1.rename(columns={'QCUserID':'UserID'})
            # QC_day = QC_day.groupby(['Transactions','UserID'])[['QcCount']].sum().reset_index()            
                        
            # QC_Rng = QC_df.rename(columns={'QCUserID':'UserID'})                
            # QC_Rng = QC_Rng.groupby(['Transactions','UserID'])[['QcCount']].sum().reset_index()            
            #Tree_QC =  pd.merge(QC_day, QC_Rng, how='outer', left_on=['Transactions', 'UserID'], right_on=['Transactions', 'UserID'], suffixes= ('_day', '_Range')).fillna(0)
            #Pro_QC_df = pd.concat([Tree_Prod, Tree_QC]).fillna(0)
            
            #xl.view(Pro_QC_df, table=False)
            
            #-------User Login & Logout  -------#
            # Auth_user = pd.DataFrame(Auth_df)
            # Auth_user = Auth_user.groupby( ['AuthUserID', 'AuthScreen'])[['UserName']].count().reset_index()
            # #Auth_user = Auth_user.pivot_table(values=['UserName'], index=['AuthUserID'],aggfunc=np.mean, fill_value=0).reset_index()
            # Auth_user = Auth_user.rename(columns=({'AuthUserID' : 'UserID', 'AuthScreen': 'Transactions', 'UserName' : 'Auth'}))
            
            Auth_uer_df = pd.DataFrame(Auth_RPH_df)
            Auth_uer_df = Auth_uer_df[['UserID', 'Transactions', 'NoofItems_Range', 'Totlal_Auth_RPH']]
            Auth_uer_df = Auth_uer_df.rename(columns=({'NoofItems_Range' : 'Auth'}))
            # print(Auth_user)
            # print(Auth_uer_df)
            
            
            #-------User Login & Logout  -------#
            User_Rawdata = pd.DataFrame(TMax_Min)
            User_Rawdata = User_Rawdata.rename(columns={'Min_time' : 'LoginTIme', 'Max_time' : 'LogoutTime', 'Date_Diff' : 'AvailbelHrs'})
            User_Rawdata['AvailbelHrs'] = User_Rawdata['AvailbelHrs'].astype(str).str.replace('0 days ', '')
            #User_Rawdata['AvailbelHrs'] = User_Rawdata['AvailbelHrs'].astype(str).replace('0 days', '')                  
            #print(User_Rawdata.dtypes)      
            
            #User_Rawdata['AvailbelHrs'] = pd.to_datetime(User_Rawdata['AvailbelHrs'].dt.strptime('%h:%m:%s'))
            # User_Rawdata['LogoutTime'] = pd.to_timedelta(User_Rawdata[ 'LogoutTime'],unit='hr')
            # User_Rawdata['AvailbelHrs'] = pd.to_timedelta(User_Rawdata[ 'AvailbelHrs'],unit='hr')
            
            # print(User_Rawdata)
           # xl.view(User_Rawdata, table=False)
            
            #-----  Production & QC RPH -----#
            Prod_Qc_df = pd.DataFrame(Productivity)                                                                
            Prod_Qc_RPH = Prod_Qc_df[['UserID', 'Transactions', 'NoofItems_Range', 'QcCount_Range', 'ProductionRPH', 'QCRPH', 'Total_RPH_R']]                                
            Prod_Qc_RPH = pd.merge(Prod_Qc_RPH, Auth_uer_df, how='outer', left_on=['UserID', 'Transactions'], right_on=['UserID', 'Transactions']).fillna(0)
            Total_RPH = Prod_Qc_RPH.pivot_table(values='Total_RPH_R', index=['UserID'], aggfunc=np.sum, fill_value=0).reset_index()                
            Prod_Qc_RPH.drop(columns= ['Total_RPH_R'], axis=1, inplace=True)
            
            Prod_Qc_RPH = pd.merge(Prod_Qc_RPH, Total_RPH, how='outer', left_on=['UserID'], right_on=['UserID'])                
            Prod_Qc_RPH['Total_RPH'] = Prod_Qc_RPH['Totlal_Auth_RPH'] + Prod_Qc_RPH['Total_RPH_R']
            Prod_Qc_RPH = Prod_Qc_RPH.rename(columns= {'NoofItems_Range' : 'Prod', 'QcCount_Range' : 'QC'})
            
            
            #print(Total_RPH)
            
            #print(Prod_Qc_RPH)
            #xl.view(Prod_Qc_RPH, table=False)
                
            #-----  User Treeview Error & Item Check -----#
            User_QC =  QC_df2.rename(columns= {'QCUserID' : 'UserID'})
            User_Qc_Itm = User_QC.groupby(['Transactions','UserID'])[['QcCount']].sum().reset_index()
            User_Qc_Itm = User_Qc_Itm.rename(columns= {'QcCount' : 'CheckedItm'})
            #print(User_Qc_Itm)
            
            User_Qc_check =pd.DataFrame(User_QC.loc[(User_QC['CompletedCorrectly'] == 'No')] )            
            User_Qc_check = User_Qc_check.groupby(['Transactions','UserID'])[['QcCount']].sum().reset_index()
            User_Qc_check = User_Qc_check.rename(columns= {'QcCount' : 'Error'})
            Error_itm_Rng =  pd.merge(User_Qc_Itm, User_Qc_check, how='outer', left_on=['Transactions', 'UserID'], right_on=['Transactions', 'UserID']).fillna(0)
            #print(Error_itm_Rng)
            
            #-------User wise available hours -------#
            User_Avl_df = TMax_Min[['ProcessDate','UserID', 'Min_time', 'Max_time', 'Date_Diff']]
            User_Avl_df['Date_Diff'] = round(User_Avl_df['Date_Diff']/pd.Timedelta(hours=1),2)
            User_Avl_df = User_Avl_df.rename(columns={'Date_Diff' : 'Avl_Hrs'})
            User_Avl_df = User_Avl_df.pivot_table(values= ['Avl_Hrs'], index= ['UserID'],aggfunc=np.sum, fill_value=0).reset_index()
            # print('available')
            # print(User_Avl_df)
            
            #----- User Non Production -----#
            User_NProd_df = pd.DataFrame(Non_Prod)
            User_NProd_df = User_NProd_df.rename(columns={'NPEntryBY' : 'UserID'}) 
            User_NProd_df['Np_Hrs'] = round(User_NProd_df['Date_Diff']/pd.Timedelta(hours=1),2)                  
            User_Nonprod = User_NProd_df.pivot_table(values=['Np_Hrs'], index=['UserID'], aggfunc=np.sum, fill_value=0).reset_index()
            #print(User_Nonprod)
            
            
            #----- User Break hours -----#
            User_Break_df = pd.DataFrame(User_NProd_df[User_NProd_df['NPBreakItem'] == 'Break'])            
            User_Break_df = User_Break_df.rename(columns={'Np_Hrs' : 'Break_Hrs'})
            
            #----- validation the break hours, The break hours empty, then hours be zero -----#           
            if len(User_Break_df['Break_Hrs']) == 0:
                                                                
                User_Break_df = User_Break_df.pivot_table(values= ['Break_Hrs'], index=['UserID'], aggfunc=np.sum, fill_value=0).reset_index()
                User_Break_df['UserID']  = 0
                User_Break_df['Break_Hrs']  = '00:00:00'
                
            else:
                User_Break_df = User_Break_df.pivot_table(values= ['Break_Hrs'], index=['UserID'], aggfunc=np.sum, fill_value=0).reset_index()
            
                                        
            #print(User_Break_df)
            
            
            #----- merge availabel & NonProduction & Break hours -----#
            User_NProd_Hrs = pd.merge(User_Avl_df, User_Nonprod, how='outer', left_on= ['UserID'], right_on=['UserID']).fillna(0)
            User_NProd_Hrs = pd.merge(User_NProd_Hrs, User_Break_df, how='outer', left_on=['UserID'], right_on=['UserID']).fillna(0)
            
            
            User_NProd_Hrs[['Avl_Hrs', 'Np_Hrs', 'Break_Hrs']] = User_NProd_Hrs[['Avl_Hrs', 'Np_Hrs', 'Break_Hrs']].astype(int)
            #print(User_NProd_Hrs)
            
            
            #----- merge Production & Error, NonProduction & Break hours -----#
            User_Treeview = pd.merge(Prod_Qc_RPH, Error_itm_Rng, how='outer', left_on=['UserID', 'Transactions'], right_on=['UserID', 'Transactions']).fillna(0)
            User_Treeview = pd.merge(User_Treeview, User_NProd_Hrs, how='outer', left_on=['UserID'], right_on=['UserID']).fillna(0)
            User_Treeview = User_Treeview[['UserID', 'Transactions', 'Prod', 'Auth', 'QC', 'CheckedItm', 'Error', 'Avl_Hrs', 'Np_Hrs', 'Break_Hrs', 'Total_RPH']]
            User_Treeview[['Prod', 'Auth', 'QC', 'CheckedItm', 'Error']] = User_Treeview[['Prod', 'Auth', 'QC', 'CheckedItm', 'Error']].astype(int)
            
            
            User_Treeview['Prod %'] = round(User_Treeview['Total_RPH']/(User_Treeview['Avl_Hrs'] - User_Treeview['Np_Hrs']),4)*100
            User_Treeview['Utilz %'] = round((User_Treeview['Avl_Hrs']-User_Treeview['Np_Hrs'])/(User_Treeview['Avl_Hrs']-User_Treeview['Break_Hrs']),4)*100
            #User_Treeview['QC%'] = (np.where(User_Treeview['ErrorItem'] == 0, 1, np.where(User_Treeview['CheckedItem'] == 0,1)))
            User_Treeview['QC %'] = (np.where(User_Treeview['Error'] == 0, 1, np.where(User_Treeview['CheckedItm'] == 0, 1, 1-(User_Treeview['Error'].divide(User_Treeview['CheckedItm'])))))*100 
            User_Treeview['Prod %'] = User_Treeview['Prod %'].fillna(0)
            #xl.view(User_Treeview, table=False)
            #print(User_Treeview)
            
            #----- Treeview Authorisation -----#
            
            Auth_day = Auth_df1.rename(columns = {'UserName' : 'AuthCount'})
            Auth_day = Auth_day.groupby(['AuthScreen', 'AuthUserID'])['AuthCount'].count().reset_index()                        
                        
            Auth_Rng = Auth_df.rename(columns = {'UserName' : 'AuthCount'})
            Auth_Rng = Auth_Rng.groupby(['AuthScreen', 'AuthUserID'])['AuthCount'].count().reset_index()
            
            def Report_select():
                                
                                                
                Option_click = Report_options.get()     
                
                Prod_Qc_tv1 = []
                Prod_Qc_tv2 = []  
                Auth_tv = []         
                                                                                    
                if Option_click ==1:
                   
                    try:                           
                        for record in tv1.get_children():
                            tv1.delete(record) 
                        tv1.place_forget() 
                        Myworks_vsb1.place_forget()
                        for record in tv2.get_children():
                            tv2.delete(record) 
                        tv2.place_forget()
                        Myworks_vsb2.place_forget()
                                   
                    except:
                        pass
                    
                 #----- Production & QC, day, Range wise Concatinate -----#                                                         
                    Prod_Qc_tv1 = Productivity[['Transactions', 'UserID', 'NoofItems_day', 'NoofItems_Range', 'QcCount_day', 'QcCount_Range']].reset_index()
                    Prod_Qc_tv1[['NoofItems_day', 'NoofItems_Range', 'QcCount_day', 'QcCount_Range']] = Prod_Qc_tv1[['NoofItems_day', 'NoofItems_Range', 'QcCount_day', 'QcCount_Range']].astype(int)
                    Prod_Qc_tv1 = Prod_Qc_tv1[['Transactions','UserID', 'NoofItems_day', 'NoofItems_Range', 'QcCount_day', 'QcCount_Range' ]]
                    print('Production1')
                    print(Prod_Qc_tv1)
                                       
                    #----- Authorisation Day & Range wise concatinate -----#                                                            
                    Auth_tv =  pd.merge(Auth_day, Auth_Rng, how='outer', left_on=['AuthScreen', 'AuthUserID'], right_on=['AuthScreen', 'AuthUserID'], suffixes= ('_day', '_Range')).fillna(0)  
                    Auth_tv = Auth_tv.rename(columns= {'AuthCount_day' : 'Auth_day', 'AuthCount_Range' : 'Auth_Range'})
                    Auth_tv['AuthScreen'] = Auth_tv['AuthScreen'].replace('', 'Blanks Trans')                    
                    Auth_tv[['Auth_day', 'Auth_Range']] = Auth_tv[['Auth_day', 'Auth_Range']].astype(int)
                    Input_Treeview(Prod_Qc_tv1, Option_click)          
                    Auth_Treeview(Auth_tv, Option_click)  
                    
                                                                         
                elif Option_click ==2:
                    
                    try: 
                        print("Selection second")                          
                        for record in tv2.get_children():
                            tv2.delete(record) 
                        for record in tv1.get_children():
                            tv1.delete(record) 
                        tv2.place_forget() 
                        tv1.place_forget() 
                        Myworks_vsb2.place_forget()
                        Myworks_vsb1.place_forget()           
                    except:
                        pass
                            
                    Prod_Qc_tv2 = User_Treeview[['UserID', 'Transactions', 'Prod', 'Auth', 'QC', 'CheckedItm', 'Error', 'Prod %', 'Utilz %', 'QC %' ]].fillna(0)
                    #Prod_Qc_tv2[['Utilz%', 'QC%']] = Prod_Qc_tv2[['Utilz%', 'QC%']].astype(int)                                                            
                    #print(Prod_Qc_tv2)
                    
                    Input_Treeview(Prod_Qc_tv2, Option_click)          
                    #Auth_Treeview(Auth_tv)                                        
                    
                   # messagebox.showinfo("Option Click", 'Option second was selected.')
                    
                ExptImg = PhotoImage(file = r"")
                Expt_Button=Button(can_dash,text="Export", image=ExptImg, compound='top', command=lambda: Export_Report(Prod_Qc_tv1, Auth_tv, Prod_Qc_tv2),font=("Calibri body", 8),bg='white',fg='#00728F',cursor="hand2")
                Expt_Button.image=ExptImg            
                Expt_Button.place(relx=0.935, rely=0.40)
            
            # -------- Export Report  --------#            
            def Export_Report(Prod_Qc_tv1, Auth_tv, Prod_Qc_tv2):                                  
                
                # if Report_options.get() ==1 :
                #     xl.view(Prod_Qc_tv1, table=False)
                #     xl.view(Auth_tv, table=False)       
                # else:
                #     xl.view(Prod_Qc_tv2, table=False)

                wb = xl.Book()                                
                wb.activate(steal_focus=True)
                
                if Report_options.get() ==1 :
                    sh1 = wb.sheets.add('Production')
                    sh2 =wb.sheets.add('Authorisation')
                    sh1.range("A1").options(pd.DataFrame, expand='table', index=False).value = Prod_Qc_tv1
                    sh2.range("A1").options(pd.DataFrame, expand ='table', index=False).value = Auth_tv
                    wb.sheets['Sheet1'].delete()
                    messagebox.showinfo('Info','Report Generated...')
                    
                else:
                    sh3 = wb.sheets.add('User_Report')
                    sh3.range("A1").options(pd.DataFrame, expand='table', index=False).value = Prod_Qc_tv2
                    wb.sheets['Sheet1'].delete()
                    messagebox.showinfo('Info','Report Generated...')
                
            
            
            Report_options = IntVar()
            Report_options.set(1)
            Report_select()      
            Rd5 = Radiobutton(can_dash,text="Team", variable=Report_options, value=1,command=Report_select, bg='white', fg='#00728F', activeforeground='red', selectcolor='white', font=("Calibri",11,"bold"))
            Rd5.place(relx=0.03,rely=0.435)
            Rd6 = Radiobutton(can_dash,text="User", variable=Report_options, value=2,command=Report_select, bg='white', fg='#00728F', activeforeground='red', selectcolor='white', font=("Calibri",11,"bold"))
            Rd6.place(relx=0.09,rely=0.435) 
              
                             

        But5=Button(can_dash,text=">>", command=Reporting_Sumbit,font=("Bauhaus 93", 10,"bold"),bg='#00728F',fg='white',cursor="hand2")
        But5.place(relx = 0.41, rely=0.066)

            # -------- Daily & Weekly, MTD for Prodcution support  --------#
        Label3 = Label(can_dash, width=12, text = "Daily Count", fg="#00728F",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"),justify='center')
        Label3.place(relx=0.195,rely=0.15)
        Label4 = Label(can_dash,  width=12,text = "Range Count", fg="#00728F",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"),justify='center')
        Label4.place(relx=0.30,rely=0.15)
        # Label5 = Label(can_dash, text = "MTD", fg="#00728F",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"),justify='center')
        # Label5.place(relx=0.40,rely=0.15)

        # -------- Production  --------#
        Label6 = Label(can_dash, text = "Production Count:", fg="#515056",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"))
        Label6.place(relx=0.05,rely=0.21)
        Ent_Label1 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label1.place(relx=0.205,rely=0.21)
        Ent_Label2 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label2.place(relx=0.31,rely=0.21)
        Ent_Label3 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        #Ent_Label3  .place(relx=0.41,rely=0.21)

        # -------- Authorisation  --------#
        Label7 = Label(can_dash, text = "Athurisation Count:", fg="#515056",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"))
        Label7.place(relx=0.05,rely=0.27)
        Ent_Label4 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label4.place(relx=0.205,rely=0.27)
        Ent_Label5 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label5.place(relx=0.31,rely=0.27)
        Ent_Label6 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        #Ent_Label6.place(relx=0.41,rely=0.27)

        # -------- QC  --------#
        Label8 = Label(can_dash, text = "QC Count:", fg="#515056",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"))
        Label8.place(relx=0.05,rely=0.33)
        Ent_Label7 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label7.place(relx=0.205,rely=0.33)
        Ent_Label8 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label8.place(relx=0.31,rely=0.33)
        Ent_Label9 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        #Ent_Label9.place(relx=0.41,rely=0.33)

        # -------- Error  --------#
        Label9 = Label(can_dash, text = "ItechChecked:", fg="#515056",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"))
        Label9.place(relx=0.05,rely=0.39)
        Ent_Label10 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label10.place(relx=0.205,rely=0.39)
        Ent_Label11 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label11.place(relx=0.31,rely=0.39)
        Ent_Label12 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        #Ent_Label12.place(relx=0.41,rely=0.39)

        # -------- Daily & Weekly, MTD for Productivity support  --------#
        Label10 = Label(can_dash, width=12, text = "Daily Count", fg="#00728F",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"),justify='center')
        Label10.place(relx=0.625,rely=0.15)
        Labe11 = Label(can_dash, width=12, text = "Range Count", fg="#00728F",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"),justify='center')
        Labe11.place(relx=0.73,rely=0.15)
        # Label12 = Label(can_dash, width=10, text = "MTD", fg="#00728F",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"),justify='left')
        # Label12.place(relx=0.83,rely=0.15)
        
        
        # -------- Error Checked  --------#
        Label12 = Label(can_dash, text = "Error Count:", fg="#515056",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"))
        Label12.place(relx=0.50,rely=0.21)
        Ent_Label22 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label22.place(relx=0.6395,rely=0.21)
        Ent_Label23 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label23.place(relx=0.74,rely=0.21)
        # Ent_Label24 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        # #Ent_Label24.place(relx=0.84,rely=0.39)

        # -------- Productivity%  --------#
        Label13 = Label(can_dash, text = "Productivity %:", fg="#515056",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"))
        Label13.place(relx=0.50,rely=0.27)
        Ent_Label13 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label13.place(relx=0.639,rely=0.27)
        Ent_Label14 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label14.place(relx=0.74,rely=0.27)
        Ent_Label15 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        #Ent_Label15  .place(relx=0.84,rely=0.27)

        # -------- Utilisation%  --------#
        Label14 = Label(can_dash, text = "Utilisation %:", fg="#515056",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"))
        Label14.place(relx=0.50,rely=0.33)
        Ent_Label16 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label16.place(relx=0.639,rely=0.33)
        Ent_Label17 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label17.place(relx=0.74,rely=0.33)
        Ent_Label18 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        #Ent_Label18  .place(relx=0.84,rely=0.33)

        # -------- QC%  --------#
        Label15 = Label(can_dash, text = "QC %:", fg="#515056",bg="White",bd=0,font=("Calibri (Body)", 10, "bold"))
        Label15.place(relx=0.50,rely=0.39)
        Ent_Label19 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label19.place(relx=0.639,rely=0.39)
        Ent_Label20 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        Ent_Label20.place(relx=0.74,rely=0.39)
        Ent_Label21 = Label(can_dash, width=10, text = "0", fg="#515056",bg="White",bd=0,font=("Calibri", 10, "bold"),highlightbackground=None,highlightcolor=None,justify='center')
        #Ent_Label21  .place(relx=0.84,rely=0.39)

        


        #-------- Refresh the input & Auth userdata data in work queue --------#
        def refresh_click():
            #messagebox.showinfo("alert","update")
            global active_page
            active_page = False
            Work_Queue(stframe)


    ######################################################## Work Queue End ###################################################################


    # def Inputpage_check(stframe):
    #     global active_page
    #     if active_page == True:
    #         output = messagebox.askquestion("Job not created", 'Are you sure you want to exit without submitting?')

    #         if output == "yes":
    #             active_page = False
    #             Input_Page(stframe)
    #     elif active_page == False:
    #         Input_Page(stframe)


    ######################################################## Hourly count Start #################################################################

    def Hourly_Count(stframe):
        global active_page
        active_page = True
        global NPHours
        global But1, But2, But6, But7

        But1.configure(background ='#00728F')
        But2.configure(background ='sky blue')
        But3.configure(background ='#00728F')
        But4.configure(background ='#00728F')
        But7.configure(background ='#00728F')

        can1 = Canvas(stframe,bg="white", height=600,width=1178,highlightthickness=0)
        can1.place(relx=0.00,rely=0.11)


        # Ent9 = Entry(can3, width=15, validate= "key", bg="white", font=("Calibri",11),highlightbackground=None,highlightcolor=None)
        # Ent9['validatecommand'] = (Ent9.register(AcceptNum),'%P','%d')
        # Label3 = Label(can1, text="INPUT",width=15,height=1,fg="black", bg="white",font=("Calibri (Body)",13,"bold"))
        # Label3.place(relx=0.150,rely=0.02)

        TimerLabel = Label(can1, text="Timer: " + "00:00:00",width=15,height=1,fg="#054457", bg="white",font=("Calibri (Body)",11,"bold"))
        TimerLabel.place(relx=0.88, rely=0.001)
        Timer1=TimerRun(TimerLabel)

        Label18 = Label(can1,text="Team Name",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label18.place(relx=0.03,rely=0.03)
        Ent5 = Entry(can1, bg="white",font=("Calibri",11),highlightbackground=None,highlightcolor=None)
        Ent5.insert(0,"IS-Maintaince")
        Ent5.place(relx=0.03,rely=0.07)

        Label19 = Label(can1,text="Start Date",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label19.place(relx=0.17,rely=0.03)
        Date_entry3=DateEntry(can1, background= "black", foreground= "white",bd=0,font=('Calibri',12),date_pattern='dd-mm-yyyy', maxdate =  date.today())
        Date_entry3.place(relx=0.17,rely=0.07)

        Label20 = Label(can1,text="Process Type",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label20.place(relx=0.29,rely=0.03)
        Cb1 = AutocompleteCombobox(can1,  font=("Calibri",11,), completevalues=['Production', 'Authorisation', 'QC'])
        #Cb1.place(relx=0.29,rely=0.07)
        
        #-------- Production & QC dataframe report export  --------#
        def dft_export(df):
            But10.configure(background='#00728F')
            #But10.place(relx =0.91, rely=0.116, height=26)
            Path  = fd.askdirectory(title="Select the folder path")
            filename = Path + r'/ISM HourlyData ' + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsx"
            #print(filename)
            exl_name = "IS-M HourlyData"
            writer = pd.ExcelWriter(filename, engine='xlsxwriter')

            df.to_excel(writer, sheet_name=exl_name,index=False)
            writer.save()
            writer.handles = None            
            # xl.view(dup_df, table=False)        
            #xl.view(df, table=False)
            messagebox.showinfo('Export Report','IS-Maintenance Hourly Report Exported!')
            startfile(filename)
            

        def Treeview_function(df1):
            
            But10.place(relx =0.91, rely=0.116, height=26)
            # But10.bind("<Button-1>", dft_export )
            style = ttk.Style()
            style.theme_use('default')
            style.configure("Treeview.Heading",foreground="Black",font=("Trebuchet MS",9,"bold"))
            style.configure("Treeview",background='white',foreground="Black",font=("Trebuchet MS",8),rowheight=20)
            style.map('Treeview', background=[('selected', '#00728F')])
            global tv
            tv = MyTreeview(can1)
            tv.place(x=25,y=100, height=465, width=1125)

            Myworks_vsb2 = ttk.Scrollbar(can1, orient="vertical", command=tv.yview)
            Myworks_vsb2.place(x=25+(75*(len(df1.columns)+1)), y=100, height=465)
            tv.configure(yscrollcommand=Myworks_vsb2.set)

            tv.tag_configure('evenrow', background='skyblue')

            df2=df1.drop(columns=['Transactions','UserID'], axis=1)

            tv.insert('', '0', 'i1', text ='Transactions')

            tv.heading('#0', text ='Transactions', anchor=CENTER)
            tv['columns'] = df2.columns.tolist()

            for i in df2.columns.tolist():
                tv.column(i, width = 75, anchor='center')
                tv.heading(i, text = i)
            
            transkeyno=1
            userkeyno=100

            for transname in df1['Transactions'].drop_duplicates().tolist():
                tv.insert('', str(transkeyno), transname, text=transname)
                tv.move(transname, 'i1', 'end')

                # sub hierarchy userid level in treeview
                rowid = 0
                for userid in df1[df1['Transactions']==transname]['UserID'].tolist():
                    if rowid%2==0:
                        tv.insert('', str(userkeyno), userkeyno, text=userid,tags=('oddrow',))
                    else:
                        tv.insert('', str(userkeyno), userkeyno, text=userid,tags=('evenrow',))
                        

                    tv.move(userkeyno, transname, 'end')
                    rowid=rowid+1

                # Mapping value to respective row and column combination

                    for index, row in df1[(df1['Transactions']==transname) & (df1['UserID']==userid)].iterrows():
                        for colname in df2.columns.tolist():
                            tv.set(userkeyno, colname,row[colname])

                    userkeyno=userkeyno+1

                transkeyno=transkeyno+1

            #dftrans=pd.pivot_table(df1, index = ['Transactions'], values = ['<8','8','9','10','11','12','13','14','15','16','17','>17'], aggfunc = 'count')
            dftrans= df1.groupby(['Transactions'])[['<8','8','9','10','11','12','13','14','15','16','17','>17']].sum().reset_index()
            

            for index, row in dftrans.iterrows():
                for colname in dftrans.columns.tolist():
                    if colname != 'Transactions':
                        tv.set(row['Transactions'], colname,row[colname])
                        
                        

         #############################  Without hireakey #############################
            #  j=0
            # for i in df1.columns.values.tolist():
            #     if i=='UserID':

            #         tv.column(i, width=110, minwidth=0, stretch = "no",anchor="center")
            #         tv.heading(i, text = i)
            #     else:

            #         tv.column(i, width=75, stretch=True, anchor="center")
            #         tv.heading(i, text = i)
            #         j=j+1

            # tv.column('#0', width=0, minwidth=0,  stretch = NO,anchor='e')

            # rowid = 0

            # for index, row in df1.iterrows():
            #     rowid = rowid + 1
            #     if rowid %2==0:
            #         tv.insert("", 'end', text = index, values = list(row),tags=("evenrow",))
            #     else:
            #         tv.insert("", 'end', text = index, values = list(row),tags=("oddrow",))

            # tv['show']='headings'
         #############################  end hireakey #############################       
                        
         #-------- Treeview DataFrame Clear  --------#
        def Treeview_clear():
            try:   
                But10.place_forget()                         
                for record in tv.get_children():
                    tv.delete(record)                
            except:
                pass
            
        #-------- DataFrame for Hourly Count  --------#
        def Hourly_Sumbit():
            global  H_df, QCH_df
            Report_date = Date_entry3.get()            
            conn = sqlite3.connect(dbpath)
            #Process_type = Process_Selected(Process_type='')
            Process_type= Is_Options.get()                    
            if Process_type == 1:
                #-------- Production dataframe  --------#
                ProdH_df = pd.read_sql_query("Select * From tblInput Where ProcessDate = '"+ Report_date +"' ", conn)
                ProdH_df = ProdH_df.rename(columns={'TransactionType':'Transactions'})
                
                ProdH_df['ProcessDate'] = pd.to_datetime(ProdH_df['ProcessDate'])
                ProdH_df['hourscategory']=pd.cut(pd.to_datetime(ProdH_df['EndTime']).dt.hour, bins=[0,7,8,9,10,11,12,13,14,15,16,17,24], labels=['<8','8','9','10','11','12','13','14','15','16','17','>17'])                    
                df1=pd.pivot_table(ProdH_df, index = ['Transactions','UserID'], columns = 'hourscategory', values = 'NoofItems', aggfunc = 'sum')

                #-------- Authorisation dataframe  --------#
                AuthH_df = pd.read_sql_query("Select * From tblAuthorisation Where Authdate ='" + Report_date + "' ", conn)
                
                AuthH_df = AuthH_df.rename(columns = {'AuthScreen' : 'Transactions', 'UserName' : 'UserID'})
                AuthH_df['Authdate'] = pd.to_datetime(AuthH_df['Authdate'])
                AuthH_df['hourscategory']=pd.cut(pd.to_datetime(AuthH_df['AuthEndTime']).dt.hour, bins=[0,7,8,9,10,11,12,13,14,15,16,17,24], labels=['<8','8','9','10','11','12','13','14','15','16','17','>17'])                                        
                df2=pd.pivot_table(AuthH_df, index = ['Transactions','UserID'], columns = 'hourscategory', values = 'AuthUserID', aggfunc = 'count')
                
                H_df = pd.concat([df1, df2]).fillna(0)
                H_df=H_df.reset_index()                    
                H_df[['<8','8','9','10','11','12','13','14','15','16','17','>17']] = H_df[['<8','8','9','10','11','12','13','14','15','16','17','>17']].apply(pd.to_numeric, errors='ignore')
                # print("Hould count")
                # print(H_df)
                # xl.view(H_df, table=False)

                if len(df1) == 0:
                    for record in tv.get_children():
                        tv.delete(record)
                        
                    messagebox.showinfo('Data Information', 'Respective days Production data not found!')
                    #conn.close()
                    return False
                else:
                    #xl.view(H_df, table=False)
                    Treeview_function(H_df)                                        
                    messagebox.showinfo('Production', 'Production done.')                    
                    But10.bind('<Button-1>', lambda event: dft_export(H_df))
                    But10.config(bg='#00728F')
                    conn.close()
                    
            elif Process_type == 2:
                
                QCH_df = pd.read_sql_query("Select * From tblQc_Production where Qcdate = '"+ Report_date +"' ", conn)
                QCH_df = QCH_df.rename(columns= {'QCUserID' : 'UserID'})
                QCH_df['Qcdate'] = pd.to_datetime(QCH_df['Qcdate'])
                QCH_df['hourscategory'] = pd.cut(pd.to_datetime(QCH_df['QcEndDate']).dt.hour, bins=[0,7,8,9,10,11,12,13,14,15,16,17,24], labels=['<8','8','9','10','11','12','13','14','15','16','17','>17'])
                #xl.view(QCH_df, table=False)
                df3 = pd.pivot_table(QCH_df, index= ['Transactions', 'UserID'],columns='hourscategory', values= 'QcCount', aggfunc='sum').reset_index()                                
                #print(df3)
                
                if len(df3) == 0:
                    for record in tv.get_children():
                        tv.delete(record)
                        
                    messagebox.showinfo('Data Information', 'Respective days QC data not found!')
                    #conn.close()
                    return False
                
                else:
                    #xl.view(df3, table=False )
                    Treeview_function(df3)                                                    
                    messagebox.showinfo('QC', 'QC done.')                 
                    But10.bind('<Button-1>', lambda event: dft_export(df3))   
                    But10.config(bg='#00728F')
                    conn.close()

        #Process_Selected()
        
        
        But10=Button(can1,text="Export Data", font=("Calibri", 11,"bold"),bg='#00728F',fg='white',cursor="hand2")        
        Is_Options = IntVar()
        Is_Options.set(1)
        Rd1 = Radiobutton(can1,text="Production", variable=Is_Options, value=1, command=Treeview_clear, bg='white', fg='black', activeforeground='red', selectcolor='white', font=("Calibri",10,"bold"))
        Rd1.place(relx=0.29,rely=0.07)        
        Rd2 = Radiobutton(can1,text="QC", variable=Is_Options, value=2, command=Treeview_clear, bg='white', fg='black', activeforeground='red', selectcolor='white', font=("Calibri",10,"bold"))
        Rd2.place(relx=0.38,rely=0.07)
        But8=Button(can1,text=">>", command=lambda: Hourly_Sumbit(),font=("Bauhaus 93", 10,"bold"),bg='#00728F',fg='white',cursor="hand2")
        But8.place(relx = 0.44, rely=0.066)
        
        #But10.place(relx = 0.52, rely=0.055, height=26)
        
        ######################################################################### End of hourly count Production ########################################
        

        ######################################################################### Start IPD Report #########################################
    

    def IPD_Report(stframe):
        
        def DMLfromDatabase(supportdp, strquery):
    
            try:
                conn = sqlite3.connect(supportdp)
                
                df = pd.read_sql_query (strquery, conn)
                return df
            except:
                pass
        
        But3.config(bg ='#00728F')
        But1.config(background ='#00728F')
        But2.config(background ='#00728F')        
        But4.configure(background ='sky blue')
        #But7.configure(background ='#00728F')

        Can3 = Canvas(stframe,bg="white", height=600,width=1178,highlightthickness=0)
        Can3.place(relx=0.00,rely=0.11)
        
       
        #-------- IPD Functions --------#
        
        def Com_select2(e):
            Cb3.set('')
            #-------- Process type  --------#  
            if Cb2.get() == 'Monthly':
                
                #Months_Qty = ['January', 'February', 'March', 'April', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                Select_month = StringVar()
                Cb3['values'] = [month_name[m][0:9] for m in range(1, 13)]
                month_type = 'Month'
                Cb3.config(textvariable=Select_month)
                Label25.config(text=month_type)
                
                
            elif Cb2.get() == 'Quaterly':                
                month_type = 'Quater' 
                Months_Qty = ['Jan-Mar', 'Apr-Jun', 'Jul-Sep','Oct-Dec']
                Cb3.config(completevalues=Months_Qty)  
                Label25.config(text=month_type)                            
                
                
                
        def com_select4(e):
                        
            Ent7.delete(0, END)
            User_namelist = DMLfromDatabase(Supportdb, "Select NAME From TblUser_data Where USER_ID = '" + Cb4.get() + "'")
            #User_namelist = Select_data(Supportdb, "Select NAME From TblUser_data Where USER_ID = '" + Cb4.get() + "'; ")
            # query = "Select NAME From TblUser_data Where USER_ID = ?; "
            # record = [Cb4.get()]
            # User_namelist = Viewtable_data(Supportdb, query, record)
            if len(User_namelist) != 0:                
                #print(str(User_namelist['NAME'].iloc[0]))            
                Ent7.insert(0, User_namelist['NAME'].iloc[0]) 
                
         #-------- IPD fields --------#
        
        
        Label22 = Label(Can3,text="Team Name",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label22.place(relx=0.03,rely=0.03)        
        Ent6 = Entry(Can3, bg="white",font=("Calibri",11),highlightbackground=None,highlightcolor=None)
        Ent6.insert(0,"IS-Maintaince")
        Ent6.place(relx=0.03,rely=0.07)

        Label23 = Label(Can3,text="Year",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label23.place(relx=0.17,rely=0.03)        
        year_type = ['2018', '2019', '2020', '2021', '2022']
        Cb1 = AutocompleteCombobox(Can3,  font=("Calibri",11,), completevalues=year_type)
        Cb1.place(relx=0.17,rely=0.07)
        Cb1.insert(0, '2022')
        #Date_entry4=DateEntry(Can3, background= "black", foreground= "white",bd=0,font=('Calibri',12),date_pattern='dd-mm-yyyy', maxdate =  date.today())
        #Date_entry4.place(relx=0.17,rely=0.07)
        
        Label24 = Label(Can3,text="Periods",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label24.place(relx=0.33,rely=0.03)
        Cb2 = AutocompleteCombobox(Can3,  font=("Calibri",11,), completevalues=['Monthly', 'Quaterly'])
        Cb2.place(relx=0.33,rely=0.07)
        Cb2.bind("<<Comboboxselected>>", Com_select2)
        Cb2.bind("<FocusOut>", Com_select2)        
            
        
        Label25 = Label(Can3,text="Duration",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label25.place(relx=0.50,rely=0.03)        
        Cb3 = AutocompleteCombobox(Can3, font=('Calibri', 11))
        Cb3.place(relx=0.50, rely=0.07) 
                                                           
        
        User_list = Select_data(Supportdb, "Select * From TblUser_data Where CORE_TEAM = 'IS - Maintenance'; ")
        Label26 = Label(Can3,text="User Type",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label26.place(relx=0.03,rely=0.15)        
        Cb4 = AutocompleteCombobox(Can3, font=('Calibri', 11),completevalues=User_list)
        Cb4.place(relx=0.03, rely=0.19) 
        Cb4.bind("<<ComboboxSelected>>", com_select4)
        Cb4.bind("<FocusOut>", com_select4)
                
        Label27 = Label(Can3,text="User Name",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label27.place(relx=0.20,rely=0.15)   
        Ent7 = Entry(Can3, bg="white",font=("Calibri",11),highlightbackground=None,highlightcolor=None)
        Ent7.place(relx=0.20, rely=0.19, height=26, width=160)
        Cb5 = AutocompleteCombobox(Can3, font=('Calibri', 11))
        #Cb5.place(relx=0.20, rely=0.19)
        
         
        
        def IPD_Sumbit():
            
            # -------- Monthly & quaterly Validation  --------#
            
            if len(Cb1.get()) == 0 or len(Cb2.get()) == 0 or len(Cb3.get()) == 0 or len(Cb4.get()) == 0:
                messagebox.showwarning('Warning', 'Kindly update required fileds!')
                return False
                    
            
            # -------- Monthly & quaterly split  --------#
            if Cb2.get() == 'Monthly':
                Mnth_qty = Cb1.get() + '-' + Cb3.get()
                sh_name = 'Month'
            elif Cb2.get() == 'Quaterly':
                sh_name = 'Qty'
                if Cb3.get() == 'Jan-Mar':
                    Mnth_qty = Cb1.get() + 'Q1'
                elif Cb3.get() == 'Apr-Jun':
                    Mnth_qty = Cb1.get() + 'Q2'
                elif Cb3.get() == 'Jul-Sep':
                    Mnth_qty = Cb1.get() + 'Q3'
                elif Cb3.get() == 'Oct-Dec':
                    Mnth_qty = Cb1.get() + 'Q4'
                            
            print(Mnth_qty)
            
            # -------- Field Information --------#
            UserTeam = 'IS - Maintenance'
            IPD_UserID = Cb4.get()
            #IPD_UserID = '92narag'
            
            # if Cb1.get() == '2022':
            #     mnth = '2022-February'             
            # else:
                #Mnth_qty =  '2022-January' 
            
            #print(Mnth_qty)
            #--Database Connection--
            conn = sqlite3.connect(dbpath)
            conn_O = sqlite3.connect(Otherdb)
            conn1 = sqlite3.connect(Supportdb, timeout=45,uri=True)
            
            #----- Production & QC RPH -----#        
            Pro_RPH_df = pd.read_sql_query("SELECT Transactions, ProductionRPH, QCRPH FROM tblISM_Process_1", conn1)
            Pro_RPH_df = Pro_RPH_df.groupby(['Transactions', 'ProductionRPH', 'QCRPH']).size().reset_index()        
                    
            Auth_RPH_df = pd.read_sql_query("Select Authorisationscreen, AuthRPH From tblISM_Process", conn1)
            Auth_RPH_df = Auth_RPH_df.groupby(['Authorisationscreen', 'AuthRPH']).size().reset_index()
            Auth_RPH_df = Auth_RPH_df.rename(columns={'Authorisationscreen':'Transactions', 'AuthRPH':'ProductionRPH'})                                            
            Auth_RPH_df.drop(columns=[0], axis=1, inplace=True)        
            
            RPH_df = Pro_RPH_df.append(Auth_RPH_df).fillna(0)
            RPH_df = RPH_df.drop(columns=0)
            RPH_df[['ProductionRPH', 'QCRPH']] = RPH_df[['ProductionRPH', 'QCRPH']].astype(int)
            RPH_df['TRANSACTION_TEAM'] = UserTeam
            #print(RPH_df)
            #xl.view(RPH_df, table=False)
            
            # -------- Production Available Dataframe --------#
            Pro_Avl_df = pd.read_sql_query("SELECT * FROM tblInput where UserID = '"+IPD_UserID+"' ;", conn)        
            Pro_Avl_df['ProcessDate'] =  pd.to_datetime(Pro_Avl_df['ProcessDate'], format= '%d-%m-%Y')
            Pro_Avl_df['StartTime'] =  pd.to_datetime(Pro_Avl_df['StartTime'], format= '%d-%m-%Y %H:%M:%S')
            Pro_Avl_df['EndTime'] =  pd.to_datetime(Pro_Avl_df['EndTime'], format= '%d-%m-%Y %H:%M:%S')  
            Pro_Avl_df['Date_Diff'] =  Pro_Avl_df['EndTime'] - Pro_Avl_df['StartTime']   
            
            # -------- Production --------#
            Pro_df = pd.read_sql_query("SELECT * FROM tblInput where Status = 'Completed' and Process_Status in ('Completed', 'Re-update done') And UserID = '"+IPD_UserID+"' ;", conn)
            Pro_df['ProcessDate'] =  pd.to_datetime(Pro_df['ProcessDate'], format= '%d-%m-%Y')
            Pro_df['StartTime'] =  pd.to_datetime(Pro_df['StartTime'], format= '%d-%m-%Y %H:%M:%S')
            Pro_df['EndTime'] =  pd.to_datetime(Pro_df['EndTime'], format= '%d-%m-%Y %H:%M:%S')                                   
            Pro_df['Date_Diff'] =  Pro_df['EndTime'] - Pro_df['StartTime']                
            
            
            # -------- Authorisation Count --------#
            Auth_df = pd.read_sql_query("Select * FROM tblAuthorisation Where AuthUserID = '"+IPD_UserID+"';", conn)
            Auth_df['Authdate'] = pd.to_datetime(Auth_df['Authdate'], format= '%d-%m-%Y')                    
            Auth_df['AuthStartTime'] = pd.to_datetime(Auth_df['AuthStartTime'], format= '%d-%m-%Y %H:%M:%S')
            Auth_df['AuthEndTime'] = pd.to_datetime(Auth_df['AuthEndTime'], format= '%d-%m-%Y %H:%M:%S')        
            Auth_df['Date_Diff'] =  Auth_df['AuthEndTime'] - Auth_df['AuthStartTime']
            # Auth_df['Date_Diff'] = Auth_df['Date_Diff'].astype('str').str.replace('0 days', '').str.strip()
            # print(Auth_df)
            # xl.view(Auth_df, table=False)
            
            # -------- QC Database --------#
            QC_df = pd.read_sql_query("Select * FROM tblQc_Production Where  QCUserID = '"+IPD_UserID+"' ;", conn)
            QC_df['Qcdate'] = pd.to_datetime(QC_df['Qcdate'], format= '%d-%m-%Y')
            QC_df['WITProcessDate'] = pd.to_datetime(QC_df['WITProcessDate'], format= '%d-%m-%Y')
            QC_df['QcStartDate'] = pd.to_datetime(QC_df['QcStartDate'], format= '%d-%m-%Y %H:%M:%S')
            QC_df['QcEndDate'] = pd.to_datetime(QC_df['QcEndDate'], format= '%d-%m-%Y %H:%M:%S')
            QC_df['Date_Diff'] =  QC_df['QcEndDate'] - QC_df['QcStartDate']
            
            # -------- Non-Production  --------#
            Non_Prod = pd.read_sql_query("Select * FROM tblhalt_NonP_Hrs Where NPEntryBY ='"+IPD_UserID+ "'  ", conn)
            Non_Prod['NpDate'] = pd.to_datetime(Non_Prod['NpDate'], format= '%d-%m-%Y')                
            Non_Prod['NPStartTime'] = pd.to_datetime(Non_Prod['NPStartTime'], format= '%d-%m-%Y %H:%M:%S')
            Non_Prod['NPEndTime'] = pd.to_datetime(Non_Prod['NPEndTime'], format= '%d-%m-%Y %H:%M:%S')        
            Non_Prod['Date_Diff'] = Non_Prod['NPEndTime'] - Non_Prod['NPStartTime']
            
            
            #-------- Other Team Production & QC  --------#
            OtherT_Prod = pd.read_sql_query("SELECT * FROM TblProduction Where USERID = '"+IPD_UserID +"' ", conn_O)
            OtherT_Prod['P_Date'] = pd.to_datetime(OtherT_Prod['P_Date'], format= '%d-%m-%Y')        
            OtherT_Prod['START_TIME'] = pd.to_datetime(OtherT_Prod['START_TIME'], format= '%d-%m-%Y %H:%M:%S')
            OtherT_Prod['END_TIME'] = pd.to_datetime(OtherT_Prod['END_TIME'], format= '%d-%m-%Y %H:%M:%S')
            OtherT_Prod['Date_Diff'] =  OtherT_Prod['END_TIME'] - OtherT_Prod['START_TIME']      
                                        
                                
            # -------- Other Team NonProduction  --------#
            OtherT_NonProd = pd.read_sql_query("SELECT * FROM TblNon_Production Where USER_ID = '"+ IPD_UserID +"' And USER_TEAM ='IS - Maintenance'; ", conn_O)
            OtherT_NonProd['P_DATE'] = pd.to_datetime(OtherT_NonProd['P_DATE'], format= '%d-%m-%Y')
            OtherT_NonProd['START_TIME'] = pd.to_datetime(OtherT_NonProd['START_TIME'], format= '%d-%m-%Y %H:%M:%S')
            OtherT_NonProd['END_TIME'] = pd.to_datetime(OtherT_NonProd['END_TIME'], format= '%d-%m-%Y %H:%M:%S')        
            OtherT_NonProd['Date_Diff'] = OtherT_NonProd['END_TIME'] - OtherT_NonProd['START_TIME']

            # -------- Production & Authorisation, QC calculation  --------#
            
            Pdf1 = pd.pivot_table(Pro_df, index=['ProcessDate', 'UserID', 'TransactionType', 'StartTime', 'EndTime', 'Date_Diff', 'Break_Hrs'], values ='NoofItems', aggfunc = 'sum', fill_value=0).reset_index()        
            Pdf1 = Pdf1.rename(columns={'TransactionType':'Transactions', 'NoofItems':'ProductionCount', 'Break_Hrs':'Pause_Time'})        
            Pdf1['ProcessDate'] = pd.to_datetime(Pdf1['ProcessDate'])                               
            
            Adf1 = pd.pivot_table(Auth_df, index=['Authdate', 'AuthUserID', 'AuthScreen', 'AuthStartTime', 'AuthEndTime', 'Date_Diff', 'AuthNProduction'], values ='UserName', aggfunc = 'count', fill_value=0).reset_index()
            Adf1 = Adf1.rename(columns={'Authdate':'ProcessDate', 'AuthUserID':'UserID', 'AuthScreen':'Transactions', 'AuthStartTime':'StartTime', 'AuthEndTime':'EndTime', 'UserName':'ProductionCount', 'AuthNProduction':'Pause_Time'})
            Adf1['ProcessDate'] = pd.to_datetime(Adf1['ProcessDate'])
            Prod_df1 = Pdf1.append(Adf1)
                    
            Qc1 = pd.pivot_table(QC_df, index=['Qcdate', 'QCUserID', 'Transactions',  'QcStartDate', 'QcEndDate', 'Date_Diff', 'QcNProductionHrs'], values ='QcCount', aggfunc = 'sum', fill_value=0).reset_index()        
            Qc1 = Qc1.rename(columns={'Qcdate':'ProcessDate', 'QCUserID':'UserID', 'QcStartDate':'StartTime', 'QcEndDate':'EndTime', 'QcCount':'QCCount', 'QcNProductionHrs':'Pause_Time'})                
            Qc1['ProcessDate'] = pd.to_datetime(Qc1['ProcessDate'])        
            #print(Qc1)        
            
            
            # -------- Production & Authorisation, QC calculation & merge  --------#
            
            # -------- Data Frame Consolidated  --------#
            Prod_Qc_df = Prod_df1.append(Qc1)           
            if len(Prod_Qc_df) ==0:
                messagebox.showinfo('Data Information', 'User data not found in respective Month or Quater')
                return False
            if 'QCCount' not in Prod_Qc_df:
                Prod_Qc_df['QCCount'] = 0
            Prod_Qc_df = Prod_Qc_df[['ProcessDate', 'UserID', 'Transactions', 'ProductionCount', 'QCCount', 'StartTime', 'EndTime', 'Date_Diff', 'Pause_Time']]
            Prod_Qc_df['ProcessDate'] = pd.to_datetime(Prod_Qc_df['ProcessDate'])                    
            Prod_Qc_df[['ProductionCount', 'QCCount']] = Prod_Qc_df[['ProductionCount', 'QCCount']].fillna(0)
            #print(Prod_Qc_df)
            # print(Prod_Qc_df.dtypes)        
                    
            ####################################################### -------- Other Team Production   -------- ####################################################### 
                                                            
            OtherT_Avl = pd.pivot_table(OtherT_Prod, index=['P_Date', 'USERID', 'TRANSACTIONS', 'TRANSACTION_TEAM', 'P_TYPE','START_TIME', 'END_TIME', 'Date_Diff', 'PAUSE_TIME'], values =['A_COUNT'], aggfunc = 'sum', fill_value=0).reset_index()        
            if 'A_COUNT' not in OtherT_Avl:
                OtherT_Avl['A_COUNT']=0   
            OtherT_Avl = OtherT_Avl.rename(columns={'P_Date': 'ProcessDate', 'USERID':'UserID', 'TRANSACTIONS':'Transactions'})        
            OtherT_Avl['ProcessDate'] = pd.to_datetime(OtherT_Avl['ProcessDate']) 
            #print(OtherT_Avl) 
            
            OtherT_Proddf = pd.DataFrame(OtherT_Avl)
            OtherT_Proddf['Year'] = OtherT_Proddf['ProcessDate'].dt.year
            OtherT_Proddf['Month'] = OtherT_Proddf['ProcessDate'].dt.month_name()
            OtherT_Proddf['Year_Month'] = OtherT_Proddf['Year'].astype(str) + '-' + OtherT_Proddf['Month']
            OtherT_Proddf['Quarter'] = OtherT_Proddf['ProcessDate'].dt.to_period('Q')
            OtherT_Proddf = OtherT_Proddf.drop(columns=['START_TIME', 'END_TIME', 'Month', 'Year'])               
            #print(OtherT_Proddf)
            
            # -------- Other Production split Month & Quater wise  --------# 
            OtherT_Prod_G=OtherT_Proddf.loc[(OtherT_Proddf['TRANSACTION_TEAM'] != UserTeam)]
            if Cb2.get() == 'Quaterly':
                OtherT_Prod_G = pd.DataFrame(OtherT_Proddf.loc[(OtherT_Proddf['Quarter'] == Mnth_qty)])
                #OtherT_Prod_G = pd.DataFrame(OtherT_Prod_G.loc[(OtherT_Prod_G['Year_Month'] == Mnth_qty) | (OtherT_Prod_G['Quarter'] == Mnth_qty)])  
            else:
                OtherT_Prod_G = pd.DataFrame(OtherT_Proddf.loc[(OtherT_Proddf['Year_Month'] == Mnth_qty)])
            
            #print(OtherT_Prod_G)
            # print(OtherT_Prod_G.dtypes)       
            
            # -------- Other Production count & Loan Hours  --------#
            OtherT_Prod_df1 = OtherT_Prod_G.pivot_table(values='A_COUNT', index=['ProcessDate', 'UserID', 'Transactions', 'TRANSACTION_TEAM', 'Year_Month', 'Quarter', 'Date_Diff', 'PAUSE_TIME'], columns='P_TYPE',aggfunc=np.sum, fill_value=0).reset_index()        
            if 'Production' not in OtherT_Prod_df1:
                    OtherT_Prod_df1['Production']=0
            if 'QC' not in OtherT_Prod_df1:
                    OtherT_Prod_df1['QC']=0     
                    
            if len(OtherT_Prod_df1) ==0:
                OtherT_Prod_df1['LoanOut_Numbers'] = 0
                OtherT_Prod_df1['LoanOut_Hours'] = '0 days 00:00:00'
                OtherT_Prod_df1['Date_Diff'] = '0 days 00:00:00'
                OtherT_Prod_df1['PAUSE_TIME'] = '00:00:00'
                
            else:
                    
                OtherT_Prod_df1['LoanOut_Numbers'] = OtherT_Prod_df1['Production'] + OtherT_Prod_df1['QC']                        
                #OtherT_Prod_df1 = OtherT_Prod_df1.merge(OtherT_Prod_hrs, how='outer', left_on=['ProcessDate', 'UserID', 'Transactions', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'UserID', 'Transactions', 'Year_Month', 'Quarter']).fillna(0)
                OtherT_Prod_df1['LoanOut_Hours'] = OtherT_Prod_df1['Date_Diff'] - OtherT_Prod_df1['PAUSE_TIME']        
            OtherT_Prod_df1 = OtherT_Prod_df1.rename(columns={"Production": "ProductionCount","QC": "QCCount", 'PAUSE_TIME':'Pause_Time' })
                    
            
            if len(OtherT_Prod) !=0:                
                OtherT_Prod_df1['LoanOut_Hours'] = round(OtherT_Prod_df1['LoanOut_Hours']/pd.Timedelta(hours=1),2)
                
                #OtherT_Prod_df1['LoanOut_Hours'] = OtherT_Prod_df1['LoanOut_Hours'].astype(str).str.replace('0 days', '').str.strip() 
            #print(OtherT_Prod_df1)
            # print(OtherT_Prod_df1.dtypes)
                
                                
            # -------- Other Production RPH mege wih actuall RPH --------#             
            OtherT_RPH_df = pd.read_sql_query("SELECT TEAM_NAME, TRANSACTION_N,  PRODUCTION_RPH, QC_RPH FROM TblTeam_data", conn1)
            OtherT_RPH_df = OtherT_RPH_df.rename(columns={'TEAM_NAME':'TRANSACTION_TEAM', 'TRANSACTION_N':'Transactions', 'PRODUCTION_RPH':'ProductionRPH', 'QC_RPH':'QCRPH'})
            RPH_df = RPH_df.append(OtherT_RPH_df)
            #print(RPH_df)
            #OtherT_Prod_RPH = OtherT_Prod_df1.merge(OtherT_RPH_df, how='left', left_on=['TRANSACTION_TEAM', 'Transactions'], right_on=['TRANSACTION_TEAM', 'Transactions']).fillna(0)          
            #print(OtherT_Prod_RPH)
            #xl.view(RPH_df, table=False)
            
            # -------- Productivity & QC Month filter & Groupby columns  --------#                
            Prod_QC_G = pd.DataFrame(Prod_Qc_df)                
            Prod_QC_G['Year'] = Prod_QC_G['ProcessDate'].dt.year
            Prod_QC_G['Month'] = Prod_QC_G['ProcessDate'].dt.month_name()
            Prod_QC_G['Year_Month'] = Prod_QC_G['Year'].astype(str) + '-' + Prod_QC_G['Month']
            Prod_QC_G['Quarter'] = Prod_QC_G['ProcessDate'].dt.to_period('Q')
            Prod_QC_G = Prod_QC_G.drop(columns=['StartTime', 'EndTime',  'Month', 'Year'])            
            
            
            if Cb2.get() == 'Quaterly':
                PROD_Group = pd.DataFrame(Prod_QC_G.loc[(Prod_QC_G['Quarter'] == Mnth_qty)]) 
            else:
                PROD_Group = pd.DataFrame(Prod_QC_G.loc[(Prod_QC_G['Year_Month'] == Mnth_qty)]) 
                
            if len(PROD_Group) ==0:
                messagebox.showinfo('Data Information', 'User data not found in respective Month or Quater.')
                return False
            
            ############################# -------- Transaction merged for OtherTeam & Production & Authorisation, QC  --------#############################
            Trans_hrs = pd.DataFrame(PROD_Group)
            Trans_hrs['TRANSACTION_TEAM'] = UserTeam
            Trans_hrs['Pause_Time'] = pd.to_timedelta(Trans_hrs['Pause_Time'])
            Trans_hrs['Date_Diff'] = round(Trans_hrs['Date_Diff']/pd.Timedelta(hours=1), 4)
            Trans_hrs['Pause_Time'] = round(Trans_hrs['Pause_Time']/pd.Timedelta(hours=1), 4)
            Trans_hrs = Trans_hrs.pivot_table(values=['Date_Diff', 'Pause_Time'], index=['ProcessDate', 'UserID', 'Transactions', 'TRANSACTION_TEAM'], aggfunc=np.sum, fill_value=0).reset_index()
            #Trans_hrs = Trans_hrs.groupby(['ProcessDate', 'UserID', 'Transactions', 'TRANSACTION_TEAM'])['Date_Diff', 'Pause_Time'].sum()
            #print(Trans_hrs)
            
            
            Trans_otherT = pd.DataFrame(OtherT_Prod_df1)        
            Trans_otherT['Pause_Time'] = pd.to_timedelta(Trans_otherT['Pause_Time'])
            Trans_otherT['Date_Diff'] = round(Trans_otherT['Date_Diff']/pd.Timedelta(hours=1),4)
            Trans_otherT['Pause_Time'] = round(Trans_otherT['Pause_Time']/pd.Timedelta(hours=1),4)
            Trans_otherT = Trans_otherT.pivot_table(values=['Date_Diff', 'Pause_Time'], index=['ProcessDate', 'UserID', 'Transactions', 'TRANSACTION_TEAM'], aggfunc=np.sum, fill_value=0).reset_index()
            #print(Trans_otherT)
            
            Trans_Prod_OtherT = Trans_hrs.append(Trans_otherT)
            #print(Trans_Prod_OtherT)
            
            ### -------- OtherTeam & Production & Authorisation, QC data merged  --------###   
            OtherT_Prod_QC = pd.DataFrame(OtherT_Prod_df1)            
            OtherT_Prod_QC = OtherT_Prod_QC.drop(columns=['Date_Diff', 'Pause_Time'])
            OtherT_Prod_QC = OtherT_Prod_QC.pivot_table(values=['ProductionCount', 'QCCount', 'LoanOut_Numbers', 'LoanOut_Hours'], index=['ProcessDate', 'UserID', 'Transactions', 'TRANSACTION_TEAM', 'Year_Month', 'Quarter'], aggfunc=np.sum, fill_value=0).fillna(0)
            if 'LoanOut_Hours' not in OtherT_Prod_QC:
                    OtherT_Prod_QC['LoanOut_Hours']=0
            if 'LoanOut_Numbers' not in OtherT_Prod_QC:
                    OtherT_Prod_QC['LoanOut_Numbers']=0        
            
            OtherT_Prod_QC = OtherT_Prod_QC.reset_index()    
            PROD_Group_df = PROD_Group.pivot_table(values=['ProductionCount', 'QCCount'], index=['ProcessDate', 'UserID', 'Transactions', 'Year_Month', 'Quarter'], aggfunc=np.sum, fill_value=0).reset_index()        
            PROD_Group_df['TRANSACTION_TEAM'] = UserTeam        
            PROD_Group_df = PROD_Group_df.append(OtherT_Prod_QC)        
            PROD_Group_df['Quarter'] = PROD_Group_df['Quarter'].astype(str)
            PROD_Group_df['LoanOut_Hours'] = PROD_Group_df['LoanOut_Hours'].astype(float)        
            PROD_Group_df = PROD_Group_df.fillna(0)
            
            # Prodtable = PROD_Group_df.astype(str)
            # xl.view(Prodtable, table=False)
            # print('Merge prod')
            # print(PROD_Group_df)
            # print(PROD_Group_df.dtypes)
            
            
            ### -------- OtherTeam & Production & Authorisation, QC RPH merged  --------###
            RPH_Prod = pd.DataFrame(PROD_Group_df)                
            RPH_Prod[['ProductionCount', 'QCCount']] = RPH_Prod[['ProductionCount', 'QCCount']].astype(int)
            RPH_Prod_df = pd.merge(RPH_Prod, RPH_df, how='left', left_on=['TRANSACTION_TEAM', 'Transactions'], right_on=['TRANSACTION_TEAM', 'Transactions']).fillna(0)                
            #print(RPH_Prod_df)   
            
            
            ### -------- Transaction OtherTeam & Production & Authorisation, QC RPH merged  --------###
            Trans_prod_df = pd.DataFrame(RPH_Prod_df)       
            Trans_prod_df = Trans_prod_df.drop(columns=['UserID', 'Year_Month', 'Quarter', 'LoanOut_Numbers', 'LoanOut_Hours']) 
            
            Tran_Prod = Trans_prod_df.pivot_table(values='ProductionCount', index=['ProcessDate', 'TRANSACTION_TEAM', 'Transactions', 'ProductionRPH'], aggfunc=np.sum, fill_value=0).reset_index()
            Tran_Prod = Tran_Prod.rename(columns={'ProductionCount':'Item_completed', 'ProductionRPH':'TranactionRPH'})
            Tran_Prod['ProcessType'] = 'Production'
            
            Tran_Qc = Trans_prod_df.pivot_table(values='QCCount', index=['ProcessDate', 'TRANSACTION_TEAM', 'Transactions', 'QCRPH'], aggfunc=np.sum, fill_value=0).reset_index()
            Tran_Qc = Tran_Qc.rename(columns={'QCCount':'Item_completed', 'QCRPH':'TranactionRPH'})
            Tran_Qc['ProcessType'] = 'QC'
            Transaction_DF = Tran_Prod.append(Tran_Qc)
            Transaction_DF = Transaction_DF[Transaction_DF['Item_completed'] != 0]
            Transaction_DF = Transaction_DF[['ProcessDate', 'TRANSACTION_TEAM', 'ProcessType', 'Transactions', 'Item_completed', 'TranactionRPH']]
            
            Transaction_Prod_df = pd.merge(Transaction_DF, Trans_Prod_OtherT, how='outer', left_on=['ProcessDate', 'TRANSACTION_TEAM', 'Transactions'], right_on=['ProcessDate', 'TRANSACTION_TEAM', 'Transactions']).fillna(0)
            Transaction_Prod_df = Transaction_Prod_df.pivot_table(values=['Item_completed', 'Date_Diff', 'Pause_Time'], index=['TRANSACTION_TEAM', 'ProcessType', 'Transactions', 'TranactionRPH'], aggfunc=np.sum, fill_value=0).fillna(0)
            Transaction_Prod_df['Total_Time_Taken'] = Transaction_Prod_df['Date_Diff'] - Transaction_Prod_df['Pause_Time'] 
            Transaction_Prod_df = Transaction_Prod_df.reset_index()
            
            Transaction_Prod_df['Achieved_RPH']=Transaction_Prod_df['Item_completed']/Transaction_Prod_df['Total_Time_Taken']
            Transaction_Prod_df['AchievedRPH%']=(Transaction_Prod_df['Achieved_RPH']/Transaction_Prod_df['TranactionRPH'])*100
            Transaction_Prod_df = Transaction_Prod_df.rename(columns={'TRANSACTION_TEAM':'Team'})
            Transaction_Prod_df = Transaction_Prod_df.drop(columns=['Date_Diff', 'Pause_Time'])
            
            Transaction_Prod_df['Total_Time_Taken']=pd.to_timedelta(Transaction_Prod_df['Total_Time_Taken'],unit='h') 
            Transaction_Prod_df['Total_Time_Taken']=Transaction_Prod_df['Total_Time_Taken'].astype(str)
            Transaction_Prod_df['Total_Time_Taken']=Transaction_Prod_df['Total_Time_Taken'].str[7:15]
            Transaction_Prod_df.replace([np.inf, -np.inf], np.nan, inplace=True)
            Transaction_Prod_df=Transaction_Prod_df.fillna(0)
            Transaction_Prod_df['Achieved_RPH']=Transaction_Prod_df['Achieved_RPH'].round(0)
            Transaction_Prod_df['AchievedRPH%']=Transaction_Prod_df['AchievedRPH%'].round(2)
            
            
            #print(Transaction_Prod_df) 
            # Prodtable = Transaction_Prod_df.astype(str)
            # xl.view(Prodtable, table=False)  
            
            
            # -------- Non-Production for activity sheet  --------#     
            
            #----- Other NonProduction
            OtherT_NProd_Trans = pd.DataFrame(OtherT_NonProd)
            OtherT_NProd_Trans = OtherT_NProd_Trans.drop(columns=['USER_TEAM', 'ACTIVITY_TEAM', 'P_TRANSACTION', 'COMMENTS', 'START_TIME', 'END_TIME', 'NP_Time'])
            OtherT_NProd_Trans = OtherT_NProd_Trans.rename(columns={'P_DATE': 'NpDate', 'ACTIVITY':'NPBreakItem', 'USER_ID':'NPEntryBY'})
            
            Trans_Non_Prod = pd.DataFrame(Non_Prod)
            Trans_Non_Prod = Trans_Non_Prod.drop(columns=['NPActivity', 'NPTransactionName', 'NPComments', 'NPStartTime', 'NPEndTime', 'NPHours'])        
            
            # -------- Other Team & Actual team Non prodcution merged 
            Trans_Non_Prod = Trans_Non_Prod.append(OtherT_NProd_Trans)
            Trans_Non_Prod = Trans_Non_Prod[Trans_Non_Prod['Date_Diff'] != '0 days 00:00:00']
            #print(Trans_Non_Prod)
            
            Trans_Non_Prod['Year'] = Trans_Non_Prod['NpDate'].dt.year
            Trans_Non_Prod['Month'] = Trans_Non_Prod['NpDate'].dt.month_name()
            Trans_Non_Prod['Year_Month'] = Trans_Non_Prod['Year'].astype(str) + '-' + Trans_Non_Prod['Month']
            Trans_Non_Prod['Quarter'] = Trans_Non_Prod['NpDate'].dt.to_period('Q')
            if Cb2.get() == 'Quaterly':        
                Non_Prod_Transdf =pd.DataFrame(Trans_Non_Prod.loc[(Trans_Non_Prod['Quarter'] == Mnth_qty )]) 
            else:                
                Non_Prod_Transdf =pd.DataFrame(Trans_Non_Prod.loc[(Trans_Non_Prod['Year_Month'] == Mnth_qty)])                 
            
            Non_Prod_Transdf['NpDate'] = Non_Prod_Transdf['NpDate'].dt.strftime('%d/%m/%Y').astype(str)
            Non_Prod_Transdf['Date_Diff'] = round(Non_Prod_Transdf['Date_Diff']/pd.Timedelta(hours=1), 2)            
            Non_Prod_Transdf = Non_Prod_Transdf.pivot_table(values='Date_Diff', index=['NPBreakItem'], columns='NpDate', aggfunc=np.sum).fillna(0)
            Non_Prod_Transdf = Non_Prod_Transdf.reset_index()
            NProd_cols= Non_Prod_Transdf.columns[Non_Prod_Transdf.dtypes.eq('float64')].tolist()
            for col in NProd_cols:
                Non_Prod_Transdf[col]=Non_Prod_Transdf[col].astype(float)
                Non_Prod_Transdf[col]=pd.to_timedelta(Non_Prod_Transdf[col],unit='h') 
                Non_Prod_Transdf[col]=Non_Prod_Transdf[col].astype(str)
                Non_Prod_Transdf[col]=Non_Prod_Transdf[col].str[7:15]
                                                                           
            
            print(Non_Prod_Transdf)
                                                            
            # -------- Productivity% calculation  --------#
            Productivity_RPH = pd.DataFrame(RPH_Prod_df)
            Productivity_RPH['TPord_RPH'] = Productivity_RPH['ProductionCount'] / Productivity_RPH['ProductionRPH']
            Productivity_RPH['TQC_RPH'] = Productivity_RPH['QCCount'] / Productivity_RPH['QCRPH']
            Productivity_RPH = Productivity_RPH.fillna(0)
            Productivity_RPH['Total_RPH'] = Productivity_RPH['TPord_RPH'] + Productivity_RPH['TQC_RPH']
            
            # print(Productivity_RPH)        
            # print(Productivity_RPH.dtypes)
            #xl.view(Productivity_RPH, table=False)
            
            # -------- Other Team QC Item check  Data Frame creation --------# 
            OtherT_Qcdf = pd.read_sql_query("Select * FROM TblQCProducation Where UserID_Processor = '"+IPD_UserID+"' ;", conn_O)
            OtherT_Qcdf['QC_Date'] = pd.to_datetime(OtherT_Qcdf['QC_Date'], format= '%d-%m-%Y')
            OtherT_Qcdf['WIT_ProcessDate'] = pd.to_datetime(OtherT_Qcdf['WIT_ProcessDate'], format= '%d-%m-%Y')
            OtherT_Qcdf = pd.pivot_table(OtherT_Qcdf, index=['WIT_ProcessDate', 'UserID_Processor', 'TRANSACTIONS', 'TRANSACTION_TEAM', 'Skill_Level', 'Completed_Correctly'], values ='A_Count', aggfunc = 'sum', fill_value=0).reset_index()        
            OtherT_Qcdf = OtherT_Qcdf.rename(columns={'WIT_ProcessDate':'ProcessDate', 'UserID_Processor':'UserID', 'TRANSACTIONS':'Transactions', 'Skill_Level':'SkillLevel', 'Completed_Correctly':'CompletedCorrectly', 'A_Count':'QCCount'}) 
            OtherT_Qcdf = pd.DataFrame(OtherT_Qcdf.loc[(OtherT_Qcdf['TRANSACTION_TEAM'] != UserTeam)]) 
            OtherT_Qcdf = OtherT_Qcdf.drop(columns='TRANSACTION_TEAM')
            
            #print(OtherT_Qcdf)   
            
            # -------- QC Item check  Data Frame creation --------#    
            Qcdf1 = pd.read_sql_query("Select * FROM tblQc_Production Where ProcessorUserID = '"+IPD_UserID+"' ;", conn)
            Qcdf1['Qcdate'] = pd.to_datetime(Qcdf1['Qcdate'], format= '%d-%m-%Y')
            Qcdf1['WITProcessDate'] = pd.to_datetime(Qcdf1['WITProcessDate'], format= '%d-%m-%Y')    
            
            Qcdf1 = pd.pivot_table(Qcdf1, index=['WITProcessDate', 'ProcessorUserID', 'Transactions', 'SkillLevel', 'CompletedCorrectly'], values ='QcCount', aggfunc = 'sum', fill_value=0).reset_index()        
            Qcdf1 = Qcdf1.rename(columns={'WITProcessDate':'ProcessDate', 'ProcessorUserID':'UserID', 'QcCount':'QCCount'}) 
            Qcdf1 = Qcdf1.append(OtherT_Qcdf)
            #print(Qcdf1)
            
                
            Qc_Item_df = pd.DataFrame(Qcdf1)                   
            Qc_Item_df['Month'] =  Qc_Item_df['ProcessDate'].dt.month_name() 
            Qc_Item_df['Year'] = Qc_Item_df['ProcessDate'].dt.year 
            Qc_Item_df['Year_Month'] =  Qc_Item_df['Year'].astype(str) +'-'+ Qc_Item_df['Month']                
            Qc_Item_df['Quarter'] = Qc_Item_df['ProcessDate'].dt.to_period('Q')        
            Qc_Item_df = Qc_Item_df.drop(columns=['Month', 'Year'])
            
            if Cb2.get() == 'Quaterly':        
                Qc_Item_df =pd.DataFrame(Qc_Item_df.loc[(Qc_Item_df['Quarter'] == Mnth_qty )]) 
            else:                
                Qc_Item_df =pd.DataFrame(Qc_Item_df.loc[(Qc_Item_df['Year_Month'] == Mnth_qty)]) 
            
            Qc_Item_df['Quarter'] = Qc_Item_df['Quarter'].astype(str)
            
            # print('qc dataframe')
            # print(Qc_Item_df)
            #xl.view(Qc_Item_df, table=False)            
            
            #-----  BAU Error & Item Check -----#     
            BAU_df = pd.DataFrame(Qc_Item_df.loc[(Qc_Item_df.SkillLevel=='EI Spot IN') | (Qc_Item_df.SkillLevel=='Correspondence IN') | (Qc_Item_df.SkillLevel=='Correspondence UK') | (Qc_Item_df.SkillLevel=='EI BAU UK')])
            BAU_Qc_Itm = BAU_df.groupby(['ProcessDate', 'Transactions','UserID', 'Year_Month', 'Quarter'])[['QCCount']].sum().reset_index()
            BAU_Qc_Itm = BAU_Qc_Itm.rename(columns= {'QCCount' : 'BAU_Checked'})
            # print(BAU_Qc_Itm)
            
                            
            BAU_QC_check =pd.DataFrame(BAU_df.loc[(BAU_df['CompletedCorrectly'] == 'No')])            
            BAU_QC_check = BAU_QC_check.groupby(['ProcessDate', 'Transactions','UserID', 'Year_Month', 'Quarter'])[['QCCount']].sum().reset_index()
            BAU_QC_check = BAU_QC_check.rename(columns= {'QCCount' : 'BAU_Error'})
            BAU_Error_check =  pd.merge(BAU_Qc_Itm, BAU_QC_check, how='outer', left_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter']).fillna(0)                
            if len(BAU_Error_check) == 0:
                BAU_Error_check['BAU_Checked'] =0
                BAU_Error_check['BAU_Error'] =0
            
            #print(BAU_Error_check)
            
            
            #-----  KIV Error & Item Check -----#   
            KIV_df = pd.DataFrame(Qc_Item_df.loc[(Qc_Item_df.SkillLevel=='KIV')|(Qc_Item_df.SkillLevel=='Authorise 4')])
            KIV_Itm = KIV_df.groupby(['ProcessDate', 'Transactions','UserID', 'Year_Month', 'Quarter'])[['QCCount']].sum().reset_index()
            KIV_Itm = KIV_Itm.rename(columns= {'QCCount' : 'KIV_Checked'})
            #print(Qc_Itm)
                            
            KIV_check =pd.DataFrame(KIV_df.loc[(KIV_df['CompletedCorrectly'] == 'No')])            
            KIV_check = KIV_check.groupby(['ProcessDate', 'Transactions','UserID', 'Year_Month', 'Quarter'])[['QCCount']].sum().reset_index()
            KIV_check = KIV_check.rename(columns= {'QCCount' : 'KIV_Error'})        
            KIV_Error_check =  pd.merge(KIV_Itm, KIV_check, how='outer', left_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter']).fillna(0)                
            if len(KIV_Error_check) == 0:
                KIV_Error_check['KIV_Checked'] =0
                KIV_Error_check['KIV_Error'] =0
            #print(KIV_Error_check)
            
            
            #-----  Calibration Error & Item Check -----#  
            CALI_df = pd.DataFrame(Qc_Item_df.loc[(Qc_Item_df.SkillLevel=='Calibration IN')|(Qc_Item_df.SkillLevel=='Calibration UK')])
            CAL_Itm = CALI_df.groupby(['ProcessDate', 'Transactions','UserID', 'Year_Month', 'Quarter'])[['QCCount']].sum().reset_index()
            CAL_Itm = CAL_Itm.rename(columns= {'QCCount' : 'Calibration_Checked'})
            #print(CAL_Itm)
                            
            CAL_check =pd.DataFrame(CALI_df.loc[(CALI_df['CompletedCorrectly'] == 'No')])            
            CAL_check = CAL_check.groupby(['ProcessDate', 'Transactions','UserID', 'Year_Month', 'Quarter'])[['QCCount']].sum().reset_index()
            CAL_check = CAL_check.rename(columns= {'QCCount' : 'Calibration_Error'})        
            CAL_Error_check =  pd.merge(CAL_Itm, CAL_check, how='outer', left_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter']).fillna(0)                
            if len(CAL_Error_check) == 0:
                CAL_Error_check['Calibration_Checked'] =0
                CAL_Error_check['Calibration_Error'] =0
            
            #print(CAL_Error_check)
            
            #-----  Others Error & Item Check -----#  
            Other_df = pd.DataFrame(Qc_Item_df.loc[(Qc_Item_df.SkillLevel=='AD-HOC')|(Qc_Item_df.SkillLevel=='Other')])
            Other_Itm = Other_df.groupby(['ProcessDate', 'Transactions','UserID', 'Year_Month', 'Quarter'])[['QCCount']].sum().reset_index()
            Other_Itm = Other_Itm.rename(columns= {'QCCount' : 'Other_Checked'})
            #print(Other_Itm)
                            
            Other_check =pd.DataFrame(Other_df.loc[(Other_df['CompletedCorrectly'] == 'No')])            
            Other_check = Other_check.groupby(['ProcessDate', 'Transactions','UserID', 'Year_Month', 'Quarter'])[['QCCount']].sum().reset_index()
            Other_check = Other_check.rename(columns= {'QCCount' : 'Other_Error'})        
            Other_Error_check =  pd.merge(Other_Itm, Other_check, how='outer', left_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter']).fillna(0)                
            if len(Other_Error_check) == 0:
                Other_Error_check['Other_Checked'] =0
                Other_Error_check['Other_Error'] =0
            
            #print(Other_Error_check)
                        
            
            #-----  BAU & KIV Error & Item merge dataframe -----#   
            BAU_KIV_df =  pd.merge(BAU_Error_check, KIV_Error_check, how='outer', left_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter']).fillna(0)                
            #print(BAU_KIV_df)
            
            #-----  BAU & KIV, Calibration Error & Item merge dataframe -----#   
            CAL_BAU_KIV_df =  pd.merge(BAU_KIV_df, CAL_Error_check, how='outer', left_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter']).fillna(0)                        
            #print(CAL_BAU_KIV_df)
            
            #-----  BAU & KIV, Calibration, Others Error & Item merge dataframe -----#   
            Other_CAL_BAU_KIV =  pd.merge(CAL_BAU_KIV_df, Other_Error_check, how='outer', left_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter']).fillna(0)                
            # print('Error&item')
            # print(Other_CAL_BAU_KIV)
            # xl.view(Other_CAL_BAU_KIV, table=False)
            # print(Productivity_RPH)
            # print('produ')
            # print(Productivity_RPH.dtypes)
            
            #----- Productivity & Error & Item Check merge -----# 
            
            Prod_Err_check = pd.merge(Productivity_RPH, Other_CAL_BAU_KIV, how='outer', left_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter'], right_on=['ProcessDate', 'Transactions', 'UserID', 'Year_Month', 'Quarter']).fillna(0)            
            Production_cunt = ['ProductionCount', 'QCCount', 'Total_RPH', 'LoanOut_Numbers',  'LoanOut_Hours', 'BAU_Checked', 'BAU_Error', 'KIV_Checked', 'KIV_Error', 'Calibration_Checked', 'Calibration_Error', 'Other_Checked', 'Other_Error']
            Prod_Err_check = Prod_Err_check.pivot_table(values=Production_cunt, index=['ProcessDate', 'UserID', 'Year_Month', 'Quarter'], 
                                                        aggfunc=np.sum, fill_value=0).reset_index()
            
            # print(Prod_Err_check)
            # print(Prod_Err_check.dtypes)
            #xl.view(Prod_Err_check, table=False)
                            

            # -------- Production Available hours  --------#
            
            Avl_df = pd.pivot_table(Pro_Avl_df, index=['ProcessDate', 'UserID', 'TransactionType', 'StartTime', 'EndTime', 'Date_Diff'], values ='NoofItems', aggfunc = 'sum', fill_value=0).reset_index()        
            Avl_df = Avl_df.rename(columns={'TransactionType':'Transactions', 'NoofItems':'ProductionCount'})
            Avl_df1 = Avl_df.append(Adf1)        
            
            Prod_avlhrs = Avl_df1.append(Qc1)         
            #print(Prod_avlhrs)
            
            Other_Avl_df = pd.DataFrame(OtherT_Avl)                         
            Other_Avl_hrs = Other_Avl_df.drop(columns=['TRANSACTION_TEAM', 'P_TYPE','A_COUNT', 'Year', 'Month','Year_Month', 'Quarter', 'PAUSE_TIME'])
            Other_Avl_hrs = Other_Avl_hrs.rename(columns={'START_TIME':'StartTime', 'END_TIME':'EndTime'})        
            #print(Other_Avl_hrs)
            
            Prod_avl_hrs = Prod_avlhrs.append(Other_Avl_hrs)
            #Prod_avl_hrs = Prod_avlhrs.drop(columns=['Date_Diff'], axis=1)
            
            Prod_avl_hrs = Prod_avl_hrs.groupby(['ProcessDate', 'UserID']).agg(MinTime = ('StartTime', np.min), MaxTime =('EndTime', np.max)).reset_index()
            Prod_avl_hrs['ProcessDate'] = pd.to_datetime(Prod_avl_hrs['ProcessDate'])                                
            #print(Prod_avl_hrs)
                        
            
            # -------- Non-Production Available hours  --------#       
            
            NProd_Avlhrs = Non_Prod.groupby(['NpDate', 'NPEntryBY']).agg(MinTime = ('NPStartTime', np.min), MaxTime = ('NPEndTime', np.max)).reset_index()
            NProd_Avlhrs = NProd_Avlhrs.rename(columns={'NpDate':'ProcessDate', 'NPEntryBY':'UserID'})
            NProd_Avlhrs['ProcessDate'] = pd.to_datetime(NProd_Avlhrs['ProcessDate'])
            Total_Avl = Prod_avl_hrs.append(NProd_Avlhrs)
            
            Total_Avl = Total_Avl.groupby(['ProcessDate', 'UserID']).agg(Login_Time = ('MinTime', np.min), Logout_Time =('MaxTime', np.max)).reset_index()
            Total_Avl['Total_hrs'] =  Total_Avl['Logout_Time'] - Total_Avl['Login_Time']
            
            Total_Avl['ProcessDate'] = pd.to_datetime(Total_Avl['ProcessDate'])                
            # print(Total_Avl.dtypes)     
            # print(Total_Avl)  
            # xl.view(Total_Avl, table=False)
                    
            
            # -------- Non-Production Diverted Calculation  --------#                        
            NProd_break = pd.DataFrame(Non_Prod)
            NProd_break['BreakType'] = 'Non Break'
            NProd_break.loc[NProd_break['NPBreakItem'] == 'Break', 'BreakType'] = 'Break'
            NProd_break.loc[NProd_break['NPBreakItem'] == 'Power Cut', 'BreakType'] = 'PowerCut'        
            
            NProd_break.drop(NProd_break.index[NProd_break['Date_Diff'].astype(str) == '0 days 00:00:00'], inplace = True)        
            NProd_break = pd.pivot_table(NProd_break, index = ['NpDate', 'NPEntryBY'],  columns = 'BreakType', values = 'Date_Diff', aggfunc='sum').reset_index()                
            NProd_break = NProd_break.rename(columns={'NpDate':'ProcessDate', 'NPEntryBY':'UserID', 'Break':'BreakHours', 'Non Break':'DivertedHours', 'PowerCut':'PowerCutHours'}) 
            if 'PowerCutHours' not in  NProd_break:
                NProd_break['PowerCutHours']   = '0 days 00:00:00'                          
            NProd_break[['BreakHours', 'DivertedHours', 'PowerCutHours']] = NProd_break[['BreakHours', 'DivertedHours', 'PowerCutHours']].fillna('0 days 00:00:00')
            
            # print('Nonprod')
            # print(NProd_break.dtypes)
            # print(NProd_break)
            # -------- Merge the Total Available hours &  Non-Production Diverted  --------#  
            IPD_NProd = pd.merge(Total_Avl, NProd_break, how='outer', left_on=['ProcessDate', 'UserID'], right_on=['ProcessDate', 'UserID']).fillna('0')       
            IPD_NProd['Login_Time'] = pd.to_datetime(IPD_NProd['Login_Time']).dt.time
            IPD_NProd['Logout_Time'] = pd.to_datetime(IPD_NProd['Logout_Time']).dt.time
            #IPD_NProd['BreakHours'] = pd.to_datetime(IPD_NProd['BreakHours']).dt.time
            IPD_NProd[['BreakHours', 'DivertedHours']] = IPD_NProd[['BreakHours', 'DivertedHours']].fillna('0 days 00:00:00')
            IPD_NProd['PowerCutHours'] = IPD_NProd['PowerCutHours'].fillna('0 days 00:00:00')
            
            IPD_NProd['Year'] = IPD_NProd['ProcessDate'].dt.year
            IPD_NProd['Month'] = IPD_NProd['ProcessDate'].dt.month_name()
            IPD_NProd['Year_Month'] = IPD_NProd['Year'].astype(str) + '-' + IPD_NProd['Month']
            IPD_NProd['Quarter'] = IPD_NProd['ProcessDate'].dt.to_period('Q')
            # print(IPD_NProd)
            # print(IPD_NProd.dtypes)
            if 'PowerCutHours' not in  IPD_NProd:
                IPD_NProd['PowerCutHours']   = '0 days 00:00:00'            
            IPD_NProd['Avl_hrs'] = IPD_NProd['Total_hrs'] - (IPD_NProd['BreakHours'] - IPD_NProd['PowerCutHours']).fillna('0 days 00:00:00')
            IPD_NProd = IPD_NProd.drop(columns=['Month', 'Year']) 
            IPD_NProd['PowerCutHours'] = IPD_NProd['PowerCutHours'].astype(str)
            
            if Cb2.get() == 'Quaterly':
                IPD_NProd = pd.DataFrame(IPD_NProd.loc[(IPD_NProd['Quarter'] == Mnth_qty)])  
            else:
                IPD_NProd = pd.DataFrame(IPD_NProd.loc[(IPD_NProd['Year_Month'] == Mnth_qty)])                          
                
            IPD_NProd['Quarter'] = IPD_NProd['Quarter'].astype(str)
                                
                            
            # -------- Merge the Productivity &  Non-Production columns  --------#
            
            Month_IPD_R = pd.merge(Prod_Err_check, IPD_NProd, how='outer', left_on =['ProcessDate', 'UserID', 'Year_Month', 'Quarter'], 
                                right_on=['ProcessDate', 'UserID', 'Year_Month', 'Quarter'])        
            Month_IPD_R['ProcessDate'] = pd.to_datetime(Month_IPD_R['ProcessDate'])             
            Month_IPD_R['Avl_hrs1'] = round(Month_IPD_R['Avl_hrs']/pd.Timedelta(hours=1),2)        
                        
            #print(Month_IPD_R)
            # Month_IPD_R[['BAU_Checked', 'BAU_Error', 'Calibration_Checked', 'Calibration_Error', 'KIV_Checked', 
            #              'KIV_Error', 'Other_Checked', 'Other_Error', 'ProductionCount', 'QCCount']] = Month_IPD_R[['BAU_Checked', 'BAU_Error', 'Calibration_Checked', 'Calibration_Error',
            #                                                                                                       'KIV_Checked', 'KIV_Error', 'Other_Checked', 'Other_Error', 'ProductionCount', 'QCCount']].astype(int)
            #Month_IPD_R['ProductionCount'] = Month_IPD_R['ProductionCount'].astype(int)
            
            Month_IPD_R = Month_IPD_R.fillna('0')
            Month_IPD_R['Total_RPH'] = Month_IPD_R['Total_RPH'].astype(float)
            Month_IPD_R[['ProductionCount', 'QCCount']] = Month_IPD_R[['ProductionCount', 'QCCount']].astype(int)
            Month_IPD_R[['BAU_Checked', 'BAU_Error', 'Calibration_Checked', 'Calibration_Error', 'KIV_Checked', 'KIV_Error', 'Other_Checked', 'Other_Error']] = Month_IPD_R[['BAU_Checked', 'BAU_Error', 'Calibration_Checked', 'Calibration_Error', 'KIV_Checked', 'KIV_Error', 'Other_Checked', 'Other_Error']].astype(int)
            Month_IPD_R['LoanOut_Hours'] = Month_IPD_R['LoanOut_Hours'].astype(float)
            
            # print(Month_IPD_R['LoanOut_Hours'])
            # print(Month_IPD_R.dtypes)
            
            # -------- Monthly & Quarterly data frame format change  --------#
            Monthly_Qty = Month_IPD_R[['ProcessDate', 'UserID', 'Login_Time', 'Logout_Time', 'Total_hrs','LoanOut_Numbers', 'LoanOut_Hours',
                                        'ProductionCount','QCCount', 'BAU_Checked', 'BAU_Error', 'Calibration_Checked', 'Calibration_Error', 'KIV_Checked', 'KIV_Error', 
                                        'Other_Checked', 'Other_Error', 'Avl_hrs', 'BreakHours', 'DivertedHours', 'PowerCutHours', 'Total_RPH']]
                            
            # -------- Monthly & Quarterly Productivity calculation  --------#
            Monthly_Qty['Prod %'] = round(Monthly_Qty['Total_RPH']/(round(Monthly_Qty['Avl_hrs']/pd.Timedelta(hours=1),2) - 
                                                                    round(Monthly_Qty['DivertedHours']/pd.Timedelta(hours=1),2)),4)*100 
            
            Monthly_Qty['Utilz %'] = round((round(Monthly_Qty['Avl_hrs']/pd.Timedelta(hours=1),2)-round(Monthly_Qty['DivertedHours']/pd.Timedelta(hours=1),2))/
                                        round(Monthly_Qty['Avl_hrs']/pd.Timedelta(hours=1),2),4)*100                 
                
            Monthly_Qty['BAU_QC%'] = (np.where(Monthly_Qty['ProductionCount']+Monthly_Qty['QCCount'] == 0.0, 0.0,np.where(
                Monthly_Qty['BAU_Error'] == 0.0, 1.0, np.where(Monthly_Qty['BAU_Checked'] == 0.0, 1.0, 1-(Monthly_Qty['BAU_Error'].divide(Monthly_Qty['BAU_Checked']))))))*100
            Monthly_Qty['Cal_QC%'] = (np.where(Monthly_Qty['ProductionCount']+Monthly_Qty['QCCount'] == 0.0, 0.0,np.where(
                Monthly_Qty['Calibration_Error'] == 0.0, 1.0, np.where(Monthly_Qty['Calibration_Checked'] == 0.0, 1.0, 1-(Monthly_Qty['Calibration_Error'].divide(Monthly_Qty['Calibration_Checked']))))))*100
            
            Monthly_Qty['KIV_QC%'] = (np.where(Monthly_Qty['ProductionCount']+Monthly_Qty['QCCount'] == 0.0, 0.0,np.where(
                Monthly_Qty['KIV_Error'] == 0.0, 1.0, np.where(Monthly_Qty['KIV_Checked'] == 0.0, 1.0, 1-(Monthly_Qty['KIV_Error'].divide(Monthly_Qty['KIV_Checked']))))))*100
            Monthly_Qty['Other_QC%'] = (np.where(Monthly_Qty['ProductionCount']+Monthly_Qty['QCCount'] == 0.0, 0.0,np.where(
                Monthly_Qty['Other_Error'] == 0.0, 1.0, np.where(Monthly_Qty['Other_Checked'] == 0.0, 1.0, 1-(Monthly_Qty['Other_Error'].divide(Monthly_Qty['Other_Checked']))))))*100
            
            
            
            # Monthly_Qty['Login_Time']=Monthly_Qty['Login_Time'].astype(str)
            # Monthly_Qty['Login_Time']=Monthly_Qty['Login_Time'].str[7:15]
            # -------- Monthly & Quarterly validation  --------#
            
            Monthly_Qty = Monthly_Qty.rename(columns={'Total_RPH':'Workout_Hours'})
            
            
            if Monthly_Qty['Workout_Hours'].sum()==0:
                Monthly_Qty['Workout_Hours']="0 days 00:00:00"
            else:
                Monthly_Qty['Workout_Hours']=pd.to_timedelta(Monthly_Qty['Workout_Hours'],unit='h') 
            Monthly_Qty['Workout_Hours']=Monthly_Qty['Workout_Hours'].astype(str)
            Monthly_Qty['Workout_Hours']=Monthly_Qty['Workout_Hours'].str[7:15]
            
            if Monthly_Qty['LoanOut_Hours'].sum()==0.0 :
                    Monthly_Qty['LoanOut_Hours']="0 days 00:00:00"
            else:
                Monthly_Qty['LoanOut_Hours']=pd.to_timedelta(Monthly_Qty['LoanOut_Hours'],unit='h') 
            Monthly_Qty['LoanOut_Hours']=Monthly_Qty['LoanOut_Hours'].astype(str)
            Monthly_Qty['LoanOut_Hours']=Monthly_Qty['LoanOut_Hours'].str[7:15]
            Monthly_Qty['Month_No'] = Monthly_Qty['ProcessDate'].dt.month
            Monthly_Qty['Weekdays'] = Monthly_Qty['ProcessDate'].dt.strftime('%A')  
            # print(Monthly_Qty)
            # print(Monthly_Qty.dtypes)
            
            # -------- Monthly & Quarterly format change  --------#  
            Monthly_Qty['Prod %'] = Monthly_Qty['Prod %'].fillna('0.0')
            Monthly_Qty['Utilz %'] = Monthly_Qty['Utilz %'].fillna('0.0')
            Monthly_Qty['ProcessDate'] = Monthly_Qty['ProcessDate'].dt.date                                             
            Monthly_Qty['Total_hrs'] = Monthly_Qty['Total_hrs'].astype(str).str.replace('0 days', '').str.strip()        
            Monthly_Qty['Avl_hrs'] = Monthly_Qty['Avl_hrs'].astype(str).str.replace('0 days', '').str.strip()        
            Monthly_Qty['BreakHours'] = Monthly_Qty['BreakHours'].astype(str).str.replace('0 days', '').str.strip()        
            Monthly_Qty['DivertedHours'] = Monthly_Qty['DivertedHours'].astype(str).str.replace('0 days', '').str.strip()        
            Monthly_Qty['PowerCutHours'] = Monthly_Qty['PowerCutHours'].astype(str).str.replace('0 days', '').str.strip()        
            
            # print(Monthly_Qty.dtypes)
            # print(Monthly_Qty)
            # -------- Monthly & Quarterly format change string & print to excel  --------#
            # Monthly_IPD = pd.DataFrame(Monthly_Qty)                    
            # Monthly_Qty = Monthly_IPD.astype(str).fillna('0')
            # xl.view(Monthly_Qty, table=False) 
                                               
            
            
            # -------- Data saved in excel file  --------#
            
            ReportPath = fd.askdirectory(title='Select Folder Path')
                
            if ReportPath =='':
                messagebox.showerror('Folder Validation','Folder Path Not Selected!')
                return False                        

            TemplatePath = r"xlsm"
            NewFilePath = ReportPath + r"\IPD_" + sh_name + '_' +IPD_UserID + ' - ' + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsm"
            shutil.copy(TemplatePath, NewFilePath)
                
            book = openpyxl.load_workbook(NewFilePath, keep_vba=True )
            writer = pd.ExcelWriter(NewFilePath, engine='openpyxl')
            writer.book = book
            writer.sheets = {ws.title: ws for ws in book.worksheets}
            Monthly_Qty.to_excel(writer, sheet_name='Month Details', startrow=writer.sheets['Month Details'].max_row, index = False)
            Non_Prod_Transdf.to_excel(writer, sheet_name='Non Production', startrow=writer.sheets['Non Production'].max_row, index = False)
            Transaction_Prod_df.to_excel(writer, sheet_name='Transaction Details', startrow=writer.sheets['Transaction Details'].max_row, index = False)
            #df_Support.to_excel(writer, sheet_name='Lookup - Support', startrow=writer.sheets['Lookup - Support'].max_row, index = False,header= False)
            writer.save()
            messagebox.showinfo('IPD Data','IPD Report Exported!')
            
        
        But11=Button(Can3,text=">>", command=lambda:IPD_Sumbit() ,font=("Bauhaus 93", 10,"bold"),bg='#00728F',fg='white',cursor="hand2")
        But11.place(relx = 0.37, rely=0.19)

    ######################################################################### DashBoard Page start ########################################


    def dashboardPage():

        #But7.config(state='disabled',bg="#98d4e3",font=("Calibri", 11,"bold"))
        #But1.configure(background ='#00728F')
        #But2.configure(background ='#00728F')
        But4.configure(background ='#00728F')
        
        But7.configure(background ='sky blue')

        Dash_w= Toplevel(ismaint)
        Dash_w.geometry("600x500+700+378")
        Dash_w.resizable(0,0)
        Dash_w.title("Dashboard")
        Dash_w.config(bg='white',)
        Dash_w.iconbitmap(icon_im)

        Dashline=Frame(Dash_w,width=600,height=1,bg='blue')
        Dashline.place(relx = 0.00, rely=0.00)

        #L_top=Frame(Dash_w,width=590,height=2,bg='#00728F')
        L_top=Frame(Dash_w,width=590,height=2,bg='Red')
        L_top.place(relx = 0.008, rely=0.21)

        bot=Frame(Dash_w,width=590,height=2,bg='Red')
        bot.place(relx = 0.008, rely=0.840)


        def DashSumbit():

            Dash_L_Login_T.config(text="Login Time : 0")
            Dash_L_Logout_T.config(text="Logout Time : 0")
            Dash_L_Pro_Count.config(text="Production # : 0")
            Dash_L_Auth.config(text="Authorisation # : 0")
            Dash_L_QC_Count.config(text="QC # : 0")

            UserDate=QC_E_Date.get()
            #--Login Time check

            query="Select Count(NPBreakItem) from tblhalt_NonP_Hrs where NPEntryBY=(?) and NpDate=(?) and  NPBreakItem='Login';"
            record=[User_ID, UserDate]
            Login_check=View_query(dbpath,query,record)
            Entry_count = Login_check[0][0]

            if Entry_count == 0:
                messagebox.showwarning("Warning","You didn't Login respective days." )
                return False

            query="Select NPStartTime from tblhalt_NonP_Hrs where NpDate=(?) and NPEntryBY=(?) and NPBreakItem='Login';"
            record=[UserDate, User_ID]
            rows1=View_query(dbpath,query,record)
            Login_Time=rows1[0][0]


            #--Logout Time
            query ="select MAX(NPEndTime) from tblhalt_NonP_Hrs where NpDate=(?) and NPEntryBY=(?) and (NPBreakItem='Logout' or NPBreakItem='Exit') ;"
            record=[UserDate, User_ID]
            rows2=View_query(dbpath, query,record)
            Logout_Time=rows2[0][0]


            if Logout_Time==None:
                Logout_Time=""
             

            Dash_L_Login_T.config(text="Login Time : "+str(Login_Time[Login_Time.find(' ')+1:]))
            Dash_L_Logout_T.config(text="Logout Time : "+str(Logout_Time[Logout_Time.find(' ')+1:]))

            #--Pro Count--
            query="SELECT SUM(NoofItems) FROM tblInput WHERE UserID=(?) and ProcessDate=(?) and Status = 'Completed' and Process_Status IN ('Re-update Done', 'Completed');"
            record=[User_ID ,UserDate]
            rows3=View_query(dbpath,query,record)

            Pro_Count1=rows3[0][0]
            Dash_L_Pro_Count.config(text="Production # : "+str(Pro_Count1))

            #--Auth Count--
            query="SELECT COUNT(UniqID) FROM tblAuthorisation WHERE AuthUserID = ? AND ProcessDate =?;"
            record=[User_ID,UserDate]
            rows4=View_query(dbpath,query, record)
            Auth_count=rows4[0][0]
            Dash_L_Auth.config(text="Authorisation # : "+str(Auth_count))

            #--QC Count--
            query="SELECT COUNT(QcCount) FROM tblQc_Production WHERE QCUserID = ? AND Qcdate =?;"
            record=[User_ID,UserDate]
            rows4=View_query(dbpath,query, record)
            QC_count=rows4[0][0]
            Dash_L_QC_Count.config(text="QC # : "+str(QC_count))

            #--Break Hrs--
            query="Select NPHours from tblhalt_NonP_Hrs WHERE NPEntryBY = ? AND NpDate = ? AND NPBreakItem ='Break' ;"
            record=[User_ID,UserDate]
            rows5=View_query(dbpath, query, record)
            T_Br_Hrs=[]
            for rows2 in rows5:
                T_Br_Hrs.append(rows2[0])

            Break = dt.timedelta()

            for i in T_Br_Hrs:
                (H, M, S) = i.split(':')
                d = dt.timedelta(hours=int(H), minutes=int(M), seconds=int(S))
                Break += d

            if Break>dt.timedelta(hours=1, minutes=0, seconds=0):
                Dash_L_Break_Hours.config(text='Break Hours : '+str(Break),fg='red')
            else:

                Dash_L_Break_Hours.config(text='Break Hours : '+str(Break),fg="#515056")

            #--Break & NP Hrs--
            #S_Q6="select NP_Time from TblNon_Production where P_Date=(?) and USER_ID==(?) and NP_Time<>'NULL' and ACTIVITY<>'Break'"
            query = "Select NPHours from tblhalt_NonP_Hrs WHERE NPEntryBY = ? AND NpDate = ? AND NPBreakItem <>'Break';"
            record=[User_ID,UserDate]
            rows6=View_query(dbpath, query, record)
            T_NP_Hrs=[]
            for rows2 in rows6:
                T_NP_Hrs.append(rows2[0])
            Diverted = dt.timedelta()
            for i in T_NP_Hrs:
                (H, M, S) = i.split(':')
                d = dt.timedelta(hours=int(H), minutes=int(M), seconds=int(S))
                Diverted += d
            Dash_L_NPHrs.config(text="Diverted Hours : "+str(Diverted))        

        #-------Date---------
        Dash_L_Date=Label(Dash_w,text="Date",fg="#515056",bg="white",bd=0, font=("Calibri", 12, "bold"))
        #Dash_L_Date.place(x=25+20,y=37)
        Dash_L_Date.place(relx = 0.07, rely=0.080)
        QC_E_Date=DateEntry(Dash_w, background= "black", foreground= "white",bd=2,font=('Calibri',12,"bold"),date_pattern='dd-MM-yyyy')
        QC_E_Date.place(relx = 0.07, rely=0.120,width=130, height=20+5)
        # today = dt.datetime.today()
        # offset = max(1, (today.weekday() + 6) % 7 - 3)
        # timedelta = dt.timedelta(offset)
        # most_recent = today - timedelta
        # P_Date=most_recent.strftime('%d-%m-%Y')
        # QC_E_Date._set_text(P_Date)

        #-------Login & Logout time---------

        Dash_L_Login_T=Label(Dash_w,text="Login Time :",fg="#515056",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_Login_T.place(relx = 0.09, rely=0.270)

        Dash_L_Logout_T=Label(Dash_w,text="Logout Time :",fg="#515056",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_Logout_T.place(relx = 0.59, rely=0.270)

        #-------Pro & QC Count ---------
        Dash_L_Pro_Count=Label(Dash_w,text="Production # :",fg="#515056",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_Pro_Count.place(relx = 0.09, rely=0.385)

        Dash_L_Auth = Label(Dash_w,text="Authorisation # :",fg="#515056",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_Auth.place(relx = 0.09, rely=0.500)


        Dash_L_QC_Count=Label(Dash_w,text="QC # :",fg="#515056",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_QC_Count.place(relx = 0.09, rely=0.615)

        Dash_L_utilization=Label(Dash_w,text="Utilisation % :",fg="#f2f2f9",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_utilization.place(relx = 0.59, rely=0.500)


        #-------Pro & QC  %---------
        Dash_L_Pro_Percentage=Label(Dash_w,text="Productivity % :",fg="#f2f2f9",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_Pro_Percentage.place(relx = 0.59, rely=0.385)

        Dash_L_NPHrs=Label(Dash_w,text="Diverted Hours :",fg="#515056",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_NPHrs.place(relx = 0.59, rely=0.730)

        Dash_L_QC_Percentage=Label(Dash_w,text="Quality % :",fg="#f2f2f9",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_QC_Percentage.place(relx = 0.59, rely=0.615)

        Dash_L_Break_Hours=Label(Dash_w,text="Break Hours :",fg="#515056",bg="white",bd=0, font=("Calibri", 13, "bold"))
        Dash_L_Break_Hours.place(relx = 0.09, rely=0.730)



        # Dash_Submit()

        S_button=Button(Dash_w,text=">", command=DashSumbit,font=("Bauhaus 93", 10,"bold"),bg='#00728F',fg='white',cursor="hand2")
        S_button.place(relx = 0.30, rely=0.120)

        ######################################################################### User Data download ########################################

            # - - Report Type - -
        Dash_L_RType = Label(Dash_w,text="Report Type",fg="#515056",bg="white",bd=0, font=("Calibri", 9, "bold"))
        Dash_L_RType.place(relx = 0.05, rely=0.870)
        R_List=["Production ","Authorisation","Non_production","QC"]
        Dash_C_RType = AutocompleteCombobox(Dash_w ,font=("Calibri",11),foreground="#515056",completevalues=R_List,state='readonly')
        Dash_C_RType.place(relx = 0.05, rely=0.910, width=130)
        Dash_C_RType.config(state='normal')
        Dash_C_RType.insert(0,'Production')
        Dash_C_RType.config(state='readonly')


        def User_Report():
            S_Date=QC_E_Date.get()

            conn = sqlite3.connect(dbpath)
            Pro = "SELECT * FROM tblInput where UserID='"+ User_ID +"' and ProcessDate='"+ S_Date +"' "
            Pro1=[Pro]
            Auth = "SELECT * FROM tblAuthorisation where AuthUserID='"+ User_ID +"' and ProcessDate='"+ S_Date +"' "
            Auth1=[Auth]

            N_Pro = "SELECT * FROM tblhalt_NonP_Hrs where NPEntryBY='"+ User_ID +"' and NpDate='"+ S_Date +"'  "
            N_Pro1=[N_Pro]

            QC = "SELECT * FROM tblQc_Production where QCUserID='"+ User_ID +"' and WITProcessDate='"+ S_Date +"' "
            QC1=[QC]

            for q in Pro1:
                df1 = pd.read_sql_query(q, conn)
            for q in Auth1:
                df2 = pd.read_sql_query(q, conn)
            for q in N_Pro1:
                df3 = pd.read_sql_query(q, conn)
            for q in QC1:
                df4 = pd.read_sql_query(q, conn)


            if Dash_C_RType.get().strip()=="Production":
                conn.close()
                messagebox.showinfo('Finished','User Report Created!')
                xw.view(df1, table=False)

            elif Dash_C_RType.get().strip() =="Authorisation":
                conn.close()
                messagebox.showinfo("Finished", 'Authorise Report Created')
                xw.view(df2, table=False)

            elif Dash_C_RType.get().strip()=="Non_production":
                conn.close()
                messagebox.showinfo('Finished','User Report Created!')
                xw.view(df3, table=False)

            elif Dash_C_RType.get().strip()=="QC":
                conn.close()
                messagebox.showinfo('Finished','User Report Created!')
                xw.view(df4, table=False)
            conn.close()

        Report_button=Button(Dash_w,text="User Data", command=User_Report,font=("Calibri", 11,"bold"),bg='#00728F',fg='white',cursor="hand2")
        Report_button.place(relx = 0.28, rely=0.907, height=26)


        #----------------------------Raw Report---------------------------

        def Raw_Report():

            if len(Admin_E_SDate.get())<1 or len(Admin_E_EDate.get())<1:
                messagebox.showerror("Data Missing", "Select Start and End Date")
                Dash_w.focus_force()
                return False

            if Admin_E_SDate.get() > Admin_E_EDate.get() :
                messagebox.showerror("Data Missing", "Incorrect Start and End Date")
                Dash_w.focus_force()
                return False

            ReportPath = fd.askdirectory(title='Select Folder Path')
            if ReportPath != '':
                F_Date=Admin_E_SDate.get()
                T_Date=Admin_E_EDate.get()

         # -------- Date formate changed  --------#
         
                Dash_Sdate=Admin_E_SDate.get()
                Dash_Sdate=dt.datetime.strptime(Dash_Sdate, "%d-%m-%Y").strftime('%Y-%m-%d')
                # print(Dash_Sdate)
                Dash_Edate=Admin_E_EDate.get()
                Dash_Edate=dt.datetime.strptime(Dash_Edate, "%d-%m-%Y").strftime('%Y-%m-%d')
                # print(Dash_Edate)

                TempPath = ReportPath + r"/IS-Maintenance Raw Data " + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsx"

                # query1 = "select * from tblInput where  ProcessDate >= '"+ F_Date +"' and ProcessDate <= '"+ T_Date +"' ";
                # query2 = "SELECT * FROM tblAuthorisation where ProcessDate >= '"+ F_Date +"' and ProcessDate <= '"+ T_Date +"' ";
                # query3 = "select * from tblhalt_NonP_Hrs where   NpDate >= '"+ F_Date +"' and NpDate"
                #query4 = "select * from tblQc_Production where WITProcessDate between '"+ F_Date +"' AND '"+ T_Date +"' or Uniq_ID in (SELECT Uniq_ID from TblQCProducation WHERE QC_Date >= '"+ F_Date +"' AND QC_Date <= '"+ T_Date +"')"
                #query4 = "SELECT * FROM tblQc_Production where WITProcessDate >= '"+ F_Date +"' and WITProcessDate <='"+ T_Date +"' "

                Excelsheets = ['Production', 'Authorisation', 'Non_Production', 'QC']
                writer = pd.ExcelWriter(TempPath, engine = 'xlsxwriter')

                # Production = pd.DataFrame()
                # Non_Production = pd.DataFrame()
                # Authorisation = pd.DataFrame()
                # QC = pd.DataFrame()

                try:
                    conn = sqlite3.connect(dbpath,timeout=45,uri=True)

                    # -------- Production Raw Data  --------#
                    # Production = pd.read_sql_query(query1, conn)
                    Production = pd.read_sql_query("SELECT * FROM tblInput", conn)

                    Production['ProcessDate'] = pd.to_datetime(Production['ProcessDate'], format= '%d-%m-%Y')

                    Production = Production.loc[(Production['ProcessDate']>= Dash_Sdate) & (Production['ProcessDate'] <= Dash_Edate)]
                    Production['ProcessDate'] = pd.to_datetime(Production['ProcessDate']).dt.strftime('%d/%m/%Y')

                    # -------- Authorisation Raw Data  --------#
                    # Authorisation = pd.read_sql_query(query2, conn)
                    Authorisation = pd.read_sql_query("SELECT * FROM tblAuthorisation", conn)

                    Authorisation['ProcessDate'] = pd.to_datetime(Authorisation['ProcessDate'], format= '%d-%m-%Y')
                    Authorisation['Auth_date']=pd.to_datetime(Authorisation['AuthEndTime']).dt.date
                    Authorisation['Auth_date'] = pd.to_datetime(Authorisation['Auth_date'])

                    Auth_Sdate=dt.datetime.strptime(Dash_Sdate, '%Y-%m-%d').strftime('%Y-%m-%d')
                    Auth_Edate=dt.datetime.strptime(Dash_Edate, '%Y-%m-%d').strftime('%Y-%m-%d')

                    Auth_df1 = Authorisation.loc[(Authorisation['Auth_date']>= Auth_Sdate) & (Authorisation['Auth_date'] <= Auth_Edate)]
                    Auth_df2 = Authorisation.loc[(Authorisation['ProcessDate']>= Dash_Sdate) & (Authorisation['ProcessDate'] <= Dash_Edate)]
                    Authorisation=Auth_df1.append(Auth_df2, ignore_index=True)
                    Authorisation=Authorisation.drop_duplicates(subset=['UniqID','AuthEndTime'])

                    Authorisation['Auth_date'] = pd.to_datetime(Authorisation['Auth_date']).dt.strftime('%m/%d/%Y')
                    Authorisation['ProcessDate'] = pd.to_datetime(Authorisation['ProcessDate']).dt.strftime('%d/%m/%Y')

                    # -------- Non_Production Raw Data  --------#
                    # Non_Production = pd.read_sql_query(query3, conn)
                    Non_Production = pd.read_sql_query("SELECT * FROM tblhalt_NonP_Hrs", conn)

                    Non_Production['NpDate'] = pd.to_datetime(Non_Production['NpDate'], format= '%d-%m-%Y')

                    Non_Production = Non_Production.loc[(Non_Production['NpDate']>= Dash_Sdate) & (Non_Production['NpDate'] <= Dash_Edate)]
                    Non_Production['NpDate'] = pd.to_datetime(Non_Production['NpDate']).dt.strftime('%d/%m/%Y')

                    # -------- QC Raw Data  --------#
                    #QC = pd.read_sql_query(query4, conn)
                    QC = pd.read_sql_query("SELECT * FROM tblQc_Production", conn)

                    QC['Qcdate'] = pd.to_datetime(QC['Qcdate'], format= '%d-%m-%Y')
                    QC['WITProcessDate'] = pd.to_datetime(QC['WITProcessDate'], format= '%d-%m-%Y')

                    QC_df1 = QC.loc[(QC['Qcdate']>= Dash_Sdate) & (QC['Qcdate'] <= Dash_Edate)]
                    QC_df2 = QC.loc[(QC['WITProcessDate']>= Dash_Sdate) & (QC['WITProcessDate'] <= Dash_Edate)]

                    QC=QC_df1.append(QC_df2, ignore_index=True)
                    QC=QC.drop_duplicates(subset=['QcUniqID'])
                    QC['Qcdate'] = pd.to_datetime(QC['Qcdate']).dt.strftime('%d/%m/%Y')
                    QC['WITProcessDate'] = pd.to_datetime(QC['WITProcessDate']).dt.strftime('%d/%m/%Y')

                    conn.close()
                except:
                    conn.close()
                    messagebox.showerror("Data Crash","IS-Maintenance data crashed, Please reopen the tool")
                    return False


                Dfs=[Production, Authorisation, Non_Production, QC]
                i=0
                for q in Dfs:
                    q.to_excel(writer, sheet_name=Excelsheets[i], index=False)
                    i=i+1
                conn.close()
                writer.save()
                #writer.close()
                writer.handles = None

                messagebox.showinfo('Office Inn Raw Data','IS-Maintenance Raw Data Report Exported!')
                startfile(TempPath)
            else:
                messagebox.showerror('Folder Validation','Folder Path Not Selected!')

        #--Start Date--

        Admin_L_SDate=Label(Dash_w,text="Start Date",fg="#515056",bg="white",bd=0, font=("Calibri", 9, "bold"))
        # Admin_L_SDate.place(relx = 0.51, rely=0.870)
        Admin_E_SDate=DateEntry(Dash_w, background= "black", foreground= "white",bd=2,font=('Calibri',11),date_pattern='dd-MM-yyyy',maxdate=date.today())
        # Admin_E_SDate.place(relx = 0.51, rely=0.910,  width=95)

        Admin_L_EDate=Label(Dash_w,text="End Date",fg="#515056",bg="white",bd=0, font=("Calibri", 9, "bold"))
        # Admin_L_EDate.place(relx = 0.68, rely=0.870)
        Admin_E_EDate=DateEntry(Dash_w, background= "black", foreground= "white",bd=2,font=('Calibri',11),date_pattern='dd-MM-yyyy')
        # Admin_E_EDate.place(relx = 0.68, rely=0.910, width=95)

        Raw_Report_Button = Button(Dash_w, text="Raw Data",bg="#00728F",foreground="white",font=("Calibri", 11,"bold"),command=Raw_Report,cursor="hand2" )
        # Raw_Report_Button.place(relx = 0.85, rely=0.907, height=26)



        ######################################################################### Admin Start ########################################
        
        #---------------------------- Admin access check ---------------------------#

        Admin_check = Select_data(Supportdb, "Select USER_ID from TblUser_data where USER_ID ='"+ User_ID +"' and Admin_Access ='Yes' and ISM_Authoriser ='Yes';")
        if len(Admin_check) != 0:
            Admin_L_SDate.place(relx = 0.51, rely=0.870)
            Admin_E_SDate.place(relx = 0.51, rely=0.910,  width=95)
            Admin_L_EDate.place(relx = 0.68, rely=0.870)
            Admin_E_EDate.place(relx = 0.68, rely=0.910, width=95)
            Raw_Report_Button.place(relx = 0.85, rely=0.907, height=26)


        def Dash_avoid():
                Dash_w.destroy()
                ismaint.focus_force()
                But7.configure(background ='#00728F')
                #Dashboard_Button.config(state='normal',bg="#00728F",font=("Calibri", 11,"bold"))

        Dash_w.grab_set()
        Dash_w.protocol("WM_DELETE_WINDOW", Dash_avoid)

    def Admin_ISM(stframe):
        global active_page
        active_page = True

        But3.config(bg ='sky blue')
        But1.config(background ='#00728F')

        But2.config(background ='#00728F')
        But4.config(background ='#00728F')

        record = [user_name]
        query = ("Select * from TblUser_data where USER_ID =? and User_Access ='Yes' and Admin_Access = 'Yes';")
        user_access = View_query(Supportdb,query,record)

        if len(user_access) <= 0 :
            messagebox.showerror("Admin Validation","You don't have admin access, Kindly check with your team leader!")
            return False
                
        Can9 = Canvas(stframe,bg="white", height=600,width=1178,highlightthickness=0)
        Can9.place(relx=0.00,rely=0.11)

        # -------- UserID & Current date   --------#

        # Label25 = Label(Can9,text="UserID",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 9, "bold"))
        # Label25.place(relx=0.40,rely=0.018)
        # Com_list12 = Select_data(Supportdb, "SELECT * FROM TblUser_data")
        # Cb12 = AutocompleteCombobox(Can9, font=("Calibri",11,), completevalues= Com_list12)
        # Cb12.place(relx=0.40,rely=0.060, width=125, height=23)
        
        Label21 = Label(Can9,text="Process Status",fg='#515056',bg="white",bd=0, font=("Calibri (Body)", 12, "bold"))
        Label21.place(relx = 0.73, rely=0.02, height= 23)


        # -------- Admin Treeview for Indput & Authorisation   --------#
        sty = ttk.Style()
        sty.theme_use('default')
        tree1_header = ["ProcessDate","UserID","CaseReference","Transaction","NoofItems","Authorisation", "Status", "Authorise ID","ProcessStatus","c10" ]
        is_tree3 = MyTreeview(Can9,columns=tree1_header, show='headings',height=26,)
        is_tree3.column("#1",anchor=CENTER,width=70)
        is_tree3.heading("#1",text="ProcessDate")
        is_tree3.column("#2",anchor=CENTER,width=60)
        is_tree3.heading("#2",text="UserID")
        is_tree3.column("#3",anchor=CENTER,width=85)
        is_tree3.heading("#3",text="CaseReference")
        is_tree3.column('#4',anchor=CENTER,width=90)
        is_tree3.heading('#4',text="Transaction")
        is_tree3.column('#5',anchor=CENTER,width=65)
        is_tree3.heading('#5',text="NoofItems")
        is_tree3.column('#6',anchor=CENTER,width=70)
        is_tree3.heading('#6',text="Authorisation")
        is_tree3.column('#7', anchor=CENTER,width=68)
        is_tree3.heading('#7',text="Status")
        is_tree3.column('#8',anchor=CENTER,width=68)
        is_tree3.heading('#8',text="AuthoriseID")
        is_tree3.column('#9',anchor=CENTER,width=105)
        is_tree3.heading('#9',text="ProcessStatus")
        is_tree3.column('#10', minwidth=0, width=0)


        # -------- Treeview3 sort  --------#
        tree1sort = ["date","name","name","name","name","name","name","name","name","name"]
        for iCount in range(len(tree1_header)):
            strHdr = tree1_header[iCount]
            is_tree3.heading(strHdr, text=strHdr.title(), sort_by=tree1sort[iCount])
            is_tree3.column(tree1_header[iCount], stretch=True)

        is_tree3.place(relx=0.012,rely=0.058)
        # is_tree3.place(relx=0.020,rely=0.058)
        scrol_input= Scrollbar(Can9,orient="vertical",command=is_tree3.yview)
        scrol_input.place(relx=0.585,rely=0.058,height=540)
        # scrol_input.place(relx=0.580,rely=0.058,height=320)
        is_tree3.configure(yscrollcommand= scrol_input.set)
        
        
        ######################################################################### Transaction count update in Treeview start ########################################
        
        # -------- Input count updated in treeview   --------#
        
        # tree2_header = ["UserID","Completed","Cancelled" ]
        # is_tree4 = MyTreeview(Can9,columns=tree2_header, show='headings',height=8,)
        # is_tree4.column("#1",anchor=CENTER,width=110)
        # is_tree4.heading("#1",text="UserID")
        # is_tree4.column("#2",anchor=CENTER,width=140)
        # is_tree4.heading("#2",text="Completed")
        # is_tree4.column("#3",anchor=CENTER,width=140)
        # is_tree4.heading("#3",text="Cancelled")                        
        
        # # -------- Treeview4 sort  --------#
        # tree2sort = ["date","name","name"]
        # for iCount in range(len(tree2_header)):
        #     strHdr = tree2_header[iCount]
        #     is_tree4.heading(strHdr, text=strHdr.title(), sort_by=tree2sort[iCount])
        #     is_tree4.column(tree2_header[iCount], stretch=True)
            
        # is_tree4.place(relx=0.020,rely=0.690)
        # scrol_bar = Scrollbar(Can9,orient="vertical",command=is_tree3.yview)
        # scrol_bar.place(relx=0.340,rely=0.690,height=180)
        # is_tree4.configure(yscrollcommand= scrol_bar.set)
                                
        ######################################################################### Transaction count update in Treeview closed ########################################
        
        # -------- Admin Clear   --------#
        def Admin_Clear(Processtype=''):            

            if Processtype !='' or Processtype == '':
                Ent10.config(state='normal')
                Ent10.delete(0, END)
                Ent11.config(state='normal')
                Ent11.delete(0, END)
                Cb13.config(state='normal')
                Cb13.delete(0,END)
                Cb14.config(state='normal')
                Cb14.delete(0,END)
                Cb15.config(state='normal')
                Cb15.delete(0,END)
                Cb16.config(state='normal')
                Cb16.delete(0,END)
                Cb17.config(state='normal')
                Cb17.delete(0,END)
                Cb18.config(state='normal')
                Cb18.delete(0,END)
                


        # -------- Treeview data viewed   --------#
        def Selected_tree3(event):
            global Ad_uniqID
            global Processtype
            Admin_Radio = Ad_options.get()
            try:
                Ent10.config(state='normal')
                Ent10.delete(0,END)
                Ent11.config(state='normal')
                Ent11.delete(0,END)
                Cb13.config(state='normal')
                Cb13.delete(0, END)
                Cb14.config(state='normal')
                Cb14.delete(0,END)
                Cb15.config(state='normal')
                Cb15.delete(0, END)
                Cb16.config(state='normal')
                Cb16.delete(0, END)
                Cb17.config(state='normal')
                Cb17.delete(0, END)
                Cb18.config(state='normal')
                Cb18.delete(0, END)


                for item in is_tree3.selection():
                    item_select3 =is_tree3.item(item)
                    Processdate = item_select3['values'][0]
                    Inputuserid = item_select3['values'][1]
                    Transtype = item_select3['values'][3]
                    No_item = item_select3['values'][4]
                    Authst = item_select3['values'][5]
                    Statuschange = item_select3['values'][6]
                    AuthoriseID = item_select3['values'][7]
                    Process_status = item_select3['values'][8]
                    Ad_uniqID = item_select3['values'][10]
                    #print(Ad_uniqID)
                if Admin_Radio ==1 :
                        Processtype = 'Input'                        
                        Ent10.insert(END, Processdate)
                        Ent10.config(state='disabled')
                        Ent11.insert(END, No_item)
                        Cb13.insert(END, Inputuserid)
                        Cb14.insert(END, AuthoriseID)
                        Cb14.config(state='disabled')
                        Cb15.insert(END, Process_status)
                        Cb15.config(state='disabled')
                        Cb16.insert(END, Transtype)
                        Cb17.insert(END, Authst)
                        Cb18.insert(END, Statuschange)
                        
                        
                elif Admin_Radio ==2 :

                        Processtype = 'Authorisation'                        
                        Ent10.insert(END, Processdate)
                        Ent10.config(state='disabled')
                        Ent11.insert(END, No_item)
                        Cb13.insert(END, Inputuserid)
                        Cb13.config(state ='disabled')
                        Cb14.insert(END, AuthoriseID)
                        Cb15.insert(END, Process_status)
                        Cb16.insert(END, Transtype)
                        Cb17.insert(END, Authst)
                        Cb18.insert(END, Statuschange)
                        Pstatus = Cb15.get()
                        #Auth_status = Cb17.get()
                        #Jobstatus = Cb18.get()
                        Com_select14(Pstatus=Pstatus)
                        # Com_selecte17(Auth_status= Auth_status)
                        #Com_selecte18(Jobstatus= Jobstatus)
                        

            except:
                pass

     # -------- Process status checking   --------#
        def Com_select14(Pstatus):
            
            Pstatus = Cb15.get()
            if  Ad_options.get() ==2 and  Pstatus =='Auth - Unassigned' and Cb17.get() == 'Yes' :
                Cb14.delete(0, END)
                Cb14.config(state ='disabled')
            elif Ad_options.get() ==2 and Pstatus == 'Auth - InProcess' and Cb17.get() == 'Yes' :
                Cb14.config(state ='normal')
        
        # -------- Authrisation  & Process status checking   --------#        
        def Com_selecte17(Auth_status):
            Auth_status = Cb17.get()
            if Ad_options.get() ==2 and Auth_status == "No":
                Cb14.delete(0, END)
                Cb15.delete(0, END)
                Cb14.config(state ='disabled')                
                #Cb15.config(completevalues = ['IP - In Process', 'IP - Diarised', 'IP - Cancelled'])                
                Cb18.config(state='normal')
                Jobstatus = Cb18.get()
                Com_selecte18(Jobstatus= Jobstatus)
            
            elif Ad_options.get() ==2 and Auth_status == "Yes" and Cb18.get() == 'Completed':                
                Cb14.config(state ='normal')                                
                Pstatus = Cb15.get()                
                Com_select14(Pstatus)
                Jobstatus = Cb18.get()
                Com_selecte18(Jobstatus)
                
        # -------- Job status checking   --------#  
        def Com_selecte18(Jobstatus):
            Jobstatus = Cb18.get()
            if Ad_options.get() ==2 and Jobstatus == "Completed" and Cb17.get() == 'Yes':                
                #Cb14.config(state ='normal')
                # Auth_status = Cb17.get()  
                # Com_selecte17(Auth_status= Auth_status)                                    
                Cb15.config(state='normal')
                Cb15.delete(0, END)                
                Cb15.config(completevalues = ['Auth - Unassigned','Auth - InProcess']) 
                
            elif Ad_options.get() ==2 and Cb17.get() == 'No':                
                Cb15.config(state='normal')                
                Process_status = 'IP - ' + Cb18.get()
                Cb15.delete(0, END)
                Cb15.insert(END, Process_status)
                Cb15.config(state='disabled')                  
                
            elif Ad_options.get() ==2 and Jobstatus != "Completed":
                Cb14.delete(0, END)
                Cb14.config(state='disabled')                
                Cb15.config(state='normal')                
                Process_status = 'IP - ' + Cb18.get()
                Cb15.delete(0, END)
                Cb15.insert(END, Process_status)
                Cb15.config(state='disabled')
                #print(Process_status)
            elif Ad_options.get() ==1:
                Cb15.config(state='normal')                
                Process_status = 'IP - ' + Cb18.get()
                Cb15.delete(0, END)
                Cb15.insert(END, Process_status)
                Cb15.config(state='disabled')
        
        
        # -------- Transaction status checking with Auth transaction   --------# 
        # def Com_select16(Trans_type):
        #     Trans_type = Cb16.get()
        #     print(Trans_type)
        #     com_val16 = Select_data(Supportdb, "select Transactiontype From tblISM_Process Where Transactiontype= ' "+Trans_type +"' ")
        #     if Trans_type not in com_val16:
        #         print('Not match')
            

        is_tree3.bind('<<TreeviewSelect>>', lambda event: Selected_tree3(event))


        #-------- Tree3 Viewed all input userdata data in admin queue --------#
        def Adradio_selected():

            Select_adradio = Ad_options.get()
            if Select_adradio == 1:
                                
                is_tree3.delete(*is_tree3.get_children())
                conn = sqlite3.connect(dbpath)
                #User_data = [User_ID]
                query = """SELECT ProcessDate, UserID, CaseReference, TransactionType, NoofItems, Authorisation, Status, B.AuthoriserID, B.CurrentStatus,  Process_Status, A.UniqueID, AuthStatus, MAX(PrimaryID) FROM tblInput AS A
                            INNER JOIN (Select AuthoriserID, CurrentStatus, C.UniqueID from tblMain AS C) AS B
                            ON A.UniqueID = B.UniqueID
                            WHERE A.UniqueID IN (Select D.UniqueID from tblMain AS D WHERE CurrentStatus in ('IP - In Process', 'IP - Diarised', 'IP - Re-update Required', 'IP - Rejected'))
                            GROUP BY A.UniqueID HAVING Process_Status IN ('In Process', 'Completed', 'Diarised', 'Re-update Required', 'Rejected');"""

                # query = """SELECT ProcessDate, UserID, CaseReference, TransactionType, AccountNumber, Authorisation, Status, AuthStatus, Process_Status, UniqueID, MAX(PrimaryID) FROM tblInput WHERE UniqueID IN (Select UniqueID from tblMain WHERE CurrentStatus in ('IP - In Process', 'IP - Diarised', 'IP - Re-update Required', 'IP - Rejected'))
                #             GROUP BY UniqueID HAVING Process_Status IN ('In Process', 'Diarised', 'Re-update Required', 'Rejected');"""

                c_conn = conn.execute(query);
                rows = c_conn.fetchall();
                conn.close()

                for rw in rows:
                    is_tree3.insert("",tkinter.END,values=rw)
                    
                # input_df = pd.DataFrame(rows)
                # print(input_df)

            elif Select_adradio == 2:                
                
                is_tree3.delete(*is_tree3.get_children())
                conn = sqlite3.connect(dbpath)
                query = """SELECT ProcessDate, UserID, CaseReference, TransactionType, NoofItems, Authorisation, Status, B.AuthoriserID, B.CurrentStatus, Process_Status, A.UniqueID,  AuthStatus, MAX(PrimaryID) FROM tblInput AS A
                            INNER JOIN (Select AuthoriserID, CurrentStatus, C.UniqueID from tblMain AS C) AS B
                            ON A.UniqueID = B.UniqueID
                            WHERE A.UniqueID IN (Select D.UniqueID from tblMain AS D WHERE Authorisation = 'Yes' AND CurrentStatus in ( 'IP - Completed', 'Auth - InProcess', 'Auth - Unassigned', 'IP - Re-update Done'))
                            GROUP BY A.UniqueID HAVING Process_Status IN ('Completed', 'Re-update Done');"""
                c_conn = conn.execute(query);
                rows = c_conn.fetchall();
                conn.close()

                for r in rows:
                    is_tree3.insert("", tkinter.END,values = r)
                                    
        
        Ad_options = IntVar()
        Ad_options.set(1)
        Adradio_selected()
        Rd3 = Radiobutton(Can9,text="Input", variable=Ad_options, value=1,command=Adradio_selected, bg='white', fg='black', activeforeground='red', selectcolor='white', font=("Calibri",10,"bold"))
        Rd3.place(relx=0.015,rely=0.015)
        Rd4 = Radiobutton(Can9,text="Authorisation", variable=Ad_options, value=2,command=Adradio_selected, bg='white', fg='black', activeforeground='red', selectcolor='white', font=("Calibri",10,"bold"))
        Rd4.place(relx=0.08,rely=0.015)
        
        
        # -------- Date wise alltransaction apperance in Treeview   --------#
        
        def Filterdatabase():
            
            # S_Date=dt.datetime.strptime(S_Date, "%d-%m-%Y").strftime('%Y-%m-%d')
            print(S_Date.get())
            if  Ad_options.get() == 1:
                is_tree3.delete(*is_tree3.get_children())
                conn = sqlite3.connect(dbpath)
                print("test")
                query = """SELECT ProcessDate, UserID, CaseReference, TransactionType, NoofItems, Authorisation, Status, B.AuthoriserID, B.CurrentStatus,  Process_Status, A.UniqueID, AuthStatus, MAX(PrimaryID) FROM tblInput AS A
                            INNER JOIN (Select AuthoriserID, CurrentStatus, C.UniqueID from tblMain AS C) AS B
                            ON A.UniqueID = B.UniqueID
                            WHERE A.UniqueID IN (Select D.UniqueID from tblMain AS D WHERE CurrentStatus in ('IP - Cancelled', 'IP - Completed', 'IP - Re-update Required', 'IP - In Process', 'IP - Diarised', 'IP - Re-update Required', 'IP - Rejected'))
                            GROUP BY A.UniqueID HAVING Process_Status IN ('Cancelled', 'Completed', 'Re-update Done', 'In Process', 'Diarised', 'Re-update Required', 'Rejected') and  ProcessDate= '""" + S_Date.get() + """';"""                                                                        
                            

                # query = """SELECT ProcessDate, UserID, CaseReference, TransactionType, NoofItems, Authorisation, Status, AuthStatus, Process_Status, UniqueID, MAX(PrimaryID) FROM tblInput WHERE UniqueID IN (Select UniqueID from tblMain WHERE CurrentStatus in ('IP - In Process', 'IP - Diarised', 'IP - Re-update Required', 'IP - Rejected'))
                #             GROUP BY UniqueID HAVING Process_Status IN ('In Process', 'Diarised', 'Re-update Required', 'Rejected');"""                
                c_conn = conn.execute(query);
                rows = c_conn.fetchall();
                conn.close()

                for rw in rows:
                    is_tree3.insert("",tkinter.END,values=rw)
                #xl.view(rows, table=False)
                
            elif Ad_options.get() == 2:
                print("treeview2")
                is_tree3.delete(*is_tree3.get_children())
                conn = sqlite3.connect(dbpath)
                query = """SELECT ProcessDate, UserID, CaseReference, TransactionType, NoofItems, Authorisation, Status, B.AuthoriserID, B.CurrentStatus, Process_Status, A.UniqueID,  AuthStatus, MAX(PrimaryID) FROM tblInput AS A
                            INNER JOIN (Select AuthoriserID, CurrentStatus, C.UniqueID from tblMain AS C) AS B
                            ON A.UniqueID = B.UniqueID
                            WHERE A.UniqueID IN (Select D.UniqueID from tblMain AS D WHERE Authorisation = 'Yes' AND CurrentStatus in ('Auth - Autorised', 'IP - Completed', 'Auth - InProcess', 'Auth - Unassigned', 'IP - Re-update Done'))
                            GROUP BY A.UniqueID HAVING Process_Status IN ('Completed', 'Re-update Done', 'Diarised', 'Re-update Required', 'Rejected') and ProcessDate = '""" + S_Date.get()+ """';"""
                c_conn = conn.execute(query);
                rows = c_conn.fetchall();
                conn.close()
                
                for r in rows:
                    is_tree3.insert("", tkinter.END,values = r)
                
                #xl.view(rows, table=False)
            print(Ad_options.get())
            
        S_Date=DateEntry(Can9, background= "black", foreground= "white",bd=2,font=('Calibri',11),date_pattern='dd-MM-yyyy')
        S_Date.place(relx = 0.30, rely=0.015, width=95)
        ExptImg1 = PhotoImage(file = r"")
        S_Button=Button(Can9, image=ExptImg1, compound='top', command=Filterdatabase,font=("Calibri body", 8),bg='white',fg='#00728F',cursor="hand2")
        S_Button.image=ExptImg1            
        S_Button.place(relx=0.395, rely=0.015)



        # -------- Export Authorisation Report   --------#
        def Auth_UserReport():
            
            Conn = sqlite3.connect(dbpath)
            Auth_data = """SELECT ProcessDate, UserID, CaseReference, TransactionType, AccountNumber, Authorisation, B.AuthoriserID, B.CurrentStatus, Process_Status, A.UniqueID, Status, MAX(PrimaryID) FROM tblInput AS A
                                INNER JOIN (Select AuthoriserID, CurrentStatus, C.UniqueID from tblMain AS C) AS B
                                ON A.UniqueID = B.UniqueID
                                WHERE A.UniqueID IN (Select D.UniqueID from tblMain AS D WHERE Authorisation = 'Yes' AND CurrentStatus in ('IP - Completed', 'Auth - InProcess', 'Auth - Unassigned', 'IP - Re-update Done'))
                                GROUP BY A.UniqueID HAVING Process_Status IN ('Completed', 'Re-update Done');"""

            Auth_df = [Auth_data]
            for qry in Auth_df:
                df = pd.read_sql_query(qry, Conn)
                xl.view(df, table=False)
            Conn.close()                        
        
        But9=Button(Can9,text="Export Auth", command=Auth_UserReport,font=("Calibri", 10,"bold"),bg='#00728F',fg='white',cursor="hand2")
        But9.place(relx = 0.52, rely=0.013, height=26)



        # -------- Admin Sumbit   --------#
        def Admin_sumbit():
            UniqueID = Ad_uniqID
            print(UniqueID)
            
            statuslist = ['IP - In Process', 'IP - Diarised', 'IP - Re-update Required', 'IP - Completed']
            
            # -------- validation process for submit    --------#  
            if Cb15.get() == 'Auth - InProcess' and Cb14.get() == '':
                messagebox.showwarning("Warning","Kindly update the required fields!")
                return False        
            
            elif len(Cb15.get()) == 0 or len(Cb17.get()) == 0 or len(Cb18.get()) == 0 or len(Cb16.get()) == 0 or len(Ent11.get()) ==0:
                messagebox.showwarning("Warning","Kindly update the required fields!")
                return False        
            
            
            # -------- Authrisation page unassigned and assinged updated    --------#
            if Cb15.get() in ['Auth - Unassigned', 'Auth - InProcess']  and Processtype == 'Authorisation' and Cb18.get() == 'Completed':
                query = ("Update tblMain set AuthoriserID =?, Authorisation=?, CurrentStatus =? Where UniqueID=?;")
                record = (Cb14.get(), Cb17.get(), Cb15.get(), UniqueID)
                Update_query(query,record)
                query = ("Update tblInput set TransactionType =?, NoofItems =?, Authorisation =?, Status =?, Process_Status=? Where PrimaryID in (Select Max(PrimaryID) from tblInput where UniqueID=?);")
                record = (Cb16.get(),Ent11.get(), Cb17.get(), Cb18.get(), Cb18.get(), UniqueID)
                Update_query(query,record)
                messagebox.showinfo("data update", 'Transaction has been updated!')
                Admin_Clear(Processtype = Processtype)
              
            # -------- UserId validation with Team user database    --------#  
            elif len(Cb13.get())>0:
                if Cb13.get() not in Com_list13:
                    messagebox.showerror("Incorrect User ID", "Kindly update valid User ID.")
                    Cb13.focus_set()
                    Cb13.delete(0, END)
                    return False   
                
                elif Processtype == 'Input' and Cb17.get() == 'Yes' and Cb18.get() == 'Completed' and Cb15.get() in statuslist :
                    query = ("Update tblInput set UserID =?, TransactionType =?, NoofItems =?, Authorisation =?, Status =?, Process_Status=? Where PrimaryID in (Select Max(PrimaryID) from tblInput where UniqueID=?);")
                    record = (Cb13.get(), Cb16.get(),Ent11.get(), Cb17.get(), Cb18.get(), Cb18.get(), UniqueID)
                    Update_query(query,record) 
                    query = ("Update tblMain set AuthoriserID =?, Authorisation=?, CurrentStatus =? Where UniqueID=?;")
                    record = ('', Cb17.get(), 'Auth - Unassigned', UniqueID)    
                    Update_query(query,record)               
                    Cb13.delete(0, END)
                    messagebox.showinfo("data update", 'Transaction has been updated!')
                    Admin_Clear(Processtype = Processtype)                             
                
                elif Processtype == 'Input' and Cb15.get() in statuslist:
                    query = ("Update tblInput set UserID =?, TransactionType =?, NoofItems =?, Authorisation =?, Status =?, Process_Status=? Where PrimaryID in (Select Max(PrimaryID) from tblInput where UniqueID=?);")
                    record = (Cb13.get(), Cb16.get(),Ent11.get(), Cb17.get(), Cb18.get(), Cb18.get(), UniqueID)
                    Update_query(query,record)
                    curstatus = str('IP - ' + Cb18.get())
                    #print(curstatus)
                    query = ("Update tblMain set InputUserID=?, AuthoriserID=?, Authorisation =?, CurrentStatus =? Where UniqueID=?;")
                    record = (Cb13.get(), '', Cb17.get(), curstatus, UniqueID)
                    Update_query(query,record)
                    Cb13.delete(0, END)
                    messagebox.showinfo("data update", 'Transaction has been updated!')
                    Admin_Clear(Processtype = Processtype)
                                    

                elif Processtype == 'Authorisation' and Cb15.get() == 'Auth - InProcess' and Cb14.get() not in Com_list14:
                    messagebox.showerror("Incorrect User ID", "Kindly update valid User ID.")
                    Cb13.focus_set()
                    Cb13.delete(0, END)
                    return False
                
                elif Processtype == 'Authorisation':
                    query = ("Update tblMain set AuthoriserID =?, Authorisation=?, CurrentStatus =? Where UniqueID=?;")
                    record = (Cb14.get(), Cb17.get(), Cb15.get(), UniqueID)
                    Update_query(query,record)
                    query = ("Update tblInput set TransactionType =?, NoofItems =?, Authorisation =?, Status =?, Process_Status=? Where PrimaryID in (Select Max(PrimaryID) from tblInput where UniqueID=?);")
                    record = (Cb16.get(),Ent11.get(), Cb17.get(), Cb18.get(), Cb18.get(), UniqueID)
                    Update_query(query,record)
                    messagebox.showinfo("data update", 'Transaction has been updated!')                                        
                    Admin_Clear(Processtype = Processtype)
                    
                else:
                    
                    messagebox.showinfo('Status Error', 'Kindly check the status')
                    
                    
        # -------- work queue status changes   --------#
        def Status_cancel():
            UniqueID = Ad_uniqID
            print(UniqueID)
            butcheck = messagebox.askquestion('Cancel Validation', 'Are you sure you want to cancel the selected jobs?')
            if butcheck == 'yes':
                
                for item in is_tree3.selection():
                    itemselect3 =is_tree3.item(item)
                    fnduniqid = itemselect3['values'][10]
                    
                    print(fnduniqid)                    
                    query = ("Update tblInput set TransactionType =?, NoofItems =?, Authorisation =?, Status =?, Process_Status=? Where PrimaryID in (Select Max(PrimaryID) from tblInput where UniqueID=?);")
                    record = (Cb16.get(),Ent11.get(), Cb17.get(), 'Cancelled', 'Cancelled', fnduniqid)
                    Update_query(query,record)
                    query = ("Update tblMain set AuthoriserID =?, Authorisation=?, CurrentStatus=? Where UniqueID=?;")
                    record = (Cb14.get(), Cb17.get(), 'IP - Cancelled', fnduniqid)
                    Update_query(query, record)
                    messagebox.showinfo("data update", 'Transaction has been Cancelled!') 
                
        
        # -------- work queue acces changes   --------#
        Label26 = Label(Can9,text="Process Date",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label26.place(relx=0.630,rely=0.10)
        Ent10 = Entry(Can9, width=22,bg="white", font=("Calibri",11),highlightbackground=None,highlightcolor=None)
        Ent10.place(relx=0.630,rely=0.14,height=23)

        Label27 = Label(Can9,text="UserID",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label27.place(relx=0.630,rely=0.22)
        Com_list13 = Select_data(Supportdb, "SELECT * FROM TblUser_data")
        Cb13 = AutocompleteCombobox(Can9,width=21, completevalues=Com_list13, font=("Calibri",11))
        Cb13.place(relx=0.630,rely=0.26)
        # Cb13.bind("<<ComboboxSelected>>", Aduserid_Check)
        # Cb13.bind("<FocusOut>", Aduserid_Check)

        Label28 = Label(Can9,text="AuthoriserID",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label28.place(relx=0.630,rely=0.34)
        Com_list14 = Select_data(Supportdb, "SELECT * FROM TblUser_data")
        Cb14 = AutocompleteCombobox(Can9,width=21, completevalues=Com_list14, font=("Calibri",11))
        Cb14.place(relx=0.630,rely=0.38)

        Label29 = Label(Can9,text="ProcessStatus",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label29.place(relx=0.630,rely=0.46)
        Cb15 = AutocompleteCombobox(Can9,width=21, completevalues=['Auth - Unassigned','Auth - InProcess'], font=("Calibri",11))
        Cb15.place(relx=0.630,rely=0.50)
        Cb15.bind('<<ComboboxSelected>>', Com_select14)
        Cb15.bind('<FocusOut>', Com_select14)
        
        
        # -------- Fields & Transaction count --------#
        Label30 = Label(Can9,text="Transaction",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label30.place(relx=0.810,rely=0.10)
        Com_list13_T = Select_data(Supportdb, "SELECT distinct(Transactiontype) FROM tblISM_Process") 
        Cb16 = AutocompleteCombobox(Can9,width=21, completevalues=Com_list13_T, font=("Calibri",11))
        Cb16.place(relx=0.810,rely=0.14)
        # Cb16.bind('<<ComboboxSelected>>', Com_select16)
        # Cb16.bind('<FocusOut>', Com_select16)
        
        
        Label31 = Label(Can9,text="No.Item",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label31.place(relx=0.810,rely=0.22)
        Ent11 = Entry(Can9, width=22,bg="white", font=("Calibri",11),highlightbackground=None,highlightcolor=None)
        Ent11.place(relx=0.810,rely=0.26,height=23)
        
        Label32 = Label(Can9,text="Authorisation",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label32.place(relx=0.810,rely=0.34)
        Cb17 = AutocompleteCombobox(Can9,width=21, completevalues=['Yes','No'], font=("Calibri",11))
        Cb17.place(relx=0.810,rely=0.38)
        Cb17.bind('<<ComboboxSelected>>', Com_selecte17)
        Cb17.bind('<FocusOut>', Com_selecte17)
        
        Label33 = Label(Can9,text="Status",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        Label33.place(relx=0.810,rely=0.46)
        Cb18 = AutocompleteCombobox(Can9,width=21, completevalues=['Completed', 'Diarised', 'In Process', 'Cancelled'], font=("Calibri",11))
        Cb18.place(relx=0.810,rely=0.50)
        Cb18.bind('<<ComboboxSelected>>', Com_selecte18)
        Cb18.bind('<FocusOut>', Com_selecte18)
        

        But18 = Button(Can9,text="Submit", width=11,height=0,bg="#00728F",foreground="white", font=("Calibri (Body)", 9,"bold"),borderwidth=3,command=Admin_sumbit)
        But18.place(relx=0.650,rely=0.63)
        But19 = Button(Can9,text="Clear", width=11,height=0,bg="#00728F",foreground="white", font=("Calibri (Body)", 9,"bold"),borderwidth=3,command=Admin_Clear)
        But19.place(relx=0.750,rely=0.63)
        But20 = Button(Can9,text="Refresh", width=11,height=0,bg="sky blue",foreground="white", font=("Calibri (Body)", 9,"bold"),borderwidth=3,command=Adradio_selected)
        #But20.place(relx=0.850,rely=0.60)
        But20.place(relx = 0.43, rely=0.013, height=26)
        But21 = Button(Can9,text="Cancel", width=11,height=0,bg="#00728F",foreground="white", font=("Calibri (Body)", 9,"bold"),borderwidth=3,command=Status_cancel)
        But21.place(relx=0.850,rely=0.63)
        
        
        
        ######################################################################### Fields & Transaction count update in Database start ########################################
        
        #----------------------------Transaction Report---------------------------#
        # -------- Transaction database   --------#
        # def Transaction_submit():
            
        #     is_tree4.delete(*is_tree4.get_children())
            
        #     T_date = date_ent2.get()            
        #     Report_date=dt.datetime.strptime(T_date, "%d-%m-%Y")
        #     print(Report_date)
        #     com_val13 = Cb16.get()
            
        #     conn = sqlite3.connect(dbpath)
        #     Pro_df = pd.read_sql_query("SELECT * FROM tblInput where Status in ('Completed', 'Cancelled');", conn)
        #     Pro_df['ProcessDate'] =  pd.to_datetime(Pro_df['ProcessDate'], format='%d-%m-%Y')                 
                        
        #     Pro_df1 = Pro_df.loc[(Pro_df['ProcessDate'] == Report_date) & (Pro_df['TransactionType'] == com_val13)]
        #     Pro_df1 = pd.DataFrame(Pro_df1)
        #     #xl.view(Pro_df1, table = False)
        #     df = Pro_df1.pivot_table(values='NoofItems', index=['UserID'], columns ='Status', aggfunc = 'count', fill_value=0).reset_index()
        #     if ('Cancelled' in df) != True:
        #         df['Cancelled'] = 0
        #     print(df)            
    
        #     for x in df.values.tolist():
        #             is_tree4.insert("", tkinter.END,values = x)
            
        # #---------------------------- Select Treeview4 for transaction count ---------------------------#
        # def Selected_tree4(event):
        #     Ent11.delete(0, END)
        #     Ent12.delete(0, END)
        #     for item in is_tree4.selection():
        #         item_select4 =is_tree4.item(item)
        #         completed_item = item_select4['values'][1]
        #         cancelled_item = item_select4['values'][2]
        #         Ent11.insert(0, completed_item)
        #         Ent12.insert(0, cancelled_item)             
        #         # print(completed_item)
        #         # print(cancelled_item)

        # is_tree4.bind('<<TreeviewSelect>>', lambda event: Selected_tree4(event))
        # -------- Input update fields   --------#
        
        # Label30 = Label(Can9,text="Transactions",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        # Label30.place(relx=0.020,rely=0.634)       
        # Com_list13 = Select_data(Supportdb, "SELECT distinct(Transactiontype) FROM tblISM_Process") 
        # Cb16 = AutocompleteCombobox(Can9, font=("Calibri",11,), completevalues= Com_list13)
        # Cb16.place(relx=0.10,rely=0.634, width=150, height=22)
        
        # Label31 = Label(Can9,text="Date",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 10, "bold"))
        # Label31.place(relx=0.24,rely=0.634)  
        # # date_ent2 = DateEntry(Can9, background= "black", foreground= "white",bd=0,font=('Calibri',11), date_pattern='dd-mm-yyyy', maxdate = date.today())
        # # date_ent2.place(relx=0.28,rely=0.631, height=20)
        # date_ent2=DateEntry(Can9, background= "black", foreground= "white",bd=0,font=('Calibri',11),date_pattern='dd-MM-yyyy',maxdate=date.today())
        # date_ent2.place(relx = 0.275, rely=0.631, width=95, height=25)
        
        
        # But21=Button(Can9,text=">>", command=Transaction_submit, font=("Calibri", 10,"bold"),bg='#00728F',fg='white',cursor="hand2")
        # But21.place(relx = 0.38, rely=0.627, height=23)
        
        # Label32 = Label(Can9,text="Completed",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 9, "bold"))
        # Label32.place(relx=0.38,rely=0.720)
        # Ent11 = Entry(Can9, width=12,bg="white", font=("Calibri",11),highlightbackground=None,highlightcolor=None, justify = 'center')
        # Ent11.place(relx=0.38,rely=0.750)
        
        # Label32 = Label(Can9,text="Cancelled",fg="#515056",bg="white",bd=0, font=("Calibri (Body)", 9, "bold"))
        # Label32.place(relx=0.38,rely=0.820)
        # Ent12 = Entry(Can9, width=12,bg="white", font=("Calibri",11),highlightbackground=None,highlightcolor=None, justify = 'center')
        # Ent12.place(relx=0.38,rely=0.850)
        
        # But21=Button(Can9,text="Update", command='',font=("Calibri", 10,"bold"),bg='#00728F',fg='white',cursor="hand2")
        # But21.place(relx = 0.395, rely=0.920, height=23)
        
        ######################################################################### Fields & Transaction count update in Database Closed ########################################

         #----------------------------Raw Report---------------------------#

        def Raw_Report():

            if len(Admin_E_SDate.get())<1 or len(Admin_E_EDate.get())<1:
                messagebox.showerror("Data Missing", "Select Start and End Date")
                Can9.focus_force()
                return False

            if Admin_E_SDate.get() > Admin_E_EDate.get() :
                messagebox.showerror("Data Missing", "Incorrect Start and End Date")
                Can9.focus_force()
                return False

            ReportPath = fd.askdirectory(title='Select Folder Path')
            if ReportPath != '':

         # -------- Date formate changed  --------#
                Dash_Sdate=Admin_E_SDate.get()                
                Dash_Sdate=dt.datetime.strptime(Dash_Sdate, "%d-%m-%Y").strftime('%Y-%m-%d')
                # print(Dash_Sdate)
                Dash_Edate=Admin_E_EDate.get()
                Dash_Edate=dt.datetime.strptime(Dash_Edate, "%d-%m-%Y").strftime('%Y-%m-%d')
                # print(Dash_Edate)

                TempPath = ReportPath + r"/IS-Maintenance Raw Data " + datetime.now().strftime('%d-%m-%Y %H%M%S') + ".xlsx"


                Excelsheets = ['Production', 'Authorisation', 'Non_Production', 'QC']
                writer = pd.ExcelWriter(TempPath, engine = 'xlsxwriter')

                # Production = pd.DataFrame()
                # Non_Production = pd.DataFrame()
                # Authorisation = pd.DataFrame()
                # QC = pd.DataFrame()

                try:
                    conn = sqlite3.connect(dbpath,timeout=45,uri=True)

                    # -------- Production Raw Data  --------#
                    # Production = pd.read_sql_query(query1, conn)
                    Production = pd.read_sql_query("SELECT * FROM tblInput", conn)

                    Production['ProcessDate'] = pd.to_datetime(Production['ProcessDate'], format= '%d-%m-%Y')

                    Production = Production.loc[(Production['ProcessDate']>= Dash_Sdate) & (Production['ProcessDate'] <= Dash_Edate)]
                    Production['ProcessDate'] = pd.to_datetime(Production['ProcessDate']).dt.strftime('%d/%m/%Y')

                    # -------- Authorisation Raw Data  --------#
                    # Authorisation = pd.read_sql_query(query2, conn)
                    Authorisation = pd.read_sql_query("SELECT * FROM tblAuthorisation", conn)
            
                    Authorisation['Authdate'] = pd.to_datetime(Authorisation['Authdate']) 
                    Authorisation['Authdate'] = pd.to_datetime(Authorisation['Authdate'], format = '%d-%m-%Y')       
                    # Authorisation['ProcessDate'] = pd.to_datetime(Authorisation['ProcessDate'])
                    # Authorisation['ProcessDate'] = pd.to_datetime(Authorisation['ProcessDate'], format = '%d-%m-%Y')
                                
                    Auth_Sdate=dt.datetime.strptime(Dash_Sdate, '%Y-%m-%d').strftime('%d-%m-%Y') 
                    Auth_Edate=dt.datetime.strptime(Dash_Edate, '%Y-%m-%d').strftime('%d-%m-%Y')     
                    #print(Auth_Sdate, Auth_Edate)
                    Authorisation = Authorisation.loc[(Authorisation['Authdate']>= Auth_Sdate) & (Authorisation['Authdate'] <= Auth_Edate)] 
                    
                    #Auth_df2 = Authorisation.loc[(Authorisation['ProcessDate']>= Auth_Sdate) & (Authorisation['ProcessDate'] <= Auth_Edate)] 

                    #Authorisation=Auth_df1.append(Auth_df2, ignore_index=True)
                    #Authorisation=Authorisation.drop_duplicates(subset=['UniqID'])
                    Authorisation['Authdate'] = pd.to_datetime(Authorisation['Authdate']).dt.strftime('%d/%m/%Y')
                    #Authorisation['ProcessDate'] = pd.to_datetime(Authorisation['ProcessDate']).dt.strftime('%d/%m/%Y')

                    # -------- Non_Production Raw Data  --------#
                    # Non_Production = pd.read_sql_query(query3, conn)
                    Non_Production = pd.read_sql_query("SELECT * FROM tblhalt_NonP_Hrs", conn)

                    Non_Production['NpDate'] = pd.to_datetime(Non_Production['NpDate'], format= '%d-%m-%Y')

                    Non_Production = Non_Production.loc[(Non_Production['NpDate']>= Dash_Sdate) & (Non_Production['NpDate'] <= Dash_Edate)]
                    Non_Production['NpDate'] = pd.to_datetime(Non_Production['NpDate']).dt.strftime('%d/%m/%Y')

                    # -------- QC Raw Data  --------#
                    #QC = pd.read_sql_query(query4, conn)
                    QC = pd.read_sql_query("SELECT * FROM tblQc_Production", conn)
                    
                    QC['Qcdate'] = pd.to_datetime(QC['Qcdate'], format= '%d-%m-%Y')                    
                    #QC['WITProcessDate'] = pd.to_datetime(QC['WITProcessDate'], format= '%d-%m-%Y')
                                        
                    QC = QC.loc[(QC['Qcdate']>= Dash_Sdate) & (QC['Qcdate'] <= Dash_Edate)] 
                    #QC_df2 = QC.loc[(QC['WITProcessDate']>= Dash_Sdate) & (QC['WITProcessDate'] <= Dash_Edate)] 

                    #QC=QC_df1.append(QC_df2, ignore_index=True)
                    #QC=QC.drop_duplicates(subset=['QcUniqID'])
                    QC['Qcdate'] = pd.to_datetime(QC['Qcdate']).dt.strftime('%d/%m/%Y')
                    QC['WITProcessDate'] = pd.to_datetime(QC['WITProcessDate']).dt.strftime('%d/%m/%Y')

                    conn.close()
                except:
                    conn.close()
                    messagebox.showerror("Data Crash","IS-Maintenance data crashed, Please reopen the tool")
                    return False


                Dfs=[Production, Authorisation, Non_Production, QC]
                i=0
                for q in Dfs:
                    q.to_excel(writer, sheet_name=Excelsheets[i], index=False)
                    i=i+1
                conn.close()
                writer.save()
                #writer.close()
                writer.handles = None

                messagebox.showinfo('Office Inn Raw Data','IS-Maintenance Raw Data Report Exported!')
                startfile(TempPath)
            else:
                messagebox.showerror('Folder Validation','Folder Path Not Selected!')

        #--Start Date--

        Adframe=Frame(Can9,bg="red",width=10,height=2,relief="solid", borderwidth=0,highlightcolor="#00728F", highlightthickness=2,highlightbackground="#41729c")
        #Adframe.place(relx=0.58,rely=0.740,width=500)
        Adframe=Frame(Can9,width=590,height=2,bg='Red')
        Adframe.place(relx = 0.600, rely=0.720, width=500)
        Admin_L_SDate=Label(Can9,text="Raw Data",fg="#515056",bg="white",bd=0, font=("Calibri body", 11, "bold"))
        Admin_L_SDate.place(relx = 0.730, rely=0.765)
        Admin_L_SDate=Label(Can9,text="Start Date",fg="#515056",bg="white",bd=0, font=("Calibri", 9, "bold"))
        Admin_L_SDate.place(relx = 0.670, rely=0.835)
        Admin_E_SDate=DateEntry(Can9, background= "black", foreground= "white",bd=2,font=('Calibri',11),date_pattern='dd-MM-yyyy',maxdate=date.today())
        Admin_E_SDate.place(relx = 0.670, rely=0.875,  width=95)

        Admin_L_EDate=Label(Can9,text="End Date",fg="#515056",bg="white",bd=0, font=("Calibri", 9, "bold"))
        Admin_L_EDate.place(relx = 0.770, rely=0.835)
        Admin_E_EDate=DateEntry(Can9, background= "black", foreground= "white",bd=2,font=('Calibri',11),date_pattern='dd-MM-yyyy')
        Admin_E_EDate.place(relx = 0.770, rely=0.875, width=95)

        Raw_Report_Button = Button(Can9, text="Reports",bg="#00728F",foreground="white",font=("Calibri", 11,"bold"),command=Raw_Report,cursor="hand2" )
        Raw_Report_Button.place(relx = 0.87, rely=0.870, height=26)
        Edframe=Frame(Can9,width=590,height=2,bg='Red')
        Edframe.place(relx = 0.600, rely=0.940, width=500)

    Login()

    ismaint.mainloop()
    
CheckWindow = WindowCheck()
if "IS_Maintaince_Reporting_V1.5" in CheckWindow or "IS_Maintaince_Reporting_V1.6" in CheckWindow :
    messagebox.showerror('Already Opened','This application is already opened! Please check')
else:
    Main_Function()



