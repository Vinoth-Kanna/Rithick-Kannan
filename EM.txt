############# Change DB Path ############### Live
############# Change Version ############### Done

from asyncio.windows_events import NULL
from calendar import calendar, month
from distutils.util import run_2to3
from select import select
import tkinter
from cgitb import text
from tkinter.constants import CENTER, E, SINGLE, W
from tkinter import *
from os import startfile, stat
import getpass
import sqlite3

from tkinter import Listbox, Tk
from tkinter import Label
from tkinter import Button
from tkinter import Entry
from tkinter import messagebox
from tkinter import StringVar
from tkinter import END
from typing import OrderedDict
from PIL import ImageTk, Image
from tkinter import Canvas
from tkinter import ttk
from attr import validate
from numpy import NaN, dtype
import numpy
import pyperclip

from ttkwidgets.autocomplete import AutocompleteCombobox
from tkcalendar import Calendar,DateEntry
from datetime import datetime, timedelta 
from datetime import date

import pandas as pd
import xlwings as xw

import win32gui
import babel.numbers

from tkinter import ttk as objTTK
from functools import partial
import datetime as objDateTime
from functools import reduce
import calendar

import re

ImgPath = 

############# Live Database ###############
ProDBPath = 
AttendanceDBPath = 

############# Testing Database ###############
# ProDBPath = 
# AttendanceDBPath = 

def ClosePage(Window):
    Msgbox = messagebox.askquestion('Exit Application','Are you sure want to exit the application?',icon = 'question')
    if Msgbox == 'yes':
        MyWindow = Window
        MyWindow.destroy()
    else:
        pass

def QueryfunParam(DBPath, query, record):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query, record)
    data = []
    for row in c.fetchall():
        data.append(row[0])
    conn.close()
    return data

def Queryfun(query):
    conn = sqlite3.connect(ProDBPath)
    c = conn.cursor()
    c.execute(query)
    data = []
    for row in c.fetchall():
        data.append(row[0])
    conn.close()
    return data

def ViewQueryfun(DBPath, query):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query)
    data = []
    for row in c.fetchall():
        data.append(row)
    conn.close()
    return data

def AddQueryfun(DBPath, query, record):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query, record)
    conn.commit()
    conn.close()
            
def InsertQueryfun(DBPath, query, Record):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query, Record)
    conn.commit()
    conn.close()

def ViewTreefn(DBPath,query,DashTree):
    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query)
    rows=c.fetchall()
    for row in rows:
        if row[0] != None:
            DashTree.insert("", END, values=row)
    conn.close()

def ViewDashfn(DBPath, query,DashTree):
    DashTree.tag_configure("evenrow",background='white')
    DashTree.tag_configure("oddrow",background='lightblue')

    conn = sqlite3.connect(DBPath)
    c = conn.cursor()
    c.execute(query)
    rows=c.fetchall()
    conn.close()

    rowid = 0
    for row in rows:
        if row[0] != None:
            rowid = rowid + 1
            if rowid % 2 == 0:
                DashTree.insert("", tkinter.END, values=row, tags=('oddrow',))
            else:
                DashTree.insert("", tkinter.END, values=row, tags=('evenrow',))

def DropDown_Validation(NameList, EntryObj):
    if EntryObj.get() not in NameList:
        Validation = 'Failed'
    else:
        Validation = 'Passed'

    return Validation

def Date_Validation(Date_Entry):
    inputDate = Date_Entry.get()
    try:
        day, month, year = inputDate.split('-')
        datetime(int(year), int(month), int(day))
        isValidDate = True
    except ValueError:
        isValidDate = False

    if (isValidDate):
        Validation = 'Passed'
    else:
        Validation = 'Failed'

    return Validation

def DropDown_Check(event, NameList, EntryObj, msghead, msgdetails):
        if EntryObj.get() != '':
            if EntryObj.get() not in NameList:
                messagebox.showerror(msghead, msgdetails)
                EntryObj.focus_set()
                EntryObj.delete(0, END)
            else:
                pass

def AcceptNum(inStr,acttyp):
    if acttyp == '1': #insert
        if not inStr.isdigit():
            return False
    return True

def AcceptDecimal(inp):
    try:
        if inp == '' or float(inp) >= 0:
            return True
        else:
            return False
    except:
        return False

def focusNext(widget):
    widget.tk_focusNext().focus_set()
    return 'break'

def focusPrev(widget):
    widget.tk_focusPrev().focus_set()
    return 'break'

def StopScrollwheel(event):
    return 'break'

def combine_funcs(*funcs):
    def combined_func(*args, **kwargs):
        for f in funcs:
            f(*args, **kwargs)
    return combined_func

def CheckValidEmail(emailid):
   pat = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
   if re.match(pat,emailid):
      return True
   return False

######## Treeview Sorting #################

class MyTreeview(objTTK.Treeview):
    def heading(self, column, sort_by=None, **kwargs):
        if sort_by and not hasattr(kwargs, 'command'):
            func = getattr(self, f"_sort_by_{sort_by}", None)
            if func:
                kwargs['command'] = partial(func, column, False)
        
        return super().heading(column, **kwargs)
    
    def _sort(self, column, reverse, data_type, callback):
        l = [(self.set(k, column), k) for k in self.get_children('')]
        l.sort(key=lambda t: data_type(t[0]), reverse=reverse)
        for index, (_, k) in enumerate(l):
            self.move(k, '', index)
    
        self.heading(column, command=partial(callback, column, not reverse))
    
    def _sort_by_num(self, column, reverse):
        self._sort(column, reverse, int, self._sort_by_num)
    
    def _sort_by_name(self, column, reverse):
        self._sort(column, reverse, str, self._sort_by_name)
    
    def _sort_by_date(self, column, reverse):
        def _str_to_datetime(string):
            return objDateTime.datetime.strptime(string, "%d-%m-%Y")
            
        self._sort(column, reverse, _str_to_datetime, self._sort_by_date)

Var_UserID = getpass.getuser()
Temp = ViewQueryfun(ProDBPath,"SELECT * from tblUserAccess WHERE UserID = '" + Var_UserID.lower() + "' AND Active = 'Yes';")

if len(Temp) > 0:
    Var_UserName = Temp[0][1]
    NewUser_Access = Temp[0][4]
    Personal_Access = Temp[0][5]
    Role_Access = Temp[0][6]
    Leaves_Access = Temp[0][7]
    Attrition_Access = Temp[0][8]
    ATR_Access = Temp[0][9]
    Reports_Access = Temp[0][10]
    Skills_Access = Temp[0][11]
    RAG_Access = Temp[0][12]
    Escalation_Access = Temp[0][13]
    Successor_Access = Temp[0][14]
    BudgetFTE_Access = Temp[0][15]
    Attendance_Access = Temp[0][16]

########################################################## This is New User Page ########################################################

def NewUser(Home):
    NewUCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    NewUCan.place(x=150, y=10)

    Can1=Canvas(NewUCan,bg="white", width=1020, height=560, highlightthickness=0)
    Can1.place(x=10, y=10)

    Label1 = Label(Can1, text="Filled ATR*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can1, text="Employee ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can1, text="Employee Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can1, text="User ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5_0 = Label(Can1, text="dd-mm-yyyy",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
    Label5 = Label(Can1, text="Date of Joining*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')   
    Label6 = Label(Can1, text="Work Location*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7 = Label(Can1, text="Role Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label8 = Label(Can1, text="Team Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9 = Label(Can1, text="Business Division*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10 = Label(Can1, text="Team Leader*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')   
    Label11 = Label(Can1, text="Operations Manager*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')   
    
    Var_Entry2 = StringVar()
    Var_Entry3 = StringVar()
    Var_Entry4 = StringVar()
    
    Entry1_Values = Queryfun("SELECT ATRID FROM tblATR WHERE Status = 'Open';")
    Entry1 = AutocompleteCombobox(Can1, width=15, completevalues=Entry1_Values)
    Entry1_msg = 'This ATR Number is not available in the list! please check'
        
    Entry2 = Entry(Can1,validate='key',textvariable=Var_Entry2,bg="white",font=("Calibri",10,"bold"),width=31)
    Entry2['validatecommand'] = (Entry2.register(AcceptNum),'%P','%d')

    Entry3 = Entry(Can1,textvariable=Var_Entry3,bg="white",font=("Calibri",10,"bold"),width=31)
    Entry4 = Entry(Can1,textvariable=Var_Entry4,bg="white",font=("Calibri",10,"bold"),width=31)

    today = date.today()
    Entry5 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',maxdate=today)
    Entry5.delete(0, END)
        
    Entry6_Values = Queryfun("SELECT Location FROM tblLocations;")
    Entry6 = AutocompleteCombobox(Can1, width=33, completevalues=Entry6_Values)
    Entry6_msg = 'This Location is not available in the list! please check'
    
    Entry7_Values = Queryfun("SELECT Role FROM tblRoles;")
    Entry7 = AutocompleteCombobox(Can1, width=33, completevalues=Entry7_Values)
    Entry7_msg = 'This Role is not available in the list! please check'
    
    Entry8_Values = Queryfun("SELECT TeamName FROM tblTeams;")
    Entry8 = AutocompleteCombobox(Can1, width=33, completevalues=Entry8_Values)
    Entry8_msg = 'This Team Name is not available in the list! please check'
    
    Entry9_Values = Queryfun("SELECT BusinessUnit FROM tblBusinessUnits;")
    Entry9 = AutocompleteCombobox(Can1, width=33, completevalues=Entry9_Values)
    Entry9_msg = 'This Business Unit is not available in the list! please check'
    
    Entry10_Values = Queryfun("SELECT DISTINCT TeamLeader FROM tblEmpData;")
    Entry10 = AutocompleteCombobox(Can1, width=33, completevalues=Entry10_Values)
    Entry10_msg = 'This TL Name is not available in the list! please check'
    
    Entry11_Values = Queryfun("SELECT DISTINCT LMName FROM tblEmpData;")
    Entry11 = AutocompleteCombobox(Can1, width=33, completevalues=Entry11_Values)
    Entry11_msg = 'This Manager Name is not available in the list! please check'
    
    Label1.place(x=380, y=30)
    Label2.place(x=100, y=110)
    Label3.place(x=580, y=110)
    Label4.place(x=100, y=180)
    Label5.place(x=580, y=180)
    Label6.place(x=100, y=250)
    Label7.place(x=580, y=250)
    Label8.place(x=100, y=320)
    Label9.place(x=580, y=320)
    Label10.place(x=100, y=390)
    Label11.place(x=580, y=390)

    Entry1.place(x=500, y=30)
    Entry2.place(x=240, y=110)
    Entry3.place(x=720, y=110)
    Entry4.place(x=240, y=180)
    Label5_0.place(x=720, y=160)
    Entry5.place(x=720, y=180)
    Entry6.place(x=240, y=250)
    Entry7.place(x=720, y=250)
    Entry8.place(x=240, y=320)
    Entry9.place(x=720, y=320)
    Entry10.place(x=240, y=390)
    Entry11.place(x=720, y=390)

    def Validate_Clear():
        LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_NewUserSubmit():
        Validate_Clear()

        AllLabelList = [Label1, Label6, Label7, Label8, Label9, Label10, Label11]
        AllEntryList = [Entry1, Entry6, Entry7, Entry8, Entry9, Entry10, Entry11]
        AllEntryValues = [Entry1_Values, Entry6_Values, Entry7_Values, Entry8_Values, Entry9_Values, Entry10_Values, Entry11_Values]
        AllEntryMessage = [Entry1_msg, Entry6_msg, Entry7_msg, Entry8_msg, Entry9_msg, Entry10_msg, Entry11_msg]

        DateLabelList = [Label5]
        DateEntryList = [Entry5]

        if Entry1.get() == '' or Entry2.get().strip() == '' or Entry3.get().strip() == '' or Entry4.get().strip() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or Entry9.get() == '' or Entry10.get() == '' or Entry11.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                NewUserSubmit()

    def NewUserSubmit():
        
        EmpIDExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblEmpData WHERE EmpID = " + Entry2.get().strip() + ");")

        if EmpIDExists[0][0] == 0:
            ATRCount = Queryfun("SELECT COUNT(ATRID) FROM tblATRPosition WHERE ATRID = '" + Entry1.get() + "';")[0]
            Positions = Queryfun("SELECT NoofPositions FROM tblATR WHERE ATRID = '" + Entry1.get() + "';")[0]

            if ATRCount < Positions:
                
                Record = (Entry1.get(), Entry2.get().strip(), 'Closed', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                InsertQueryfun(ProDBPath,"""INSERT INTO tblATRPosition (ATRID, EmpID, PositionStatus, CreatedBy, CreatedDate) VALUES(?, ?, ?, ?, ?);""", Record)

                ATRCount = Queryfun("SELECT COUNT(ATRID) FROM tblATRPosition WHERE ATRID = '" + Entry1.get() + "';")[0]

                if ATRCount == Positions:
                    InsertQueryfun(ProDBPath,"UPDATE tblATR SET Status = 'Closed' WHERE ATRID = (?);", (Entry1.get(),))

                Record = (Entry1.get(), Entry2.get().strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                InsertQueryfun(ProDBPath,"""INSERT INTO tblNewUser (FilledATR, EmpID, CreatedBy, CreatedDate) VALUES(?, ?, ?, ?);""", Record)
                                    
                Status = 'Active'
                
                Record = (Entry2.get().strip(), Entry3.get().strip(), Entry4.get().strip().lower(), Entry5.get(), Entry6.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(), Entry11.get(), Status)
                InsertQueryfun(ProDBPath,"""INSERT INTO tblEmpData (EmpID, EmpName, UserID, DOJ, Location, Role, Team, BusinessUnit, TeamLeader, LMName, EmpStatus) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""", Record)
                
                Record = (Entry2.get().strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                InsertQueryfun(ProDBPath,"""INSERT INTO tblPersonalData (EmpID, UpdatedBy, UpdatedDate) VALUES(?, ?, ?);""", Record)

                Record = (Entry2.get().strip(), Entry3.get().strip(), 'Amber', 'In Probation', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                InsertQueryfun(ProDBPath,"INSERT INTO tblRAGStatus (EmpID, EmpName, RAGStatus, Comments, UpdatedBy, UpdatedDate) VALUES (?, ?, ?, ?, ?, ?);", Record)                
                
                messagebox.showinfo('Completed','New User Added Successfully!')
                NewUserCancel()
            
            else:
                messagebox.showerror('Error','This ATR is already closed, please refresh and check!')
                return False

        else:
            messagebox.showerror('Duplicate','This Emp ID is already added, please check!')
            return False

    def NewUserCancel():
        NewUser(Home)
    
    Image_Submit= PhotoImage(file=)
    Image_Reset= PhotoImage(file=)

    SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_NewUserSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:NewUserCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
    SubmitB.image = Image_Submit
    CancelB.image = Image_Reset

    SubmitB.place(x=400, y=480)
    CancelB.place(x=600, y=480)

########################################################## New User Page End ########################################################

########################################################## This is Personal Details Update Page ########################################################

def PersonalDetails(Home):
    PersonalCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    PersonalCan.place(x=150, y=10)

    Can1=Canvas(PersonalCan,bg="white", width=1020, height=520, highlightthickness=0)
    Can1.create_rectangle(7, 8, 1011, 461, outline="#006E8E", fill="#006E8E")
    Can1.place(x=10, y=50)
    
    Can2=Canvas(Can1,bg="white", width=407, height=450, highlightthickness=0)
    Can2.place(x=10, y=10)

    Can3=Canvas(Can1,bg="white", width=590, height=450, highlightthickness=0)
    Can3.place(x=420, y=10)
    
    def PersonalEmpIDSelected(Event):
        Temp = Entry1.get().strip()
        
        if Temp != "":
            EmpIDExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblEmpData WHERE EmpID = '" + Temp + "');")
            if EmpIDExists[0][0] == 1:
                result = ViewQueryfun(ProDBPath, "SELECT EmpName, UserID, DOJ, EmpStatus FROM tblEmpData WHERE EmpID = " + Temp + ";")

                Entry2.configure(state = "normal")
                Entry2.delete(0,END)
                Entry2.insert(0,result[0][0])
                Entry2.configure(state = "disabled")
                
                Entry3.configure(state = "normal")
                Entry3.delete(0,END)
                Entry3.insert(0,result[0][1])
                Entry3.configure(state = "disabled")
                
                Entry4.configure(state = "normal")
                Entry4.delete(0,END)
                Entry4.insert(0,result[0][2])
                Entry4.configure(state = "disabled")

                if result[0][3] in ('Active', 'Resignation Revoked', 'Long Leave'):
                    LabelEmpStatus.config(bg='green')
                elif result[0][3] in ('Serving Notice Period', 'Notice Extended'):
                    LabelEmpStatus.config(bg='yellow')
                else:
                    LabelEmpStatus.config(bg='red')

                PersonalData = ViewQueryfun(ProDBPath,"SELECT * FROM tblPersonalData WHERE EmpID = " + Temp + ";")[0]
                PersonalData = ['' if v is None else v for v in PersonalData]
            
                if PersonalData[1] != '':
                    Entry5.delete(0,END)
                    Entry5.set_date(PersonalData[1])
                else:
                    Entry5.delete(0,END)

                Entry6.delete(0,END)
                Entry6.set(PersonalData[2])
                Entry7.delete(0,END)
                Entry7.set(PersonalData[3])
                Entry8.delete(0,END)
                Entry8.insert(0,PersonalData[4])
                Entry9.delete(0,END)
                Entry9.insert(0,PersonalData[5])
                Entry10.delete(0,END)
                Entry10.insert(0,PersonalData[6])
                Entry11.delete(0,END)
                Entry11.insert(0,PersonalData[7])
                Entry12.delete(0,END)
                Entry12.set(PersonalData[8])
                Entry13.delete(0,END)
                Entry13.set(PersonalData[9])

                Entry14.delete(0,END)
                Entry14.insert(0,PersonalData[10])
                Entry15.delete(0,END)
                Entry15.insert(0,PersonalData[11])
                Entry16.delete(0,END)
                Entry16.insert(0,PersonalData[12])
                Entry17.delete(0,END)
                Entry17.insert(0,PersonalData[13])
                Entry18.delete(0,END)
                Entry18.set(PersonalData[14])
                Entry19.delete(1.0,END)
                Entry19.insert(1.0,PersonalData[15])
                Entry20.delete(0,END)
                Entry20.insert(0,PersonalData[16])
                Entry21.delete(1.0,END)
                Entry21.insert(1.0,PersonalData[17])
                Entry22.delete(0,END)
                Entry22.insert(0,PersonalData[18])
                Entry23.delete(0,END)
                Entry23.set(PersonalData[19])
                Entry13_1.delete(0,END)
                Entry13_1.insert(0,PersonalData[20])

            else:
                messagebox.showerror('Validation Check','Selected Employee ID is not correct! Please check') 
                Entry1.delete(0, END)
        else:
            pass
        
    Var_Entry2 = StringVar()
    Var_Entry3 = StringVar()
    Var_Entry4 = StringVar()

    LabelEmpStatus = Label(Can3, text="",width=2,height=1,fg="#054457", bg="white",font=("Calibri",8),anchor='e')         
    LabelEmpStatus.place(x=570, y=5)

    Label1 = Label(PersonalCan, text="Employee ID*",width=12,height=1,fg="white", bg="#006E8E",font=("Calibri",11,"bold"),anchor='e')
    Label2 = Label(PersonalCan, text="Employee Name*",width=15,height=1,fg="white", bg="#006E8E",font=("Calibri",11,"bold"),anchor='e')
    Label3 = Label(PersonalCan, text="User ID*",width=12,height=1,fg="white", bg="#006E8E",font=("Calibri",11,"bold"),anchor='e')
    Label4 = Label(PersonalCan, text="DOJ*",width=8,height=1,fg="white", bg="#006E8E",font=("Calibri",11,"bold"),anchor='e')

    Label5_0 = Label(Can2, text="dd-mm-yyyy",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
    Label5 = Label(Can2, text="DOB*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label6 = Label(Can2, text="Gender*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label7 = Label(Can2, text="Blood Group",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label8 = Label(Can2, text="PAN Number",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label9 = Label(Can2, text="Official Email ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label10 = Label(Can2, text="Personal Email ID",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label11 = Label(Can2, text="Access Card Number*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label12 = Label(Can2, text="Internet at Home",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label13 = Label(Can2, text="Covid Vaccination",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label13_1 = Label(Can2, text="Years of Experience*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label1.place(x=15, y=10)
    Label2.place(x=255, y=10)
    Label3.place(x=625, y=10)
    Label4.place(x=845, y=10)

    Label5.place(x=40, y=30)
    Label6.place(x=40, y=70)
    Label7.place(x=40, y=110)
    Label8.place(x=40, y=150)
    Label9.place(x=40, y=190)
    Label10.place(x=40, y=230)
    Label11.place(x=40, y=270)
    Label12.place(x=40, y=310)
    Label13.place(x=40, y=350)
    Label13_1.place(x=40, y=390)
    
    Entry1_Values = Queryfun("""SELECT B.EmpID FROM tblPersonalData AS A 
                                LEFT JOIN tblEmpData AS B
                                ON A.EmpID = B.EmpID
                                WHERE B.EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');""")
    Entry1_Values = [str(x) for x in Entry1_Values]
    Entry1 = AutocompleteCombobox(PersonalCan, font=("Calibri",11,"bold"), width=12, completevalues=Entry1_Values)
    Entry1_msg = 'This Employee ID is not available in the list, please check!'
    Entry1.bind("<FocusIn>", lambda event: PersonalClear())
    Entry1.bind("<<ComboboxSelected>>", lambda event: PersonalEmpIDSelected(event))
    Entry1.bind("<FocusOut>", lambda event: PersonalEmpIDSelected(event))
    
    Entry2 = Entry(PersonalCan,textvariable=Var_Entry2,bg="white",font=("Calibri",11,"bold"),width=28)
    Entry3 = Entry(PersonalCan,textvariable=Var_Entry3,bg="white",font=("Calibri",11,"bold"),width=12)
    Entry4 = Entry(PersonalCan,textvariable=Var_Entry4,bg="white",font=("Calibri",11,"bold"),width=12)
    
    today = date.today()
    Entry5 = DateEntry(Can2,width=20,bg="darkblue",fg="white",font=("Calibri",10,"bold"),date_pattern='dd-mm-yyyy',maxdate=today)
    Entry5.delete(0, END)
    
    Entry6_Values = ['Male', 'Female']
    Entry6 = AutocompleteCombobox(Can2, width=20, completevalues=Entry6_Values, font=("Calibri",10,"bold"))
    Entry6_msg = 'This Gender is not available in the list! please check'
                
    Entry7_Values = Queryfun("SELECT BGName FROM tblBloodGroup;")
    Entry7 = AutocompleteCombobox(Can2, width=20, completevalues=Entry7_Values, font=("Calibri",10,"bold"))
    Entry7_msg = 'This Blood Group is not available in the list! please check'
    
    Entry8 = Entry(Can2,bg="white",font=("Calibri",10,"bold"),width=22)
    Entry9 = Entry(Can2,bg="white",font=("Calibri",10,"bold"),width=22)
    
    Entry10 = Entry(Can2,bg="white",font=("Calibri",10,"bold"),width=22)
    Entry11 = Entry(Can2,bg="white",font=("Calibri",10,"bold"),width=22)

    Entry12_Values = ['Yes', 'No']
    Entry12 = AutocompleteCombobox(Can2, width=20, completevalues=Entry12_Values, font=("Calibri",10,"bold"))
    Entry12_msg = 'This Internet Option is not available in the list! please check'
        
    Entry13_Values = ['Not Vaccinated', '1 Dose Taken', '2 Dose Taken']
    Entry13 = AutocompleteCombobox(Can2, width=20, completevalues=Entry13_Values, font=("Calibri",10,"bold"))
    Entry13_msg = 'This typed option is not available in the list! please check'

    Entry13_1 = Entry(Can2,validate='key',bg="white",font=("Calibri",10,"bold"),width=22)
    Entry13_1['validatecommand'] = (Entry13_1.register(AcceptDecimal),'%P')
                    
    Entry1.place(x=120, y=10)
    Entry2.place(x=380, y=10)
    Entry3.place(x=730, y=10)
    Entry4.place(x=920, y=10)

    Label5_0.place(x=180, y=10)
    Entry5.place(x=180, y=30)
    Entry6.place(x=180, y=70)
    Entry7.place(x=180, y=110)
    Entry8.place(x=180, y=150)
    Entry9.place(x=180, y=190)
    Entry10.place(x=180, y=230)
    Entry11.place(x=180, y=270)
    Entry12.place(x=180, y=310)
    Entry13.place(x=180, y=350)
    Entry13_1.place(x=180, y=390)
    
    Label14 = Label(Can3, text="Primary Contact Number*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label15 = Label(Can3, text="Secondary Contact Number",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label16 = Label(Can3, text="Emergercy Contact Number*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label17 = Label(Can3, text="Emergency Contact Person*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label18 = Label(Can3, text="Contact Person Relationship*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label19 = Label(Can3, text="Present Address*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label20 = Label(Can3, text="Present Address Area*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label21 = Label(Can3, text="Permanent Address*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label22 = Label(Can3, text="Permanent State*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label23 = Label(Can3, text="Opted for Transport*",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

    Label14.place(x=75, y=10)
    Label15.place(x=75, y=50)
    Label16.place(x=75, y=90)
    Label17.place(x=75, y=130)
    Label18.place(x=75, y=170)
    Label19.place(x=75, y=225)
    Label20.place(x=75, y=270)
    Label21.place(x=75, y=320)
    Label22.place(x=75, y=375)
    Label23.place(x=75, y=415)
    
    def SameAdd_Select():
        if SameAdd.get() == 'Yes':
            Entry21.delete(1.0, END)
            Entry21.insert(1.0, Entry19.get(1.0, END).strip())
        
    Entry14 = Entry(Can3,validate="key",bg="white",font=("Calibri",10,"bold"),width=25)
    Entry14['validatecommand'] = (Entry14.register(AcceptNum),'%P','%d')
    Entry15 = Entry(Can3,validate="key",bg="white",font=("Calibri",10,"bold"),width=25)
    Entry15['validatecommand'] = (Entry15.register(AcceptNum),'%P','%d')
    Entry16 = Entry(Can3,validate="key",bg="white",font=("Calibri",10,"bold"),width=25)
    Entry16['validatecommand'] = (Entry16.register(AcceptNum),'%P','%d')
    Entry17 = Entry(Can3,bg="white",font=("Calibri",10,"bold"),width=25)
    
    Entry18_Values = Queryfun("SELECT Relationship FROM tblRelationships;")
    Entry18 = AutocompleteCombobox(Can3, width=22, completevalues=Entry18_Values, font=("Calibri",10,"bold"))
    Entry18_msg = 'This Relationship name is not available in the list! please check'
    
    Entry19 = Text(Can3,bg="white",font=("Calibri",10,"bold"),width=30,height=3)
    Entry19.bind('<Tab>', lambda event: focusNext(Entry19))
    Entry19.bind('<Shift-Tab>', lambda event: focusPrev(Entry19))
    
    Entry19_vsb = ttk.Scrollbar(Can3, orient="vertical", command=Entry19.yview)
    Entry19.configure(yscrollcommand=Entry19_vsb.set)

    Entry20 = Entry(Can3,bg="white",font=("Calibri",10,"bold"),width=25)
    
    SameAdd = StringVar(value='No')
    C1 = Checkbutton(Can3, text = "Same as Present Address", variable = SameAdd, onvalue = "Yes", offvalue = "No", command=SameAdd_Select ,fg="#054457", bg="white", font=("Calibri",10,"bold"), wraplength=90)

    Entry21 = Text(Can3,bg="white",font=("Calibri",10,"bold"),width=30,height=3)
    Entry21.bind('<Tab>', lambda event: focusNext(Entry21))
    Entry21.bind('<Shift-Tab>', lambda event: focusPrev(Entry21))

    Entry21_vsb = ttk.Scrollbar(Can3, orient="vertical", command=Entry21.yview)
    Entry21.configure(yscrollcommand=Entry21_vsb.set)

    Entry22 = Entry(Can3,bg="white",font=("Calibri",10,"bold"),width=25)

    Entry23_Values = ['Yes', 'No']
    Entry23 = AutocompleteCombobox(Can3, width=22, completevalues=Entry23_Values, font=("Calibri",10,"bold"))
    Entry23_msg = 'This Transport Option is not available in the list! please check'
        
    Entry14.place(x=250, y=10)
    Entry15.place(x=250, y=50)
    Entry16.place(x=250, y=90)
    Entry17.place(x=250, y=130)
    Entry18.place(x=250, y=170)
    Entry19.place(x=250, y=210)
    Entry19_vsb.place(x=462, y=210, height=49)
    Entry20.place(x=250, y=270)
    C1.place(x=465, y=260)
    Entry21.place(x=250, y=305)
    Entry21_vsb.place(x=462, y=305, height=49)
    Entry22.place(x=250, y=375)
    Entry23.place(x=250, y=415)
                
    def Validate_Clear():
        LabelList = [Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label13_1, Label14, Label15, Label16, Label17, Label18, Label19, Label20, Label21, Label22, Label23]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_PersonalSubmit():
        Validate_Clear()

        AllLabelList = [Label1, Label6, Label7, Label12, Label13, Label18, Label23]
        AllEntryList = [Entry1, Entry6, Entry7, Entry12, Entry13, Entry18, Entry23]
        AllEntryValues = [Entry1_Values, Entry6_Values, Entry7_Values, Entry12_Values, Entry13_Values, Entry18_Values, Entry23_Values]
        AllEntryMessage = [Entry1_msg, Entry6_msg, Entry7_msg, Entry12_msg, Entry13_msg, Entry18_msg, Entry23_msg]

        DateLabelList = [Label5]
        DateEntryList = [Entry5]

        if Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry9.get() == '' or Entry11.get() == '' or Entry13_1.get() == '' or Entry14.get() == '' or Entry16.get() == '' or Entry17.get() == '' or Entry18.get() == '' or Entry19.get(1.0, END).strip() == '' or Entry20.get() == '' or Entry21.get(1.0, END).strip() == '' or Entry22.get() == '' or Entry23.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        elif not (CheckValidEmail(Entry9.get().strip().lower()) and Entry9.get().strip().lower().endswith('@Test.com')):
            messagebox.showerror('Validation Check','Official email id is not valid! Please check')
            return False
        else:
            Submit = True
            
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                PersonalSubmit()

    def PersonalSubmit():
        Record = (Entry5.get(), Entry6.get(), Entry7.get(), Entry8.get().strip(), Entry9.get().strip().lower(), Entry10.get().strip().lower(), Entry11.get().strip(), Entry12.get(), Entry13.get(), Entry14.get().strip(), Entry15.get().strip(), Entry16.get().strip(), Entry17.get().strip(), Entry18.get(), Entry19.get(1.0, END).strip(), Entry20.get().strip(), Entry21.get(1.0, END).strip(), Entry22.get().strip(), Entry23.get(), Entry13_1.get().strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        InsertQueryfun(ProDBPath,"""UPDATE tblPersonalData SET DOB=(?),	Gender=(?),	BloodGroup=(?),	PANNumber=(?), OfficialEmail=(?), PersonalEmail=(?), AccessCardNumber=(?), InternetAtHome=(?), CovidVaccination=(?), 
                        PrimaryContact=(?), SecondaryContact=(?), EmergencyContact=(?), EmergencyContactName=(?), EmergencyContactRelationship=(?), PresentAddress=(?), PresentAddressLocation=(?), PermanentAddress=(?), PermanentState=(?), OptedTransport=(?), YearsofExp=(?), UpdatedBy=(?), UpdatedDate=(?) WHERE EmpID = """ + str(Entry1.get()) + """;""", Record)
        messagebox.showinfo('Completed','Personal Details Updated Successfully!')
        PersonalCancel()

    def PersonalCancel():
        Entry1.delete(0,END)
        PersonalClear()

    def PersonalClear():
        LabelEmpStatus.config(bg='white')

        Entry2.configure(state = "normal")
        Entry3.configure(state = "normal")
        Entry4.configure(state = "normal")

        Entry2.delete(0,END)
        Entry3.delete(0,END)
        Entry4.delete(0,END)

        Entry2.configure(state = "disabled")
        Entry3.configure(state = "disabled")
        Entry4.configure(state = "disabled")

        Entry5.delete(0,END)
        Entry6.delete(0,END)
        Entry7.delete(0,END)
        Entry8.delete(0,END)
        Entry9.delete(0,END)
        Entry10.delete(0,END)
        Entry11.delete(0,END)
        Entry12.delete(0,END)
        Entry13.delete(0,END)
        Entry13_1.delete(0,END)
        Entry14.delete(0,END)
        Entry15.delete(0,END)
        Entry16.delete(0,END)
        Entry17.delete(0,END)
        Entry18.delete(0,END)
        Entry19.delete(1.0,END)
        Entry20.delete(0,END)
        SameAdd.set('No')
        Entry21.delete(1.0,END)
        Entry22.delete(0,END)
        Entry23.delete(0,END)
        
    
    Image_Submit= PhotoImage(file=r)
    Image_Reset= PhotoImage(file=r)

    SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_PersonalSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:PersonalCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
    SubmitB.image = Image_Submit
    CancelB.image = Image_Reset

    SubmitB.place(x=400, y=465)
    CancelB.place(x=600, y=465)

########################################################## Personal Details Update Page End ########################################################

########################################################## This is Rele/Team Change Update Page ########################################################

def RoleChange(Home):
    
    RoleCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    RoleCan.place(x=150, y=10)
    
    def SelectRoleAccess():
        selection = Role_Option.get()
        
        if selection == 1:
            if Role_Access == 'UpdateOnly' or Role_Access == 'Both':
                SelectRole()
            else:
                messagebox.showerror('Validation Check','You have no access to this Update module, Contact Innovation team!')
                RoleChange(Home)
                return False
        elif selection == 2:
            if Role_Access == 'Both':
                SelectRole()
            else:
                messagebox.showerror('Validation Check','You have no access to this IJP/Movement module, Contact Innovation team!')
                RoleChange(Home)
                return False

    def SelectRole():
        Can1=Canvas(RoleCan,bg="white", width=1020, height=520, highlightthickness=0)
        Can1.place(x=10, y=50)

        selection = Role_Option.get()
        
        Var_Entry2 = StringVar()
        Var_Entry3 = StringVar()
        Var_Entry4 = StringVar()

        global Entry5_Values, Entry6_Values, Entry7_Values, Entry8_Values, Entry9_Values, Entry10_Values
                    
        Label1 = Label(Can1, text="Employee ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label2 = Label(Can1, text="Employee Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label3 = Label(Can1, text="User ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label4_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label4 = Label(Can1, text="DOJ*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label5 = Label(Can1, text="Role*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label6 = Label(Can1, text="Team Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label7 = Label(Can1, text="Location*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label8 = Label(Can1, text="Business Division*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label9 = Label(Can1, text="Team Leader*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label10 = Label(Can1, text="Operations Manager*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label11_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label11 = Label(Can1, text="Change Effective Date*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label12 = Label(Can1, text="Change Type*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label13 = Label(Can1, text="Filled ATR",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label14 = Label(Can1, text="Comments",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        
        Entry1_Values = Queryfun("SELECT EmpID FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');")
        Entry1_Values = [str(x) for x in Entry1_Values]
        Entry1 = AutocompleteCombobox(Can1, width=33, completevalues=Entry1_Values)
        Entry1_msg = 'This Employee ID is not available in the list, please check!'
        
        Entry2 = Entry(Can1,textvariable=Var_Entry2,bg="white",font=("Calibri",10,"bold"),width=31)
        Entry3 = Entry(Can1,textvariable=Var_Entry3,bg="white",font=("Calibri",10,"bold"),width=31)
        Entry4 = Entry(Can1,textvariable=Var_Entry4,bg="white",font=("Calibri",10,"bold"),width=31)

        Entry5_Values = []
        Entry5 = AutocompleteCombobox(Can1, width=33, completevalues=Entry5_Values)
        Entry5_msg = 'This Role is not available in the list! please check'
        
        Entry6_Values = []
        Entry6 = AutocompleteCombobox(Can1, width=33, completevalues=Entry6_Values)
        Entry6_msg = 'This Team Name is not available in the list! please check'

        Entry7_Values = []
        Entry7 = AutocompleteCombobox(Can1, width=33, completevalues=Entry7_Values)
        Entry7_msg = 'This Location is not available in the list! please check'

        Entry8_Values = []
        Entry8 = AutocompleteCombobox(Can1, width=33, completevalues=Entry8_Values)
        Entry8_msg = 'This Business Division is not available in the list! please check'

        Entry9_Values = []
        Entry9 = AutocompleteCombobox(Can1, width=33, completevalues=Entry9_Values)
        Entry9_msg = 'This Team Leader is not available in the list! please check'

        Entry10_Values = []
        Entry10 = AutocompleteCombobox(Can1, width=33, completevalues=Entry10_Values)
        Entry10_msg = 'This Operations Manager is not available in the list! please check'
                
        Entry11 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy')
        Entry11.delete(0, END)
        
        Entry12_Values=['IJP', 'Progression', 'Internal Movement']
        Entry12 = AutocompleteCombobox(Can1, width=33, completevalues=Entry12_Values)
        Entry12_msg = 'This Change Type is not available in the list! please check'
            
        Entry13_Values=Queryfun("SELECT ATRID FROM tblATR WHERE Status = 'Open';")
        Entry13 = AutocompleteCombobox(Can1, width=33, completevalues=Entry13_Values)
        Entry13_msg = 'This ATR is not available in the list! please check'
            
        Entry14 = Text(Can1,bg="white",font=("Calibri",10,"bold"),width=30,height=3)
        Entry14.bind('<Tab>', lambda event: focusNext(Entry14))
        Entry14.bind('<Shift-Tab>', lambda event: focusPrev(Entry14))

        Entry14_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry14.yview)
        Entry14.configure(yscrollcommand=Entry14_vsb.set)
        
        Label1.place(x=90, y=30)
        Label2.place(x=530, y=30)
        Label3.place(x=90, y=90)
        Label4.place(x=530, y=90)
        Label5.place(x=90, y=150)
        Label6.place(x=530, y=150)
        Label7.place(x=90, y=210)
        Label8.place(x=530, y=210)
        Label9.place(x=90, y=270)
        Label10.place(x=530, y=270)
        Label11.place(x=90, y=330)
        Label12.place(x=530, y=330)
        Label13.place(x=90, y=405)
        Label14.place(x=530, y=405)
        
        Entry1.place(x=240, y=30)
        Entry2.place(x=680, y=30)
        Entry3.place(x=240, y=90)
        Label4_0.place(x=680, y=70)
        Entry4.place(x=680, y=90)
        Entry5.place(x=240, y=150)
        Entry6.place(x=680, y=150)
        Entry7.place(x=240, y=210)
        Entry8.place(x=680, y=210)
        Entry9.place(x=240, y=270)
        Entry10.place(x=680, y=270)
        Label11_0.place(x=240, y=310)
        Entry11.place(x=240, y=330)
        Entry12.place(x=680, y=330)
        Entry13.place(x=240, y=405)
        Entry14.place(x=680, y=390)
        Entry14_vsb.place(x=893, y=390, height=49)

        if selection == 1:
            Label11.configure(text="Change Effective Date")
            Label12.configure(text="Change Type")
            
            Entry11.configure(state = "disabled")
            Entry12.configure(state = "disabled")
            Entry13.configure(state = "disabled")
        elif selection == 2:
            Label11.configure(text="Change Effective Date*")
            Label12.configure(text="Change Type*")

            Entry11.configure(state = "normal")
            Entry12.configure(state = "normal")
            Entry13.configure(state = "normal")

        def RoleEmpIDSelected(event):
            global Entry5_Values, Entry6_Values, Entry7_Values, Entry8_Values, Entry9_Values, Entry10_Values
            Temp = Entry1.get()
            
            if Temp != "":
                EmpIDExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblEmpData WHERE EmpID = '" + Temp + "' AND EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination'));")
                if EmpIDExists[0][0] == 1:
                    result = ViewQueryfun(ProDBPath, "SELECT * FROM tblEmpData WHERE EmpID = " + Temp + ";")
                    
                    Entry2.configure(state = "normal")
                    Entry2.delete(0,END)
                    Entry2.insert(0,result[0][1])
                    Entry2.configure(state = "disabled")
                    
                    Entry3.configure(state = "normal")
                    Entry3.delete(0,END)
                    Entry3.insert(0,result[0][2])
                    Entry3.configure(state = "disabled")
                    
                    Entry4.configure(state = "normal")
                    Entry4.delete(0,END)
                    Entry4.insert(0,result[0][3])
                    Entry4.configure(state = "disabled")
                    
                    Entry5.set("")
                    Entry5_Values = Queryfun("SELECT Role FROM tblRoles;")
                    Entry5.config(completevalues=Entry5_Values)
                    Entry5.set(result[0][5])
                    
                    Entry6.set("")
                    Entry6_Values = Queryfun("SELECT TeamName FROM tblTeams WHERE TeamName != 'Customer Processing';")
                    Entry6.config(completevalues=Entry6_Values)
                    Entry6.set(result[0][6])
                    
                    Entry7.set("")
                    Entry7_Values = Queryfun("SELECT Location FROM tblLocations;")
                    Entry7.config(completevalues=Entry7_Values)
                    Entry7.set(result[0][4])
                                        
                    Entry8.set("")
                    Entry8_Values = Queryfun("SELECT BusinessUnit FROM tblBusinessUnits;")
                    Entry8.config(completevalues=Entry8_Values)
                    Entry8.set(result[0][7])
                    
                    Entry9.set("")
                    Entry9_Values = Queryfun("SELECT DISTINCT TeamLeader FROM tblEmpData;")
                    Entry9.config(completevalues=Entry9_Values)
                    Entry9.set(result[0][8])
                    
                    Entry10.set("")
                    Entry10_Values = Queryfun("SELECT DISTINCT LMName FROM tblEmpData;")
                    Entry10.config(completevalues=Entry10_Values)
                    Entry10.set(result[0][9])
                
                else:
                    messagebox.showerror('Validation Check','This Employee ID is not available! Please Check')
                    Clear()        

        Entry1.bind("<FocusOut>", RoleEmpIDSelected)
        Entry1.bind("<<ComboboxSelected>>", RoleEmpIDSelected)

        def IJPSelected(event):
            IJPStatus = Entry12.get()
            if IJPStatus == "IJP":
                Label13.config(text="Filled ATR*")    
            else:
                Label13.config(text="Filled ATR")
        
        Entry12.bind("<<ComboboxSelected>>", IJPSelected)

        def Validate_Clear():
            LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label14]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='#054457')

        def Validate_RoleSubmit():
            Validate_Clear()
            global Entry5_Values, Entry6_Values, Entry7_Values, Entry8_Values, Entry9_Values, Entry10_Values

            AllLabelList = [Label1, Label5, Label6, Label7, Label8, Label9, Label10, Label12, Label13]
            AllEntryList = [Entry1, Entry5, Entry6, Entry7, Entry8, Entry9, Entry10, Entry12, Entry13]
            AllEntryValues = [Entry1_Values, Entry5_Values, Entry6_Values, Entry7_Values, Entry8_Values, Entry9_Values, Entry10_Values, Entry12_Values, Entry13_Values]
            AllEntryMessage = [Entry1_msg, Entry5_msg, Entry6_msg, Entry7_msg, Entry8_msg, Entry9_msg, Entry10_msg, Entry12_msg, Entry13_msg]
            
            DateLabelList = [Label11]
            DateEntryList = [Entry11]

            if selection == 1:
                Condition = Entry1.get() == '' or Entry2.get().strip() == '' or Entry3.get().strip() == '' or Entry4.get().strip() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or Entry9.get() == '' or Entry10.get() == ''
            elif selection == 2:
                if Entry12.get() == 'IJP':
                    Condition = Entry1.get() == '' or Entry2.get().strip() == '' or Entry3.get().strip() == '' or Entry4.get().strip() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or Entry9.get() == '' or Entry10.get() == '' or Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == ''
                else:
                    Condition = Entry1.get() == '' or Entry2.get().strip() == '' or Entry3.get().strip() == '' or Entry4.get().strip() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or Entry9.get() == '' or Entry10.get() == '' or Entry11.get() == '' or Entry12.get() == ''

            if Condition:
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False
            else:
                Submit = True
                
                for i in range(0,len(AllEntryList)):
                    if AllEntryList[i].get() != '':
                        result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                        if result == 'Failed':
                            AllLabelList[i].config(foreground='red')
                            AllEntryList[i].focus_set()
                            messagebox.showerror('Validation Check',AllEntryMessage[i])
                            Submit = False
                            break
                
                for i in range(0,len(DateEntryList)):
                    if DateEntryList[i].get() != '':
                        result = Date_Validation(DateEntryList[i])
                        if result == 'Failed':
                            DateLabelList[i].config(foreground='red')
                            DateEntryList[i].focus_set()
                            messagebox.showerror('Date Error','This typed date is not valid! Please check')
                            Submit = False
                            break

                if Submit:
                    RoleSubmit()

        def RoleSubmit():
            if Entry13.get() != '':
                ATRCount = Queryfun("SELECT COUNT(ATRID) FROM tblATRPosition WHERE ATRID = '" + Entry13.get() + "';")[0]
                Positions = Queryfun("SELECT NoofPositions FROM tblATR WHERE ATRID = '" + Entry13.get() + "';")[0]

                if ATRCount < Positions:
                    Record = (Entry13.get(), Entry1.get(), 'Closed', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                    InsertQueryfun(ProDBPath,"""INSERT INTO tblATRPosition (ATRID, EmpID, PositionStatus, CreatedBy, CreatedDate) VALUES(?, ?, ?, ?, ?);""", Record)

                    ATRCount = Queryfun("SELECT COUNT(ATRID) FROM tblATRPosition WHERE ATRID = '" + Entry13.get() + "';")[0]

                    if ATRCount == Positions:
                        InsertQueryfun(ProDBPath,"UPDATE tblATR SET Status = 'Closed' WHERE ATRID = (?);", (Entry13.get(),))
                else:
                    messagebox.showerror('Error','This ATR is already closed, please refresh and check!')
                    return False
            
            if selection == 1:
                ChangeType = 'Update'
            else:
                ChangeType = Entry12.get()

            Record = (Entry1.get(), Entry5.get(), Entry6.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(), Entry11.get(), ChangeType, Entry13.get(), Entry14.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
            InsertQueryfun(ProDBPath,"INSERT INTO tblRoleTeamChange (EmpID, Role, TeamName, Location, BusinessDivision, TL, OM, ChangeEffDate, ChangeType, FilledATR, Comments, CreatedBy, CreatedDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)
            
            Record = (Entry7.get(), Entry5.get(), Entry6.get(), Entry8.get(), Entry9.get(), Entry10.get(), Entry1.get())
            InsertQueryfun(ProDBPath,"UPDATE tblEmpData SET Location = (?), Role = (?), Team = (?), BusinessUnit = (?), TeamLeader = (?), LMName = (?) WHERE EmpID = (?);", Record)
                        
            messagebox.showinfo('Completed','Role/Team Change Details Updated Successfully!')
            RoleCancel()

        def RoleCancel():
            Clear()

        def Clear():
            Entry1.delete(0, END)
            Entry2.configure(state = "normal")
            Entry2.delete(0, END)
            Entry3.configure(state = "normal")
            Entry3.delete(0, END)
            Entry4.configure(state = "normal")
            Entry4.delete(0, END)
            Entry5.set('')
            Entry6.set('')
            Entry7.set('')
            Entry8.set('')
            Entry9.set('')
            Entry10.set('')

            if selection == 2:
                Entry11.configure(state = "normal")
                Entry12.configure(state = "normal")
                Entry13.configure(state = "normal")
                Entry11.delete(0, END)
                Entry12.set('')
                Entry13.set('')
                IJPSelected(Event)

            Entry14.delete(1.0, END)

        Image_Submit= PhotoImage(file=r)
        Image_Reset= PhotoImage(file=r')

        SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_RoleSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
        CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:RoleCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
        SubmitB.image = Image_Submit
        CancelB.image = Image_Reset

        SubmitB.place(x=400, y=460)
        CancelB.place(x=600, y=460)

    Role_Option = IntVar()
    R1 = Radiobutton(RoleCan, text="Update", variable=Role_Option, value=1, command=SelectRoleAccess, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"), cursor='hand2')
    R2 = Radiobutton(RoleCan, text="IJP/Movement", variable=Role_Option, value=2, command=SelectRoleAccess, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"), cursor='hand2')
    
    R1.place(x=400, y=10)
    R2.place(x=600, y=10)

########################################################## This is Leave Update Page ########################################################

def LeaveDetails(Home):

    LeaveCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    LeaveCan.place(x=150, y=10)

    def SelectLeave():
        global Entry1_Values

        Can1=Canvas(LeaveCan,bg="white", width=1020, height=520, highlightthickness=0)
        Can1.place(x=10, y=50)
                
        selection = Leave_Option.get()
        
        Var_Entry2 = StringVar()
        Var_Entry3 = StringVar()
        Var_Entry4 = StringVar()
        Var_Entry5 = StringVar()
                                
        Label1 = Label(Can1, text="Employee ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label2 = Label(Can1, text="Employee Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label3 = Label(Can1, text="User ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label4_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label4 = Label(Can1, text="DOJ*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label5 = Label(Can1, text="Team Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label6 = Label(Can1, text="Leave Type*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label7_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label7 = Label(Can1, text="Leave Start Date*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label8_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label8 = Label(Can1, text="Leave End Date*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label9_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label9 = Label(Can1, text="Tentative RTW*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label10 = Label(Can1, text="Initial Comments",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label11_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label11 = Label(Can1, text="Actual RTW",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label12 = Label(Can1, text="Final Comments",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        
        Entry1_Values = []
        Entry1 = AutocompleteCombobox(Can1, width=33, completevalues=Entry1_Values)
        
        Entry2 = Entry(Can1,textvariable=Var_Entry2,bg="white",font=("Calibri",10,"bold"),width=31)
        Entry3 = Entry(Can1,textvariable=Var_Entry3,bg="white",font=("Calibri",10,"bold"),width=31)
        Entry4 = Entry(Can1,textvariable=Var_Entry4,bg="white",font=("Calibri",10,"bold"),width=31)
        Entry5 = Entry(Can1,textvariable=Var_Entry5,bg="white",font=("Calibri",10,"bold"),width=31)

        Entry6_Values = Queryfun("Select LeaveType from tblLeaveType;")
        Entry6 = AutocompleteCombobox(Can1, width=33, completevalues=Entry6_Values)
        Entry6_msg = 'This Leave Type is not available in the list! please check'
        
        today = date.today()
        Entry7 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',maxdate=today)
        Entry7.delete(0, END)
        
        Entry8 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',mindate=today)
        Entry8.delete(0, END)
        
        Entry9 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',mindate=today)
        Entry9.delete(0, END)
        
        Entry10 = Text(Can1,bg="white",font=("Calibri",10,"bold"),width=30,height=3)
        Entry10.bind('<Tab>', lambda event: focusNext(Entry10))
        Entry10.bind('<Shift-Tab>', lambda event: focusPrev(Entry10))

        Entry10_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry10.yview)
        Entry10.configure(yscrollcommand=Entry10_vsb.set)
        
        Entry11 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',maxdate=today)
        Entry11.delete(0, END)
        
        Entry12 = Text(Can1,bg="white",font=("Calibri",10,"bold"),width=30,height=3)
        Entry12.bind('<Tab>', lambda event: focusNext(Entry12))
        Entry12.bind('<Shift-Tab>', lambda event: focusPrev(Entry12))

        Entry12_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry12.yview)
        Entry12.configure(yscrollcommand=Entry12_vsb.set)
        
        Label1.place(x=80, y=30)
        Label2.place(x=540, y=30)
        Label3.place(x=80, y=100)
        Label4.place(x=540, y=100)
        Label5.place(x=80, y=170)
        Label6.place(x=540, y=170)
        Label7.place(x=80, y=240)
        Label8.place(x=540, y=240)
        Label9.place(x=80, y=310)
        Label10.place(x=540, y=310)
        Label11.place(x=80, y=390)
        Label12.place(x=540, y=390)
        
        Entry1.place(x=230, y=30)
        Entry2.place(x=690, y=30)
        Entry3.place(x=230, y=100)
        Label4_0.place(x=690, y=80)
        Entry4.place(x=690, y=100)
        Entry5.place(x=230, y=170)
        Entry6.place(x=690, y=170)
        Label7_0.place(x=230, y=220)
        Entry7.place(x=230, y=240)
        Label8_0.place(x=690, y=220)
        Entry8.place(x=690, y=240)
        Label9_0.place(x=230, y=290)
        Entry9.place(x=230, y=310)
        Entry10.place(x=690, y=300)
        Entry10_vsb.place(x=903, y=300, height=49)
        Label11_0.place(x=230, y=370)
        Entry11.place(x=230, y=390)
        Entry12.place(x=690, y=380)
        Entry12_vsb.place(x=903, y=380, height=49)

        if selection == 1:
            Entry1_Values = Queryfun("SELECT EmpID FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination', 'Maternity Leave', 'Long Leave', 'Long Sick Leave', 'Career Break');")
            Entry1_Values = [str(x) for x in Entry1_Values]
            Entry1.config(completevalues=Entry1_Values)
            Entry1_msg = 'This Employee ID is not available in the list, please check!'
            
            Label11.configure(text="Actual RTW")

            Entry11.configure(state = "normal")
            Entry11.delete(0,END)
            Entry11.configure(state = "disabled")

            Entry12.configure(state = "normal")
            Entry12.delete(1.0,END)
            Entry12.configure(state = "disabled")
            
        elif selection == 2:
            Entry1_Values = Queryfun("SELECT EmpID FROM tblEmpData WHERE EmpStatus IN ('Maternity Leave', 'Long Leave', 'Long Sick Leave', 'Career Break');")
            Entry1_Values = [str(x) for x in Entry1_Values]
            Entry1.config(completevalues=Entry1_Values)
            Entry1_msg = 'This Employee ID is not available in the list, please check!'
            
            Label11.configure(text="Actual RTW")

            Entry11.configure(state = "normal")
            Entry11.delete(0,END)
            Entry11.configure(state = "disabled")

            Entry12.configure(state = "normal")
            Entry12.delete(1.0,END)
            Entry12.configure(state = "disabled")

        elif selection == 3:
            Entry1_Values = Queryfun("SELECT EmpID FROM tblEmpData WHERE EmpStatus IN ('Maternity Leave', 'Long Leave', 'Long Sick Leave', 'Career Break');")
            Entry1_Values = [str(x) for x in Entry1_Values]
            Entry1.config(completevalues=Entry1_Values)
            Entry1_msg = 'This Employee ID is not available in the list, please check!'
            
            Label11.configure(text="Actual RTW*")

            Entry11.configure(state = "normal")
            Entry11.delete(0,END)

            Entry12.configure(state = "normal")
            Entry12.delete(1.0,END)
        
        def LeaveEmpIDSelected(event):
            Temp = Entry1.get()

            if Temp != "":
                if selection == 1:
                    query = "SELECT EXISTS(SELECT 1 FROM tblEmpData WHERE EmpID = '" + Temp + "' AND EmpStatus IN ('Active'));"
                else:
                    query = "SELECT EXISTS(SELECT 1 FROM tblEmpData WHERE EmpID = '" + Temp + "' AND EmpStatus IN ('Maternity Leave', 'Long Leave', 'Long Sick Leave', 'Career Break'));"
                
                EmpIDExists = ViewQueryfun(ProDBPath, query)
                if EmpIDExists[0][0] == 1:
                    result = ViewQueryfun(ProDBPath, "SELECT EmpName, UserID, DOJ, Team FROM tblEmpData WHERE EmpID = " + Temp + ";")
                    
                    Entry2.configure(state = "normal")
                    Entry2.delete(0,END)
                    Entry2.insert(0,result[0][0])
                    Entry2.configure(state = "disabled")
                    
                    Entry3.configure(state = "normal")
                    Entry3.delete(0,END)
                    Entry3.insert(0,result[0][1])
                    Entry3.configure(state = "disabled")
                    
                    Entry4.configure(state = "normal")
                    Entry4.delete(0,END)
                    Entry4.insert(0,result[0][2])
                    Entry4.configure(state = "disabled")

                    Entry5.configure(state = "normal")
                    Entry5.delete(0,END)
                    Entry5.insert(0,result[0][3])
                    Entry5.configure(state = "disabled")
                    
                    if selection == 1:
                        pass
                                            
                    elif selection == 2 or selection == 3:
                        result = ViewQueryfun(ProDBPath, "SELECT * FROM tblLeaveData WHERE EmpID = " + Temp + " ORDER BY LeaveID DESC;")

                        Entry6.configure(state = "normal")
                        Entry6.set("")
                        Entry6.set(result[0][2])
                        Entry6.configure(state = "disabled")

                        Entry7.configure(state = "normal")
                        Entry7.delete(0,END)
                        Entry7.set_date(result[0][3])
                        Entry7.configure(state = "disabled")
                                            
                        Entry8.configure(state = "normal")
                        Entry8.delete(0,END)
                        Entry8.set_date(result[0][4])
                        
                        Entry9.configure(state = "normal")
                        Entry9.delete(0,END)
                        Entry9.set_date(result[0][5])
                        
                        if selection == 3:
                            Entry8.configure(state = "disabled")
                            Entry9.configure(state = "disabled")

                        Entry10.configure(state = "normal")
                        Entry10.delete(1.0,END)
                        Entry10.insert(1.0,result[0][6])
                        Entry10.configure(state = "disabled")

                        if selection == 3:
                            Entry11.configure(state = "normal")
                            Entry11.delete(0,END)
                            if result[0][7] != None:
                                Entry11.set_date(result[0][7])
                            
                            Entry12.configure(state = "normal")
                            Entry12.delete(1.0,END)
                            if result[0][8] != None:
                                Entry12.insert(1.0,result[0][8])
                else:
                    messagebox.showerror('Validation Check','This Employee ID is not available! Please Check')
                    Clear()       

        Entry1.bind("<FocusOut>", LeaveEmpIDSelected)
        Entry1.bind("<<ComboboxSelected>>", LeaveEmpIDSelected)

        def Validate_Clear():
            LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='#054457')

        def Validate_LeaveSubmit():
            Validate_Clear()
            global Entry1_Values

            AllLabelList = [Label1, Label6]
            AllEntryList = [Entry1, Entry6]
            AllEntryValues = [Entry1_Values, Entry6_Values]
            AllEntryMessage = [Entry1_msg, Entry6_msg]

            DateLabelList = [Label7, Label8, Label9, Label11]
            DateEntryList = [Entry7, Entry8, Entry9, Entry11]

            if selection == 1 or selection == 2:
                if Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == ''or Entry9.get() == '':
                    messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                    return False
            elif selection == 3:
                if Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == '' or Entry9.get() == '' or Entry11.get() == '':
                    messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                    return False
        
            Submit = True
            
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                LeaveSubmit()

        def LeaveSubmit():
            if selection == 1 or selection == 2:
                Record = (Entry1.get(), Entry6.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                InsertQueryfun(ProDBPath,"INSERT INTO tblLeaveData (EmpID, LeaveType, LStartDate, LEndDate, TentativeRTW, InitialComments, CreatedBy, CreatedDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?);", Record)
                Record = (Entry6.get(), Entry1.get())
                InsertQueryfun(ProDBPath,"UPDATE tblEmpData SET EmpStatus = (?) WHERE EmpID = (?);", Record)

                Record = ('Amber', Entry6.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                InsertQueryfun(ProDBPath,"UPDATE tblRAGStatus SET RAGStatus = (?), Comments = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)                
                
                messagebox.showinfo('Completed','Leave Details Added Successfully!')
                LeaveCancel()

            elif selection == 3:
                Record = (Entry1.get(), Entry6.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(1.0, END).strip(), Entry11.get(), Entry12.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                InsertQueryfun(ProDBPath,"INSERT INTO tblLeaveData (EmpID, LeaveType, LStartDate, LEndDate, TentativeRTW, InitialComments, ActualRTW, FinalComments, CreatedBy, CreatedDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)
                Record = ('Active', Entry1.get())
                InsertQueryfun(ProDBPath,"UPDATE tblEmpData SET EmpStatus = (?) WHERE EmpID = (?);", Record)

                Record = ('Green', 'Active', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                InsertQueryfun(ProDBPath,"UPDATE tblRAGStatus SET RAGStatus = (?), Comments = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)                
                
                messagebox.showinfo('Completed','Leave Details Updated Successfully!')
                LeaveCancel()

        def LeaveCancel():
            Clear()

        def Clear():
            Entry1.delete(0, END)
            Entry2.configure(state = "normal")
            Entry3.configure(state = "normal")
            Entry4.configure(state = "normal")
            Entry5.configure(state = "normal")
            Entry6.configure(state = "normal")
            Entry7.configure(state = "normal")
            Entry8.configure(state = "normal")
            Entry9.configure(state = "normal")
            Entry10.configure(state = "normal")
            Entry2.delete(0, END)
            Entry3.delete(0, END)
            Entry4.delete(0, END)
            Entry5.delete(0, END)
            Entry6.set('')
            Entry7.delete(0, END)
            Entry8.delete(0, END)
            Entry9.delete(0, END)
            Entry10.delete(1.0, END)
            
            if selection == 3:
                Entry11.configure(state = "normal")
                Entry12.configure(state = "normal")
                Entry11.delete(0, END)
                Entry12.delete(1.0, END)
    
        Image_Submit= PhotoImage(file=r)
        Image_Reset= PhotoImage(file=r)

        SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_LeaveSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
        CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:LeaveCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
        SubmitB.image = Image_Submit
        CancelB.image = Image_Reset

        SubmitB.place(x=400, y=460)
        CancelB.place(x=600, y=460)
        
    Leave_Option = IntVar()
    R1 = Radiobutton(LeaveCan, text="New", variable=Leave_Option, value=1, command=SelectLeave, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"), cursor='hand2')
    R2 = Radiobutton(LeaveCan, text="Update", variable=Leave_Option, value=2, command=SelectLeave, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"), cursor='hand2')
    R3 = Radiobutton(LeaveCan, text="RTW", variable=Leave_Option, value=3, command=SelectLeave, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"), cursor='hand2')
    
    R1.place(x=300, y=10)
    R2.place(x=500, y=10)
    R3.place(x=700, y=10)

########################################################## This is Leave Update Page End ########################################################

########################################################## This is Leaver Update Page ########################################################

def AttendanceCorrection_Resigned(EmpID, ResignedDate):
    query1 = """SELECT * FROM tblAttendance
                WHERE EmpID = '""" + EmpID + """';"""
    conn = sqlite3.connect(AttendanceDBPath)
    df_AttendanceData = pd.read_sql_query(query1, conn)
    conn.close()

    if len(df_AttendanceData) != 0:
        df_Unpivoted = df_AttendanceData.melt(id_vars=['ID', 'EmpID', 'Year', 'Month'], var_name='Date', value_name='Attendance')
        df_Unpivoted['Attendance'] = df_Unpivoted.Attendance.replace('', numpy.nan, regex=True)
        df_Unpivoted = df_Unpivoted.dropna(axis=0, how='any')
        df_Unpivoted = df_Unpivoted.loc[(~df_Unpivoted.Date.isin(['UpdatedBy', 'UpdatedDate']))]
        df_Unpivoted['FullDate'] = df_Unpivoted['Year'].astype(str) + '-' + df_Unpivoted['Month'].astype(str) + '-' + df_Unpivoted['Date'].replace('_', '', regex=True).astype(str)
        df_Unpivoted['FullDate'] = pd.to_datetime(df_Unpivoted['FullDate'], format='%Y-%m-%d', errors='coerce')
        ResignedDate = pd.to_datetime(ResignedDate, format='%Y-%m-%d', errors='coerce')
        df_Unpivoted_Filtered = df_Unpivoted.loc[(df_Unpivoted.FullDate > ResignedDate)]
        
        if len(df_Unpivoted_Filtered) != 0:
            for index, row in df_Unpivoted_Filtered.iterrows():
                FullDate = row['FullDate']
                query = "UPDATE tblAttendance SET _" + str(FullDate.day) + " = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE Year = (?) AND Month = (?) AND EmpID = (?);"
                Record = ('', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), FullDate.year, FullDate.month, EmpID)
                InsertQueryfun(AttendanceDBPath, query, Record)
        else:
            pass    
    else:
        pass
        
def LeaverUpdate(Home):
    LeaverCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    LeaverCan.place(x=150, y=10)
    
    def SelectLeaver():
        Can1=Canvas(LeaverCan,bg="white", width=1020, height=520, highlightthickness=0)
        Can1.place(x=10, y=50)
        global Entry1_Values, Entry10_Values, RegReason
        RegReason = ''
        selection = Leaver_Option.get()
        
        Var_Entry2 = StringVar()
        Var_Entry3 = StringVar()
        Var_Entry4 = StringVar()
        Var_Entry5 = StringVar()
        Var_Entry6 = StringVar()
                
        def RegTypeSelected(event):
            Temp = Entry9.get()
            global Entry10_Values, RegReason
            if Temp != "":
                if Temp == 'Abscond' or Temp == 'Termination':
                    Entry10.set("")
                else:
                    Entry10.set(RegReason)

                Entry10_Values=Queryfun("select RegReason from tblRegReasons where RegType = '" + Temp + "';")
                Entry10.config(completevalues=Entry10_Values)
            else:
                pass
            
        def EmpStatusSelected(event):
            Temp = Entry14.get()
            
            if Temp != "" and (Temp == 'Resigned' or Temp == 'Abscond' or Temp == 'Termination'):
                Label13.configure(text="Actual LWD*")
                Entry13.configure(state = "normal")
                Entry13.delete(0,END)
                if Temp == 'Abscond':
                    Entry9.configure(state = "normal")
                    Entry10.configure(state = "normal")
                    Entry9.set('Abscond')
                elif Temp == 'Termination':
                    Entry9.configure(state = "normal")
                    Entry10.configure(state = "normal")
                    Entry9.set('Termination')
                else:
                    Entry9.set('Voluntary')
                    Entry9.configure(state = "disabled")
                    Entry10.configure(state = "disabled")

                RegTypeSelected(Event)

            elif Temp != "" and (Temp != 'Resigned' or Temp != 'Abscond' or Temp != 'Termination'):
                Entry9.configure(state = "normal")
                Entry10.configure(state = "normal")
                Entry9.set('Voluntary')
                Label13.configure(text="Actual LWD")
                Entry13.delete(0,END)
                Entry13.configure(state = "disabled")
                
                RegTypeSelected(Event)
                Entry9.configure(state = "disabled")
                Entry10.configure(state = "disabled")
                                
        Label1 = Label(Can1, text="Employee ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label2 = Label(Can1, text="Employee Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label3 = Label(Can1, text="User ID*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label4_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label4 = Label(Can1, text="DOJ*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label5 = Label(Can1, text="Employee Role*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label6 = Label(Can1, text="Team Name*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label7 = Label(Can1, text="Resignation Initiated on*",width=22,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label7_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label8_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label8 = Label(Can1, text="Policy LWD*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label9 = Label(Can1, text="Resignation Type*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label10 = Label(Can1, text="Resignation Reason*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label11 = Label(Can1, text="Initial Comments",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label12 = Label(Can1, text="Replacement to be raised?*",width=22,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label13_0 = Label(Can1, text="dd-mm-yyyy",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label13 = Label(Can1, text="Actual LWD*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label14 = Label(Can1, text="Employement Status*",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label15 = Label(Can1, text="Final Comments",width=18,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

        def EmpIDValues():
            global Entry1_Values
            if selection == 1:
                Entry1_Values = Queryfun("SELECT EmpID FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination', 'Serving Notice Period', 'Notice Extended');")
                Entry1_Values = [str(x) for x in Entry1_Values]
                Entry1.config(completevalues=Entry1_Values)
            elif selection == 2:
                Entry1_Values = Queryfun("SELECT EmpID FROM tblEmpData WHERE EmpStatus IN ('Serving Notice Period', 'Notice Extended');")
                Entry1_Values = [str(x) for x in Entry1_Values]
                Entry1.config(completevalues=Entry1_Values)

        Entry1_Values = []
        Entry1 = AutocompleteCombobox(Can1, width=33, completevalues=Entry1_Values)
        Entry1_msg = 'This Employee ID is not available in the list, please check!'
        EmpIDValues()
        
        Entry2 = Entry(Can1,textvariable=Var_Entry2,bg="white",font=("Calibri",10),width=31)
        Entry3 = Entry(Can1,textvariable=Var_Entry3,bg="white",font=("Calibri",10),width=31)
        Entry4 = Entry(Can1,textvariable=Var_Entry4,bg="white",font=("Calibri",10),width=31)
        Entry5 = Entry(Can1,textvariable=Var_Entry5,bg="white",font=("Calibri",10),width=31)
        Entry6 = Entry(Can1,textvariable=Var_Entry6,bg="white",font=("Calibri",10),width=31)
        
        today = date.today()
        Entry7 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',maxdate=today)
        Entry7.delete(0, END)
                
        Entry8 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy')
        Entry8.delete(0, END)
        
        Entry9_Values = Queryfun("Select RegType from tblRegTypes;")
        Entry9 = AutocompleteCombobox(Can1, width=33, completevalues=Entry9_Values)
        Entry9_msg = 'This Resignation Type is not available in the list! please check'
        Entry9.bind("<FocusOut>", RegTypeSelected)
        Entry9.bind("<<ComboboxSelected>>", RegTypeSelected)

        Entry10_Values = []
        Entry10 = AutocompleteCombobox(Can1, width=33, completevalues=Entry10_Values)
        Entry10_msg = 'This Resignation Reason is not available in the list! please check'
        
        Entry11 = Text(Can1,bg="white",font=("Calibri",10),width=30,height=3)
        Entry11.bind('<Tab>', lambda event: focusNext(Entry11))
        Entry11.bind('<Shift-Tab>', lambda event: focusPrev(Entry11))

        Entry11_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry11.yview)
        Entry11.configure(yscrollcommand=Entry11_vsb.set)

        Entry12_Values = ['Yes', 'No']
        Entry12 = AutocompleteCombobox(Can1, width=33, completevalues=Entry12_Values)
        Entry12_msg = 'This Selected Option is not available in the list! please check'
        
        Entry13 = DateEntry(Can1,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',maxdate=today)
        Entry13.delete(0, END)
        
        Entry14_Values = Queryfun("Select EmpStatus from tblEmpStatus where EmpStatus NOT IN ('Active', 'Maternity Leave', 'Long Leave', 'Long Sick Leave', 'Career Break');")
        Entry14 = AutocompleteCombobox(Can1, width=33, completevalues=Entry14_Values)
        Entry14_msg = 'This Selected Status is not available in the list! please check'
        Entry14.bind("<FocusOut>", EmpStatusSelected)
        Entry14.bind("<<ComboboxSelected>>", EmpStatusSelected)
        
        Entry15 = Text(Can1,bg="white",font=("Calibri",10),width=30,height=3)
        Entry15.bind('<Tab>', lambda event: focusNext(Entry15))
        Entry15.bind('<Shift-Tab>', lambda event: focusPrev(Entry15))

        Entry15_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry15.yview)
        Entry15.configure(yscrollcommand=Entry15_vsb.set)

        Label1.place(x=80, y=20)
        Label2.place(x=590, y=20)
        Label3.place(x=80, y=70)
        Label4.place(x=590, y=70)
        Label5.place(x=80, y=120)
        Label6.place(x=590, y=120)
        Label7.place(x=50, y=170)
        Label8.place(x=590, y=170)
        Label9.place(x=80, y=220)
        Label10.place(x=590, y=220)
        Label11.place(x=80, y=280)
        Label12.place(x=560, y=280)
        
        Entry1.place(x=230, y=20)
        Entry2.place(x=740, y=20)
        Entry3.place(x=230, y=70)
        Label4_0.place(x=740, y=50)
        Entry4.place(x=740, y=70)
        Entry5.place(x=230, y=120)
        Entry6.place(x=740, y=120)
        Label7_0.place(x=230, y=150)
        Entry7.place(x=230, y=170)
        Label8_0.place(x=740, y=150)
        Entry8.place(x=740, y=170)
        Entry9.place(x=230, y=220)
        Entry10.place(x=740, y=220)
        Entry11.place(x=230, y=270)
        Entry11_vsb.place(x=443, y=270, height=50)
        Entry12.place(x=740, y=280)
        
        if selection == 2:
            Label13.place(x=80, y=345)
            Label14.place(x=590, y=345)
            Label15.place(x=80, y=405)

            Label13_0.place(x=230, y=325)
            Entry13.place(x=230, y=345)
            Entry14.place(x=740, y=345)
            Entry15.place(x=230, y=395)
            Entry15_vsb.place(x=443, y=395, height=50)

        def LeaverEmpIDSelected(event):
            global RegReason
            if Entry1.get() != "":
                if selection == 1:
                    query = "SELECT EXISTS(SELECT 1 FROM tblEmpData WHERE EmpID = '" + Entry1.get() + "' AND EmpStatus IN ('Active', 'Resignation Revoked', 'Maternity Leave', 'Long Leave', 'Long Sick Leave', 'Career Break'));"
                else:
                    query = "SELECT EXISTS(SELECT 1 FROM tblEmpData WHERE EmpID = '" + Entry1.get() + "' AND EmpStatus IN ('Serving Notice Period', 'Notice Extended'));"
                
                EmpIDExists = ViewQueryfun(ProDBPath, query)
                if EmpIDExists[0][0] == 1:
                    Temp = ViewQueryfun(ProDBPath, "SELECT EmpName, UserID, DOJ, Role, Team FROM tblEmpData WHERE EmpID = " + Entry1.get() + ";")

                    Entry2.configure(state = "normal")
                    Entry2.delete(0,END)
                    Entry2.insert(0,Temp[0][0])
                    Entry2.configure(state = "disabled")
                    
                    Entry3.configure(state = "normal")
                    Entry3.delete(0,END)
                    Entry3.insert(0,Temp[0][1])
                    Entry3.configure(state = "disabled")
                    
                    Entry4.configure(state = "normal")
                    Entry4.delete(0,END)
                    Entry4.insert(0,Temp[0][2])
                    Entry4.configure(state = "disabled")

                    Entry5.configure(state = "normal")
                    Entry5.delete(0,END)
                    Entry5.insert(0,Temp[0][3])
                    Entry5.configure(state = "disabled")

                    Entry6.configure(state = "normal")
                    Entry6.delete(0,END)
                    Entry6.insert(0,Temp[0][4])
                    Entry6.configure(state = "disabled")
                    
                    if selection == 2:
                        Temp = ViewQueryfun(ProDBPath, "SELECT * FROM tblRegData WHERE EmpID = " + Entry1.get() + " ORDER BY RegID DESC;")

                        Entry7.configure(state = "normal")
                        Entry7.delete(0,END)
                        Entry7.set_date(Temp[0][2])
                        Entry7.configure(state = "disabled")
                                            
                        Entry8.configure(state = "normal")
                        Entry8.delete(0,END)
                        Entry8.set_date(Temp[0][3])
                        Entry8.configure(state = "disabled")

                        Entry9.configure(state = "normal")
                        Entry9.set("")
                        Entry9.set(Temp[0][4])
                        Entry9.configure(state = "disabled")
                        RegTypeSelected(Event)
                        
                        Entry10.configure(state = "normal")
                        Entry10.set("")
                        Entry10.set(Temp[0][5])
                        Entry10.configure(state = "disabled")
                        RegReason = Temp[0][5]

                        Entry11.configure(state = "normal")
                        Entry11.delete(1.0,END)
                        Entry11.insert(1.0,Temp[0][6])
                        Entry11.configure(state = "disabled")
                        Entry11.configure(bg='grey95')

                        Entry12.configure(state = "normal")
                        Entry12.set("")
                        Entry12.set(Temp[0][7])
                        Entry12.configure(state = "disabled")
                        
                        Entry13.configure(state = "normal")
                        Entry13.delete(0,END)

                        if Temp[0][8] != None:
                            Entry13.insert(0,Temp[0][8])
                            
                        Entry14.configure(state = "normal")
                        Entry14.set("")
                        Entry14.set(Temp[0][9])
                        EmpStatusSelected(Event)
                        
                        Entry15.configure(state = "normal")
                        Entry15.delete(1.0,END)
                        if Temp[0][10] != None:
                            Entry15.insert(1.0,Temp[0][10])
                else:
                    messagebox.showerror('Validation Check','This Employee ID is not available! Please Check')
                    Clear()
                
        Entry1.bind("<<ComboboxSelected>>", LeaverEmpIDSelected)
        Entry1.bind("<FocusOut>", LeaverEmpIDSelected)
        EmpStatusSelected(Event)

        def Validate_Clear():
            LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8, Label9, Label10, Label11, Label12, Label13, Label14, Label15]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='#054457')

        def Validate_LeaverSubmit():
            Validate_Clear()
            global Entry1_Values, Entry10_Values
            
            AllLabelList = [Label1, Label9, Label10, Label12, Label14]
            AllEntryList = [Entry1, Entry9, Entry10, Entry12, Entry14]
            AllEntryValues = [Entry1_Values, Entry9_Values, Entry10_Values, Entry12_Values, Entry14_Values]
            AllEntryMessage = [Entry1_msg, Entry9_msg, Entry10_msg, Entry12_msg, Entry14_msg]

            DateLabelList = [Label7, Label8, Label13]
            DateEntryList = [Entry7, Entry8, Entry13]
            
            if selection == 1:
                if Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == ''or Entry9.get() == ''or Entry10.get() == '' or Entry12.get() == '':
                    messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                    return False
            elif selection == 2:
                if Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '' or Entry7.get() == '' or Entry8.get() == ''or Entry9.get() == ''or Entry10.get() == '' or Entry12.get() == '' or Entry14.get() == '':
                    messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                    return False
                if Entry14.get() in ('Abscond', 'Termination', 'Resigned'):
                    if Entry13.get() == '':
                        messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                        return False
        
            Submit = True
            
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                LeaverSubmit()
        
        def LeaverSubmit():
            if selection == 1:
                if Entry9.get() == 'Voluntary':
                    EmpStatus = 'Serving Notice Period'
                    ActualLWD = ''
                else:
                    EmpStatus = Entry9.get()
                    ActualLWD = Entry8.get()

                Record = (Entry1.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(), Entry11.get(1.0, END).strip(), Entry12.get(), ActualLWD, EmpStatus, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                InsertQueryfun(ProDBPath,"INSERT INTO tblRegData (EmpID, RegInitOn, PolicyLWD, RegType, RegReason, InitialComments, ATRRequired, ActualLWD, EmpStatus, CreatedBy, CreatedDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)
                Record = (EmpStatus, Entry1.get())
                InsertQueryfun(ProDBPath,"UPDATE tblEmpData SET EmpStatus = (?) WHERE EmpID = (?);", Record)

                if Entry12.get() == 'Yes':
                    Record = (Entry1.get(), 'ATR Required', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                    InsertQueryfun(ProDBPath,"INSERT INTO tblATRRequired (EmpID, Status, UpdatedBy, UpdatedDate) VALUES (?, ?, ?, ?);", Record)

                Record = ('Red', EmpStatus, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                InsertQueryfun(ProDBPath,"UPDATE tblRAGStatus SET RAGStatus = (?), Comments = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)                

                if Entry9.get() == 'Voluntary':
                    Record = ('Serving Notice Period', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET VacancyStatus = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)
                elif Entry9.get() in ('Abscond', 'Termination'):
                    Record = ('', '', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET SuccessorID1 = (?), SuccessorName1 = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE SuccessorID1 = (?);", Record)    
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET SuccessorID2 = (?), SuccessorName2 = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE SuccessorID2 = (?);", Record)    
                    
                    Record = (Entry9.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET VacancyStatus = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)
                
                    ######## This below line is for Attendance Correction if any future date was updated ##########
                    AttendanceCorrection_Resigned(Entry1.get(), Entry8.get_date())

                messagebox.showinfo('Completed','Leaver Details Added Successfully!')
                LeaverCancel()

            elif selection == 2:
                EmpStatus = Entry14.get()
                Record = (Entry1.get(), Entry7.get(), Entry8.get(), Entry9.get(), Entry10.get(), Entry11.get(1.0, END), Entry12.get(), Entry13.get(), EmpStatus, Entry15.get(1.0, END), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                InsertQueryfun(ProDBPath,"INSERT INTO tblRegData (EmpID, RegInitOn, PolicyLWD, RegType, RegReason, InitialComments, ATRRequired, ActualLWD, EmpStatus, FinalComments, CreatedBy, CreatedDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Record)

                if Entry14.get() == 'Resignation Revoked':
                    EmpStatus = 'Active'
                    
                Record = (EmpStatus, Entry1.get())
                InsertQueryfun(ProDBPath,"UPDATE tblEmpData SET EmpStatus = (?) WHERE EmpID = (?);", Record)

                if Entry14.get() == 'Resignation Revoked':
                    RAGStatus = 'Green'
                else:
                    RAGStatus = 'Red'

                Record = (RAGStatus, EmpStatus, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                InsertQueryfun(ProDBPath,"UPDATE tblRAGStatus SET RAGStatus = (?), Comments = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)                
                
                if Entry14.get() in ('Serving Notice Period', 'Notice Extended'):
                    Record = ('Serving Notice Period', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET VacancyStatus = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)
                elif Entry14.get() == 'Resignation Revoked':
                    Record = ('Unlikely', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET VacancyStatus = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)
                elif Entry14.get() in ('Abscond', 'Termination', 'Resigned'):
                    Record = ('', '', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET SuccessorID1 = (?), SuccessorName1 = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE SuccessorID1 = (?);", Record)    
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET SuccessorID2 = (?), SuccessorName2 = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE SuccessorID2 = (?);", Record)    

                    Record = (Entry14.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry1.get())
                    InsertQueryfun(ProDBPath,"UPDATE tblSuccessorPlan SET VacancyStatus = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);", Record)
                    
                    ######## This below line is for Attendance Correction if any future date was updated ##########
                    AttendanceCorrection_Resigned(Entry1.get(), Entry13.get_date())

                messagebox.showinfo('Completed','Leaver Details Updated Successfully!')
                LeaverCancel()

            EmpIDValues()

        def LeaverCancel():
            Clear()

        def Clear():
            Entry1.delete(0, END)
            Entry2.configure(state = "normal")
            Entry3.configure(state = "normal")
            Entry4.configure(state = "normal")
            Entry5.configure(state = "normal")
            Entry6.configure(state = "normal")
            Entry7.configure(state = "normal")
            Entry8.configure(state = "normal")
            Entry9.configure(state = "normal")
            Entry10.configure(state = "normal")
            Entry11.configure(state = "normal")
            Entry11.configure(bg = "white")
            Entry12.configure(state = "normal")
            Entry2.delete(0, END)
            Entry3.delete(0, END)
            Entry4.delete(0, END)
            Entry5.delete(0, END)
            Entry6.delete(0, END)
            Entry7.delete(0, END)
            Entry8.delete(0, END)
            Entry9.set('')
            Entry10.set('')
            Entry11.delete(1.0, END)
            Entry12.set('')
                        
            if selection == 2:
                Entry13.configure(state = "normal")
                Entry13.delete(0, END)
                Entry14.set('')
                EmpStatusSelected(Event)
                Entry15.delete(1.0, END)
        
        Image_Submit= PhotoImage(file=r)
        Image_Reset= PhotoImage(file=r')

        SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_LeaverSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
        CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:LeaverCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
        SubmitB.image = Image_Submit
        CancelB.image = Image_Reset

        SubmitB.place(x=400, y=460)
        CancelB.place(x=600, y=460)
    
    Leaver_Option = IntVar()
    R1 = Radiobutton(LeaverCan, text="New", variable=Leaver_Option, value=1,command=SelectLeaver, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    R2 = Radiobutton(LeaverCan, text="Update", variable=Leaver_Option, value=2,command=SelectLeaver, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    
    R1.place(x=400, y=10)
    R2.place(x=600, y=10)

########################################################## This is ATR Page ########################################################

def ATRPage(Home):
    ATRCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    ATRCan.place(x=150, y=10)
    
    def SelectATR():
        selection = ATR_Option.get()
        
        Var_Entry2 = StringVar()
        Var_Entry3 = StringVar()
        Var_Entry8 = StringVar()
        Var_Entry9 = StringVar()
        Var_Entry10 = StringVar()
        Var_Entry11 = StringVar()
        Var_Entry12 = StringVar()
        Var_Entry13 = StringVar()
        Var_Entry15 = StringVar()
        
        #this is for New positions
        if selection == 1:
            Can1=Canvas(ATRCan,bg="white", width=1020, height=520, highlightthickness=0)
            Can1.place(x=10, y=50)
            
            Label2_0 = Label(Can1, text="dd-mm-yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
            Label2 = Label(Can1, text="Raised Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
            Label3 = Label(Can1, text="No of Positions*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
            Label4 = Label(Can1, text="Employee Role*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
            Label5 = Label(Can1, text="Business Division*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
            Label6 = Label(Can1, text="Team Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
            Label7 = Label(Can1, text="Comments",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

            today = date.today()
            Entry2 = DateEntry(Can1,textvariable=Var_Entry2,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',maxdate=today)
            Entry2.delete(0, END)
            
            Entry3 = Entry(Can1,validate="key",textvariable=Var_Entry3,bg="white",font=("Calibri",10,"bold"),width=31)
            Entry3['validatecommand'] = (Entry3.register(AcceptNum),'%P','%d')
            
            Entry4_Values = Queryfun("Select Role from tblRoles;")
            Entry4 = AutocompleteCombobox(Can1, width=33, completevalues=Entry4_Values)
            Entry4_msg = 'This Employee Role is not available in the list! please check'
            
            Entry5_Values = Queryfun("Select BusinessUnit from tblBusinessUnits;")
            Entry5 = AutocompleteCombobox(Can1, width=33, completevalues=Entry5_Values)
            Entry5_msg = 'This Business Division is not available in the list! please check'
            
            Entry6_Values=Queryfun("select TeamName from tblTeams;")
            Entry6 = AutocompleteCombobox(Can1, width=33, completevalues=Entry6_Values)
            Entry6_msg = 'This Team Name is not available in the list! please check'
            
            Entry7 = Text(Can1,bg="white",font=("Calibri",10,"bold"),width=30,height=3)
            Entry7.bind('<Tab>', lambda event: focusNext(Entry7))
            Entry7.bind('<Shift-Tab>', lambda event: focusPrev(Entry7))

            Entry7_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry7.yview)
            Entry7.configure(yscrollcommand=Entry7_vsb.set)

            Label2.place(x=110, y=40)
            Label3.place(x=570, y=40)
            Label4.place(x=110, y=120)
            Label5.place(x=570, y=120)
            Label6.place(x=110, y=200)
            Label7.place(x=570, y=200)

            Label2_0.place(x=235, y=20)
            Entry2.place(x=235, y=40)
            Entry3.place(x=695, y=40)
            Entry4.place(x=235, y=120)
            Entry5.place(x=695, y=120)
            Entry6.place(x=235, y=200)
            Entry7.place(x=695, y=190)
            Entry7_vsb.place(x=908, y=190, height=50)
            
        #this is for Replacements
        elif selection == 2:
            Can2=Canvas(ATRCan,bg="white", width=1020, height=520, highlightthickness=0)
            Can2.place(x=10, y=50)
            
            Label8_0 = Label(Can2, text="dd-mm-yyyy",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
            Label8 = Label(Can2, text="Raised Date*",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
            Label15 = Label(Can2, text="No of Positions*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
            Label9 = Label(Can2, text="Reliever ID*",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')   
            Label10 = Label(Can2, text="Reliever Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
            Label11 = Label(Can2, text="Reliever Role*",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
            Label12 = Label(Can2, text="Business Division*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
            Label13 = Label(Can2, text="Team Name*",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
            Label14 = Label(Can2, text="Comments",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
            Label16 = Label(Can2, text="ATR Status*",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')

            today = date.today()
            Entry8 = DateEntry(Can2,textvariable=Var_Entry8,width=33,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',maxdate=today)
            Entry8.delete(0, END)
            
            Entry15 = Entry(Can2,textvariable=Var_Entry15,bg="white",font=("Calibri",10,"bold"),width=28)
            Entry15.insert(0,"1")
            Entry15.configure(state="disabled")

            Entry9 = Entry(Can2,textvariable=Var_Entry9,bg="white",font=("Calibri",10,"bold"),width=30)
            Entry10 = Entry(Can2,textvariable=Var_Entry10,bg="white",font=("Calibri",10,"bold"),width=28)
            Entry11 = Entry(Can2,textvariable=Var_Entry11,bg="white",font=("Calibri",10,"bold"),width=30)
            Entry12 = Entry(Can2,textvariable=Var_Entry12,bg="white",font=("Calibri",10,"bold"),width=28)
            Entry13 = Entry(Can2,textvariable=Var_Entry13,bg="white",font=("Calibri",10,"bold"),width=30)

            Entry9.config(state='disabled')
            Entry10.config(state='disabled')
            Entry11.config(state='disabled')
            Entry12.config(state='disabled')
            Entry13.config(state='disabled')

            Entry14 = Text(Can2,bg="white",font=("Calibri",10,"bold"),width=26,height=3)
            Entry14.bind('<Tab>', lambda event: focusNext(Entry14))
            Entry14.bind('<Shift-Tab>', lambda event: focusPrev(Entry14))

            Entry14_vsb = ttk.Scrollbar(Can2, orient="vertical", command=Entry14.yview)
            Entry14.configure(yscrollcommand=Entry14_vsb.set)

            Entry16_Values = ['Required', 'Not Required']
            Entry16 = AutocompleteCombobox(Can2, width=33, completevalues=Entry16_Values)
            Entry16_msg = 'This option is not available in the list! please check'
            
            Label8.place(x=20, y=20)
            Label15.place(x=300, y=20)
            Label9.place(x=20, y=100)
            Label10.place(x=300, y=100)
            Label11.place(x=20, y=180)
            Label12.place(x=300, y=180)
            Label13.place(x=20, y=260)
            Label14.place(x=300, y=260)
            Label16.place(x=20, y=340)

            Label8_0.place(x=20, y=60)
            Entry8.place(x=20, y=40)
            Entry15.place(x=300, y=40)
            Entry9.place(x=20, y=120)
            Entry10.place(x=300, y=120)
            Entry11 .place(x=20, y=200)
            Entry12.place(x=300, y=200)
            Entry13.place(x=20, y=280)
            Entry14.place(x=300, y=280)
            Entry14_vsb.place(x=485, y=280, height=50)
            Entry16.place(x=20, y=360)

            def RelieverTreeView():
                style = ttk.Style()
                style.theme_use('default')

                arrlbHeader = ["Reliever Name", "Team", "Days Elapsed", "Reliever ID"]
                RelieverTree = MyTreeview(Can2, columns=arrlbHeader, show="headings", height=17)
                RelieverTree.column("#1", anchor=CENTER, width=150)
                RelieverTree.heading("#1", text="Reliever Name")
                RelieverTree.column("#2", anchor=CENTER, width=190)
                RelieverTree.heading("#2", text="Team")
                RelieverTree.column("#3", anchor=CENTER, width=110)
                RelieverTree.heading("#3", text="Resigned On")
                RelieverTree.column("#4", minwidth=0, width=0)
                
                arrSortType = ["name", "name", "num", "num"]
                for iCount in range(len(arrlbHeader)):
                    strHdr = arrlbHeader[iCount]
                    RelieverTree.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
                    RelieverTree.column(arrlbHeader[iCount], stretch=True)

                RelieverTree.place(x=550, y=30)

                Reliever_vsb2 = ttk.Scrollbar(Can2, orient="vertical", command=RelieverTree.yview)
                Reliever_vsb2.place(x=1000, y=30, height=360)
                RelieverTree.configure(yscrollcommand=Reliever_vsb2.set)

                query = """SELECT (SELECT EmpName FROM tblEmpData AS Y WHERE Y.EmpID = B.EmpID) AS EmpName, 
                            (SELECT Team FROM tblEmpData AS Z WHERE Z.EmpID = B.EmpID) AS Team, RegInitOn, B.EmpID FROM tblATRRequired AS B
                            LEFT JOIN tblRegData as C
                            ON B.EmpID = C.EmpID
                            GROUP BY B.EmpID HAVING Status = 'ATR Required' AND ATRReqID = MAX(ATRReqID);"""
                conn = sqlite3.connect(ProDBPath)
                df_Reliever = pd.read_sql_query(query, conn)
                conn.close()
                df_Reliever['Today'] = date.today()
                df_Reliever['RegInitOn'] = pd.to_datetime(df_Reliever['RegInitOn'], format='%d-%m-%Y')
                df_Reliever['Today'] = pd.to_datetime(df_Reliever['Today'], format='%Y-%m-%d')
                df_Reliever['Days Elapsed'] = (df_Reliever['Today'] - df_Reliever['RegInitOn']).astype('str').str.replace('days', '').str.strip()
                df_Reliever['Days Elapsed'] = df_Reliever['Days Elapsed'].astype('int')
                df_Reliever = df_Reliever[['EmpName', 'Team', 'Days Elapsed', 'EmpID']]
                df_Reliever_List = df_Reliever.values.tolist()

                style = ttk.Style()
                style.theme_use('default')
                style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
                style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
                style.map('Treeview', background=[('selected', 'green')])

                for row in df_Reliever_List:
                    RelieverTree.insert("", END, values=row)
                
                def OnClick(event, treename):
                    item = treename.selection()
                    
                    for i in item:
                        Entry9.configure(state = "normal")
                        Entry9.delete(0,END)
                        Entry9.insert(0,treename.item(i, "values")[3])
                        Entry9.configure(state = "disabled")
                        
                        Entry10.configure(state = "normal")
                        Entry10.delete(0,END)
                        Entry10.insert(0,treename.item(i, "values")[0])
                        Entry10.configure(state = "disabled")

                        Temp = treename.item(i, "values")[3]
                        result = ViewQueryfun(ProDBPath, "SELECT Role, BusinessUnit, Team FROM tblEmpData WHERE EmpID = " + Temp + ";")

                        Entry11.configure(state = "normal")
                        Entry11.delete(0,END)
                        Entry11.insert(0,result[0][0])
                        Entry11.configure(state = "disabled")

                        Entry12.configure(state = "normal")
                        Entry12.delete(0,END)
                        Entry12.insert(0,result[0][1])
                        Entry12.configure(state = "disabled")

                        Entry13.configure(state = "normal")
                        Entry13.delete(0,END)
                        Entry13.insert(0,result[0][2])
                        Entry13.configure(state = "disabled")

                RelieverTree.bind("<ButtonRelease-1>", lambda event: OnClick(event, treename=RelieverTree))

            RelieverTreeView()

        #this is for Search ATR
        else:
            Entry1.delete(0, END)
            C1.deselect()
            Can3=Canvas(ATRCan,bg="white", width=1020, height=520, highlightthickness=0)
            Can3.place(x=10, y=50)

            global Searched
            Searched = False

            def Search_Submit():
                global Searched
                if SearchEntry1.get() != '':
                    ATRIDExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblATR WHERE ATRID IN ('" + SearchEntry1.get().upper() + "', 'R" + SearchEntry1.get().upper() + "'));")
                    if ATRIDExists[0][0] == 1:
                        Searched = True
                        ATRDataFilter()
                    else:
                        messagebox.showerror('No ATR ID','This typed Review ID is not available!')
                else:
                    messagebox.showerror('Enter ATR ID','Please Enter Review ID to Search!')

            def Search_Cancel():
                global Searched
                SearchEntry1.delete(0,END)
                if Searched:
                    Searched = False
                    ATRDataFilter()
                else:
                    messagebox.showwarning('Not Filtered','No data filtered to clear!')

            SearchLabel1 = Label(Can3, text="ATR ID",width=10,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"),anchor='e')
            SearchEntry1 = Entry(Can3, validate='key', bg="white",font=("Calibri",12,"bold"), width=15)
            
            Image1= PhotoImage(file=)
            Image2= PhotoImage(file=)

            SearchButton1 = Button(Can3, image=Image1, fg='black', bg="#006E8E", width=25, height=25, command=lambda:Search_Submit(), borderwidth=0, cursor='hand2', relief='flat')
            SearchButton1.image = Image1

            SearchButton2 = Button(Can3, image=Image2, fg='black', bg="#006E8E", width=25, height=25, command=lambda:Search_Cancel(), borderwidth=0, cursor='hand2', relief='flat')
            SearchButton2.image = Image2

            SearchLabel1.place(x=360, y=10)
            SearchEntry1.place(x=450, y=10)

            SearchButton1.place(x=592, y=8)
            SearchButton2.place(x=627, y=8)

            arrlbHeader1 = ["ATR ID", "Emp ID", "Employee Name", "DOJ", "Role", "Team"]
            ATRtreeExpand = MyTreeview(Can3, columns=arrlbHeader1, show="headings", height=8)
            arrColWidth = [50, 50, 200, 70, 200, 200]
            arrColAlignment = ["center", "center", "center", "center", "center", "center"]
            arrSortType = ["name", "num", "name", "name", "name", "name"]

            for iCount in range(len(arrlbHeader1)):
                strHdr = arrlbHeader1[iCount]
                ATRtreeExpand.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
                ATRtreeExpand.column(arrlbHeader1[iCount], width=arrColWidth[iCount], stretch=True, anchor=arrColAlignment[iCount])

            ATRtreeExpand.place(x=20, y=320)
            
            ATRtreeExpand_vsb = ttk.Scrollbar(Can3, orient="vertical", command=ATRtreeExpand.yview)
            ATRtreeExpand_vsb.place(x=792, y=320, height=180)
            ATRtreeExpand.configure(yscrollcommand=ATRtreeExpand_vsb.set)

            def OnClick_Expand(event, treename):
                ATRtreeExpand.delete(*ATRtreeExpand.get_children())
                item = treename.selection()
                for i in item:
                    query_ATRExpand = """SELECT A.ATRID, B.EmpID, C.EmpName, C.DOJ, C.Role, C.Team FROM tblATR as A
                                        LEFT JOIN tblATRPosition as B ON A.ATRID = B.ATRID
                                        LEFT JOIN tblEmpData as C ON B.EmpID = C.EmpID
                                        WHERE A.ATRID = '""" + treename.item(i, "values")[0] + """';"""
                    conn = sqlite3.connect(ProDBPath)
                    df_ATRExpand = pd.read_sql_query(query_ATRExpand, conn)
                    conn.close()
                    df_ATRExpand_List = df_ATRExpand.values.tolist()

                    style = ttk.Style()
                    style.theme_use('default')
                    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
                    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
                    style.map('Treeview', background=[('selected', 'green')])

                    ATRtreeExpand.tag_configure("evenrow",background='white')
                    ATRtreeExpand.tag_configure("oddrow",background='lightblue')
                    rowid = 0
                    for row in df_ATRExpand_List:
                        if row[0] != None:
                            rowid = rowid + 1
                            if rowid % 2 == 0:
                                ATRtreeExpand.insert("", END, values=row, tags=('oddrow',))
                            else:
                                ATRtreeExpand.insert("", END, values=row, tags=('evenrow',))

            def ATRDataFilter():
                if SearchEntry1.get() == '':
                    query_ATRData = """SELECT A.ATRID, A.ATRType, ATRIJP, RaisedDate, NoofPositions, COUNT(B.ATRID) as PositionsClosed, Status, 
                                        EmpOrRelieverRole, Team, RelieverName FROM tblATR as A
                                        LEFT JOIN tblATRPosition as B
                                        ON A.ATRID = B.ATRID
                                        GROUP BY A.ATRID;"""
                else:
                    query_ATRData = """SELECT A.ATRID, A.ATRType, ATRIJP, RaisedDate, NoofPositions, COUNT(B.ATRID) as PositionsClosed, Status, 
                                        EmpOrRelieverRole, Team, RelieverName FROM tblATR as A
                                        LEFT JOIN tblATRPosition as B
                                        ON A.ATRID = B.ATRID
                                        GROUP BY A.ATRID
                                        HAVING A.ATRID IN ('""" + SearchEntry1.get().upper() + """', 'R""" + SearchEntry1.get().upper() + """');"""

                conn = sqlite3.connect(ProDBPath)
                df_ATRData = pd.read_sql_query(query_ATRData, conn)
                conn.close()
                df_ATRData_List = df_ATRData.values.tolist()

                arrlbHeader1 = ["ATR ID", "ATR Type", "IJP", "Created On", "# Positions", "# Closed", "Status", "Role", "Team", "Reliever Name"]
                Reportstree1 = MyTreeview(Can3, columns=arrlbHeader1, show="headings", height=12)
                arrColWidth = [50, 80, 40, 80, 70, 70, 50, 180, 180, 170]
                arrColAlignment = ["center", "center", "center", "center", "center", "center", "center", "center", "center", "center"]
                arrSortType = ["name", "name", "name", "name", "num", "num", "name", "name", "name", "name"]

                for iCount in range(len(arrlbHeader1)):
                    strHdr = arrlbHeader1[iCount]
                    Reportstree1.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
                    Reportstree1.column(arrlbHeader1[iCount], width=arrColWidth[iCount], stretch=True, anchor=arrColAlignment[iCount])

                Reportstree1.place(x=20, y=40)
                
                Reportstree1_vsb = ttk.Scrollbar(Can3, orient="vertical", command=Reportstree1.yview)
                Reportstree1_vsb.place(x=990, y=40, height=260)
                Reportstree1.configure(yscrollcommand=Reportstree1_vsb.set)

                Reportstree1.bind("<<TreeviewSelect>>", lambda event: OnClick_Expand(event, treename=Reportstree1))

                style = ttk.Style()
                style.theme_use('default')
                style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
                style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
                style.map('Treeview', background=[('selected', 'green')])

                Reportstree1.tag_configure("evenrow",background='white')
                Reportstree1.tag_configure("oddrow",background='lightblue')
                rowid = 0
                for row in df_ATRData_List:
                    if row[0] != None:
                        rowid = rowid + 1
                        if rowid % 2 == 0:
                            Reportstree1.insert("", END, values=row, tags=('oddrow',))
                        else:
                            Reportstree1.insert("", END, values=row, tags=('evenrow',))

            ATRDataFilter()
        
        def Validate_Clear():
            if selection == 1:
                LabelList = [Label2, Label3, Label4, Label5, Label6, Label7]
            elif selection == 2:
                LabelList = [Label8, Label9, Label10, Label11, Label12, Label13, Label14, Label15, Label16]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='#054457')

        def Validate_ATRSubmit():
            Validate_Clear()
            
            if selection == 1:
                AllLabelList = [Label4, Label5, Label6]
                AllEntryList = [Entry4, Entry5, Entry6]
                AllEntryValues = [Entry4_Values, Entry5_Values, Entry6_Values]
                AllEntryMessage = [Entry4_msg, Entry5_msg, Entry6_msg]

                DateLabelList = [Label2]
                DateEntryList = [Entry2]

            elif selection == 2:
                AllLabelList = [Label16]
                AllEntryList = [Entry16]
                AllEntryValues = [Entry16_Values]
                AllEntryMessage = [Entry16_msg]

                DateLabelList = [Label8]
                DateEntryList = [Entry8]

            if selection == 1:
                if Entry1.get().strip() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get() == '':
                    messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                    return False

                ATRID = ViewQueryfun(ProDBPath,"SELECT * FROM tblATR WHERE ATRID = '" + Entry0.get() + Entry1.get().strip() + "';")

                if len(ATRID) > 0:
                    messagebox.showerror('Duplicate ID','This ATR ID is already created, please check!')
                    return False

            elif selection == 2:
                if Entry16.get() == 'Required':
                    if Entry1.get().strip() == '' or Entry8.get() == '' or Entry15.get() == '' or Entry9.get() == '' or Entry10.get() == '' or Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == '' or Entry16.get() == '':
                        messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                        return False

                    ATRID = ViewQueryfun(ProDBPath,"SELECT * FROM tblATR WHERE ATRID = '" + Entry0.get() + Entry1.get().strip() + "';")

                    if len(ATRID) > 0:
                        messagebox.showerror('Duplicate ID','This ATR is ID already created, please check!')
                        return False

                elif Entry16.get() == 'Not Required':
                    if Entry9.get() == '' or Entry10.get() == '' or Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == '':
                        messagebox.showerror('Validation Check','Reliever details not selected!')
                        return False

                else:
                    messagebox.showerror('Validation Check','ATR Status should not be left blank or invalid!')
                    return False

            Submit = True
            
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

            if Submit:
                ATRSubmit()

        def ATRSubmit():
            if selection == 1:
                ATRType = 'New Role'      
                        
                record = (Entry0.get() + Entry1.get().strip(), ATRType, IJP_Check.get(), Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(1.0, END).strip(), 'Open', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                query = "INSERT INTO tblATR (ATRID,	ATRType, ATRIJP, RaisedDate, NoofPositions, EmpOrRelieverRole, BusinessDivision, Team, Comments, Status, CreatedBy, CreatedDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);"
                AddQueryfun(ProDBPath, query, record)
                messagebox.showinfo('Completed','ATR Created Successfully!')
                ATRCancel()

            elif selection == 2:
                ATRType = 'Replacement'
                if Entry16.get() == 'Required':
                    record = (Entry0.get() + Entry1.get().strip(), ATRType, IJP_Check.get(), Entry8.get(), Entry15.get(), Entry11.get(), Entry12.get(), Entry13.get(), Entry14.get(1.0, END), Entry9.get(), Entry10.get(), 'Open', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                    query = "INSERT INTO tblATR (ATRID,	ATRType, ATRIJP, RaisedDate, NoofPositions, EmpOrRelieverRole, BusinessDivision, Team, Comments, RelieverID, RelieverName, Status, CreatedBy, CreatedDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);"
                    AddQueryfun(ProDBPath, query, record)

                    Record = (Entry9.get(), 'ATR Created', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                    InsertQueryfun(ProDBPath,"INSERT INTO tblATRRequired (EmpID, Status, UpdatedBy, UpdatedDate) VALUES (?, ?, ?, ?);", Record)

                    messagebox.showinfo('Completed','ATR Created Successfully!')
                    ATRCancel()

                elif Entry16.get() == 'Not Required':
                    Record = (Entry9.get(), 'ATR Not Required', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                    InsertQueryfun(ProDBPath,"INSERT INTO tblATRRequired (EmpID, Status, UpdatedBy, UpdatedDate) VALUES (?, ?, ?, ?);", Record)

                    messagebox.showinfo('Completed',"ATR Status Changed to 'Not Required'")
                    ATRCancel()

                else:
                    messagebox.showerror('Validation Check','ATR Status should not be left blank or invalid!')
                    return False

        def ATRCancel():
            Clear()

        def Clear():
            Entry1.delete(0, END)
            C1.deselect()
            if selection == 1:
                Entry2.delete(0, END)
                Entry3.delete(0, END)
                Entry4.set('')
                Entry5.set('')
                Entry6.set('')
                Entry7.delete(1.0, END)

            if selection == 2:
                Entry8.delete(0, END)

                Entry9.config(state='normal')
                Entry10.config(state='normal')
                Entry11.config(state='normal')
                Entry12.config(state='normal')
                Entry13.config(state='normal')

                Entry9.delete(0, END)
                Entry10.delete(0, END)
                Entry11.delete(0, END)
                Entry12.delete(0, END)
                Entry13.delete(0, END)
                Entry14.delete(1.0, END)
                Entry16.set('')

                Entry9.config(state='disabled')
                Entry10.config(state='disabled')
                Entry11.config(state='disabled')
                Entry12.config(state='disabled')
                Entry13.config(state='disabled')

                RelieverTreeView()
        
        if selection == 1 or selection == 2:
            Image_Submit= PhotoImage(file=)
            Image_Reset= PhotoImage(file=r)

            SubmitB = Button(ATRCan, image=Image_Submit, width=90, height=45, command=lambda:Validate_ATRSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
            CancelB = Button(ATRCan, image=Image_Reset, width=90, height=45, command=lambda:ATRCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
            SubmitB.image = Image_Submit
            CancelB.image = Image_Reset

            SubmitB.place(x=400, y=490)
            CancelB.place(x=600, y=490)
    
    Var_Entry0 = StringVar()
    Var_Entry1 = StringVar()

    ATR_Option = IntVar()
    R1 = Radiobutton(ATRCan, text="New Position", variable=ATR_Option, value=1,command=SelectATR, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    R2 = Radiobutton(ATRCan, text="Replacement", variable=ATR_Option, value=2,command=SelectATR, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    R3 = Radiobutton(ATRCan, text="Search ATR", variable=ATR_Option, value=3,command=SelectATR, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    
    Label1 = Label(ATRCan, text="ATR Number*", bg='#006E8E', fg='white', font=("Calibri",12,"bold"))
    Entry0 = Entry(ATRCan,textvariable=Var_Entry0,bg="white",font=("Calibri",12,"bold"),width=2)
    Entry0.insert(0, 'R')
    Entry0.config(state='disabled')
    Entry1 = Entry(ATRCan,validate="key",textvariable=Var_Entry1,bg="white",font=("Calibri",12,"bold"),width=15)
    Entry1['validatecommand'] = (Entry1.register(AcceptNum),'%P','%d')
    
    IJP_Check = StringVar(value='No')
    C1 = Checkbutton(ATRCan, text = "IJP Role*", variable = IJP_Check, onvalue = "Yes", offvalue = "No", bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    
    R1.place(x=20, y=10)
    R2.place(x=170, y=10)
    Label1.place(x=330, y=10)
    Entry0.place(x=439, y=10)
    Entry1.place(x=460, y=10)
    C1.place(x=600, y=10)
    R3.place(x=900, y=10)

########################################################## This is Reports Page ########################################################

def ReportsCheck(Home):
    if Reports_Access == 'Yes':
        Reports(Home)
    else:
        messagebox.showerror('No Access',"You are not authorised to access 'Reports' module! Contact Innovation Team")

def Reports(Home):
    ReportsCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    ReportsCan.place(x=150, y=10)

    HLabel1 = Label(ReportsCan, text="Reports",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",16,"bold"),anchor='center')
    HLabel1.place(x=420, y=10)
    
    Can1=Canvas(ReportsCan,bg="white", width=1020, height=560, highlightthickness=0)
    Can1.place(x=10, y=50)

    frame1=Frame(Can1,bg="white", width=1020, height=1000)
    frame1.place(x=0, y=55)
    
    Can2=Canvas(frame1,bg="white", width=1002, height=1000, highlightthickness=0)
    Can2.place(x=0, y=0)
    
    vbar=Scrollbar(frame1,orient=VERTICAL,command=Can2.yview)
    vbar.place(x=1002, y=0, height=508)
    Can2.config(yscrollcommand=vbar.set)
    Can2.bind('<Configure>', lambda e : Can2.configure(scrollregion=Can2.bbox("all")))
    
    frame2=Frame(Can2,bg="white", width=1000, height=1400)
    Can2.create_window((0,0), window=frame2, anchor='nw')
    
    Header1 = Label(Can1, text="Raw Reports",width=15,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"),anchor='w')
    Entry1_Values = ['Employee Data', 'Personal Data', 'Leave Data', 'Attrition Data', 'ATR Data', 'Teams List', 'Team Leaders List', 'Attendance Report']
    Entry1 = AutocompleteCombobox(Can1, width=18, completevalues=Entry1_Values, font=("Calibri",10,"bold"))
    Entry1_msg = 'This typed Report is not available in the list, please check!'

    Header2 = Label(Can1, text="Select Location",width=15,height=1,fg="#054457", bg="white",font=("Calibri",12,"bold"),anchor='w')
    Entry2_Values = ['All', 'Bangalore', 'Chennai']
    Entry2 = AutocompleteCombobox(Can1, width=18, completevalues=Entry2_Values, font=("Calibri",10,"bold"))
    Entry2_msg = 'This typed Location is not available in the list, please check!'
    Entry2.set('All')

    Header3 = Label(frame2, text="Team wise Head Count",width=20,height=1,fg="#054457", bg="white",font=("Calibri",11,"bold"),anchor='w')
    Header4 = Label(frame2, text="Role wise Head Count",width=20,height=1,fg="#054457", bg="white",font=("Calibri",11,"bold"),anchor='w')
    
    Header1.place(x=790, y=5)
    Entry1.place(x=790, y=30)

    Header2.place(x=40, y=5)
    Entry2.place(x=40, y=30)
    
    def RawReports():
        Header1.config(foreground='#054457')
        Submit = True
        Condition = Entry1.get()
        if Condition == '':
            messagebox.showerror('Validation Check','Select a report!')
            Submit = False
            return False
        else:
            result = DropDown_Validation(Entry1_Values, Entry1)
            if result == 'Failed':
                Header1.config(foreground='red')
                Entry1.focus_set()
                messagebox.showerror('Validation Check',Entry1_msg)
                Submit = False
                
        if Submit:
            if Condition == 'Employee Data':
                query_EmpData = """SELECT A.EmpID, A.EmpName, A.UserID, B.OfficialEmail, A.DOJ, B.Gender, A.Location, A.Role, 
                                    A.Team, A.BusinessUnit, A.TeamLeader, A.LMName, A.EmpStatus FROM tblEmpData as A
                                    LEFT JOIN tblPersonalData as B
                                    ON A.EmpID = B.EmpID
                                    WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"""
                conn = sqlite3.connect(ProDBPath)
                df_EmpData = pd.read_sql_query(query_EmpData, conn)
                conn.close()
                df_EmpData['DOJ'] = pd.to_datetime(df_EmpData['DOJ'], format='%d-%m-%Y', errors='coerce')
                xw.view(df_EmpData, table=False)
                messagebox.showinfo('Employee Data Report','Employee Data Report Exported!')
            elif Condition == 'Personal Data':
                query_PersonalData = """SELECT A.EmpID, B.EmpName, B.Team, B.Location, A.DOB, 
                                        A.Gender, A.BloodGroup, A.PANNumber, A.OfficialEmail, A.PersonalEmail, A.AccessCardNumber, A.InternetAtHome, 
                                        A.CovidVaccination, A.PrimaryContact, A.SecondaryContact, A.EmergencyContact, A.EmergencyContactName, 
                                        A.EmergencyContactRelationship, A.PresentAddress, A.PresentAddressLocation, A.PermanentAddress, A.PermanentState, 
                                        A.OptedTransport, A.YearsofExp FROM tblPersonalData as A
                                        LEFT JOIN tblEmpData as B
                                        ON A.EmpID = B.EmpID 
                                        WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"""
                conn = sqlite3.connect(ProDBPath)
                df_PersonalData = pd.read_sql_query(query_PersonalData, conn)
                conn.close()
                df_PersonalData['DOB'] = pd.to_datetime(df_PersonalData['DOB'], format='%d-%m-%Y', errors='coerce')
                xw.view(df_PersonalData, table=False)
                messagebox.showinfo('Personal Details Report','Personal Details Report Exported!')
            elif Condition == 'Leave Data':
                query_LeaveData = """SELECT A.EmpID, B.EmpName, B.Team, B.Location, A.LeaveType, A.LStartDate, 
                                    A.LEndDate, A.TentativeRTW, A.ActualRTW, A.InitialComments, A.FinalComments FROM tblLeaveData as A
                                    LEFT JOIN tblEmpData as B
                                    ON A.EmpID = B.EmpID;"""
                conn = sqlite3.connect(ProDBPath)
                df_LeaveData = pd.read_sql_query(query_LeaveData, conn)
                conn.close()
                df_LeaveData['LStartDate'] = pd.to_datetime(df_LeaveData['LStartDate'], format='%d-%m-%Y', errors='coerce')
                df_LeaveData['LEndDate'] = pd.to_datetime(df_LeaveData['LEndDate'], format='%d-%m-%Y', errors='coerce')
                df_LeaveData['TentativeRTW'] = pd.to_datetime(df_LeaveData['TentativeRTW'], format='%d-%m-%Y', errors='coerce')
                df_LeaveData['ActualRTW'] = pd.to_datetime(df_LeaveData['ActualRTW'], format='%d-%m-%Y', errors='coerce')
                xw.view(df_LeaveData, table=False)
                messagebox.showinfo('Leave Report','Leave Details Report Exported!')
            elif Condition == 'Attrition Data':
                query_AttritionData = """SELECT MAX(A.RegID), A.EmpID, B.EmpName, B.Team, B.Location, B.UserID, A.RegInitOn, A.PolicyLWD, A.RegType, 
                                    A.RegReason, A.InitialComments, A.ATRRequired, A.ActualLWD, A.EmpStatus, A.FinalComments, 
                                    A.CreatedBy, A.CreatedDate FROM tblRegData as A
                                    LEFT JOIN tblEmpData as B
                                    ON A.EmpID = B.EmpID
                                    GROUP BY A.EmpID;"""
                conn = sqlite3.connect(ProDBPath)
                df_AttritionData = pd.read_sql_query(query_AttritionData, conn)
                conn.close()
                df_AttritionData['RegInitOn'] = pd.to_datetime(df_AttritionData['RegInitOn'], format='%d-%m-%Y', errors='coerce')
                df_AttritionData['PolicyLWD'] = pd.to_datetime(df_AttritionData['PolicyLWD'], format='%d-%m-%Y', errors='coerce')
                df_AttritionData['ActualLWD'] = pd.to_datetime(df_AttritionData['ActualLWD'], format='%d-%m-%Y', errors='coerce')
                df_AttritionData['CreatedDate'] = pd.to_datetime(df_AttritionData['CreatedDate'], format='%d-%m-%Y %H:%M:%S', errors='coerce')
                df_AttritionData = df_AttritionData[['EmpID', 'EmpName', 'Team', 'Location', 'UserID', 'RegInitOn', 'PolicyLWD', 'ActualLWD', 'EmpStatus', 'RegType', 'RegReason', 'InitialComments', 'FinalComments']]
                xw.view(df_AttritionData, table=False)
                messagebox.showinfo('Attrition Report','Attrition Report Exported!')
            elif Condition == 'ATR Data':
                query_ATRData = """SELECT A.ATRID, A.ATRType, ATRIJP, RaisedDate, NoofPositions, COUNT(B.ATRID) as PositionsClosed, Status,  
                                    EmpOrRelieverRole, BusinessDivision, Team, RelieverID, RelieverName, Comments FROM tblATR as A
                                    LEFT JOIN tblATRPosition as B
                                    ON A.ATRID = B.ATRID
                                    GROUP BY A.ATRID;"""
                query_ATRClosed = """SELECT A.ATRID, A.EmpID, B.EmpName, B.DOJ, B.Location, B.Role, B.Team, B.TeamLeader FROM tblATRPosition AS A
                                    LEFT JOIN tblEmpData AS B
                                    ON A.EmpID = B.EmpID;"""
                conn = sqlite3.connect(ProDBPath)
                df_ATRData = pd.read_sql_query(query_ATRData, conn)
                df_ATRClosedData = pd.read_sql_query(query_ATRClosed, conn)
                conn.close()
                df_ATRData['RaisedDate'] = pd.to_datetime(df_ATRData['RaisedDate'], format='%d-%m-%Y', errors='coerce')
                df_ATRClosedData['DOJ'] = pd.to_datetime(df_ATRClosedData['DOJ'], format='%d-%m-%Y', errors='coerce')
                wb=xw.Book()
                sh1=wb.sheets.add('ATR Details')
                sh2=wb.sheets.add('Closed ATRs',after=sh1)
                sh1.range('A1').options(pd.DataFrame, expand='table',index=False).value=df_ATRData.sort_values(by=['ATRID'])
                sh2.range('A1').options(pd.DataFrame, expand='table',index=False).value=df_ATRClosedData.sort_values(by=['ATRID'])
                wb.sheets['Sheet1'].delete()
                sh1.autofit()
                sh2.autofit()
                sh1.select()
                messagebox.showinfo('ATR Report','ATR Details Report Exported!')
                wb.activate(steal_focus=True)
            elif Condition == 'Teams List':
                query_TeamsData = """SELECT TeamID, TeamName FROM tblTeams;"""
                conn = sqlite3.connect(ProDBPath)
                df_TeamsData = pd.read_sql_query(query_TeamsData, conn)
                conn.close()
                xw.view(df_TeamsData, table=False)
                messagebox.showinfo('Teams List','Teams List Exported!')
            elif Condition == 'Team Leaders List':
                query_TL_LMData = """SELECT EmpID, EmpName from tblEmpData AS A
                                    INNER JOIN (SELECT TeamLeader AS Name FROM tblEmpData
                                                UNION
                                                SELECT LMName AS Name FROM tblEmpData) as B
                                    ON EmpName = Name;"""
                conn = sqlite3.connect(ProDBPath)
                df_TL_LMData = pd.read_sql_query(query_TL_LMData, conn)
                conn.close()
                xw.view(df_TL_LMData, table=False)
                messagebox.showinfo('TL List','Team Leaders List Exported!')
            elif Condition == 'Attendance Report':
                SelectedFrom = date.today().replace(day=1)
                SelectedTo = SelectedFrom.replace(day = calendar.monthrange(SelectedFrom.year, SelectedFrom.month)[1])
                
                query_WFH = "SELECT EmpID, WFHorWFO, MAX(ID) AS MaxID FROM tblWFHorWFO GROUP BY EmpID;"
                conn = sqlite3.connect(AttendanceDBPath)
                df_WFH_Data = pd.read_sql_query(query_WFH, conn)
                conn.close()

                query_EmployeeData = """SELECT A.EmpID, A.EmpName, A.DOJ, B.ActualLWD, A.Team, A.Location, A.EmpStatus from tblEmpData AS A 
                                        LEFT JOIN (SELECT EmpID, ActualLWD, MAX(RegID) from tblRegData GROUP BY EmpID) AS B 
                                        ON A.EmpID = B.EmpID"""
                conn = sqlite3.connect(ProDBPath)
                df_EmployeeData = pd.read_sql_query(query_EmployeeData, conn)
                conn.close()

                def dates_bwn_twodates2(start_date, end_date):
                    for n in range(int ((end_date - start_date).days)+1):
                        yield (start_date + timedelta(n)).strftime('%d-%b')

                app = xw.App(visible=False)
                wb = app.books.active
                sh1=wb.sheets['Sheet1']
                
                for i in range(SelectedFrom.month):
                    query_Attendance_Data = "SELECT * FROM tblAttendance WHERE Year = '" + str(SelectedFrom.year) + "' AND Month = '" + str(i+1) + "';"
                    conn = sqlite3.connect(AttendanceDBPath)
                    df_Attendance_Data = pd.read_sql_query(query_Attendance_Data, conn)
                    conn.close()
                    
                    CurrentMonthFrom = SelectedFrom.replace(month=i+1)
                    df_EmployeeData['DOJ'] = pd.to_datetime(df_EmployeeData['DOJ'], format='%d-%m-%Y', errors='coerce')
                    df_EmployeeData['ActualLWD'] = pd.to_datetime(df_EmployeeData['ActualLWD'], format='%d-%m-%Y', errors='coerce')
                    df_EmployeeData_Filtered = df_EmployeeData.loc[~(df_EmployeeData['ActualLWD'] < pd.to_datetime(CurrentMonthFrom, format='%Y-%m-%d'))]
                    
                    dfs = [df_EmployeeData_Filtered, df_WFH_Data, df_Attendance_Data]
                    Merged_Data = reduce(lambda x,y: pd.merge(x,y, on='EmpID', how='left'), dfs).fillna('')
                    Merged_Data['WFHorWFO'] = numpy.where(Merged_Data['WFHorWFO'] == '', 'WFO', Merged_Data['WFHorWFO'])
                    Merged_Data['WFHorWFO'] = numpy.where(Merged_Data['EmpStatus'].isin(['Abscond', 'Termination', 'Resigned']), Merged_Data['EmpStatus'], Merged_Data['WFHorWFO'])
                    Attendance_Report = Merged_Data.drop(['EmpStatus', 'MaxID', 'ID', 'Year', 'Month', 'UpdatedBy', 'UpdatedDate'], axis=1)

                    CurrentMonthTo = CurrentMonthFrom.replace(day = calendar.monthrange(SelectedFrom.year, CurrentMonthFrom.month)[1])
                    DateList = list(dates_bwn_twodates2(CurrentMonthFrom, CurrentMonthTo))
                    
                    if len(DateList) == 31:
                        DummyCol = []
                    elif len(DateList) == 30:
                        DummyCol = ['']
                    elif len(DateList) == 29:
                        DummyCol = ['', '']
                    elif len(DateList) == 28:
                        DummyCol = ['', '', '']
                    else:
                        messagebox.showerror("Error", "Column size error! Please contact Innovation team")
                    
                    ReportHeader = ["EmpID", "Name", "DOJ", "LWD", "Team", "Location", "WFH/WFO"] + DateList + DummyCol
                    Attendance_Report.columns = ReportHeader

                    query1 = "SELECT Type, LeaveName FROM tblTypeofLeaves WHERE Category = 'Leave' AND Type NOT IN ('CLEAR', 'PR');"
                    conn = sqlite3.connect(AttendanceDBPath)
                    df_LeaveType = pd.read_sql_query(query1, conn)
                    conn.close()
                    df_LeaveType_HalfDay = df_LeaveType[df_LeaveType['LeaveName'].str.contains('Half')]
                    df_Type_Empty = pd.DataFrame(columns=df_LeaveType['Type'].to_list())
                    
                    if len(DateList) < 31:
                        Attendance_Report.drop([''], axis=1, inplace=True)
                    Attendance_Report = pd.concat([Attendance_Report, df_Type_Empty])

                    for i in df_LeaveType['Type'].to_list():
                        if i in df_LeaveType_HalfDay['Type'].to_list():
                            Attendance_Report[i] = Attendance_Report.eq(i).sum(1) * 0.5
                        else:    
                            Attendance_Report[i] = Attendance_Report.eq(i).sum(1)

                    df_LeaveType_List = df_LeaveType['Type'].to_list()
                    del df_LeaveType_List[0]
                    
                    Attendance_Report['Total Leaves'] = Attendance_Report[df_LeaveType_List].sum(1)
                    
                    CurrentMonthName = CurrentMonthFrom.strftime("%b %Y")
                    sh2=wb.sheets.add(CurrentMonthName,after=sh1)
                    sh2.range('A1').options(pd.DataFrame, expand='table',index=False).value=Attendance_Report.sort_values(by=['EmpID'])
                    sh2.autofit()
                    sh1=sh2
                
                query1 = "SELECT EmpID, Date, LeaveType, Hours, Comments FROM tblAttendanceComments;"
                conn = sqlite3.connect(AttendanceDBPath)
                df_CommentsData = pd.read_sql_query(query1, conn)
                conn.close()

                df_CommentsData['Date'] = pd.to_datetime(df_CommentsData['Date'], format='%Y-%m-%d', errors='coerce')
                SelectedFrom = SelectedFrom.replace(month=1)
                SelectedFrom = pd.to_datetime(SelectedFrom, format='%Y-%m-%d', errors='coerce')
                SelectedTo = pd.to_datetime(CurrentMonthTo, format='%Y-%m-%d', errors='coerce')
                
                df_CommentsData_Filtered = df_CommentsData.loc[(df_CommentsData['Date'] >= SelectedFrom) & (df_CommentsData['Date'] <= SelectedTo)]
                CommentsData_Merged = Attendance_Report[['EmpID', 'Name', 'Location']].merge(df_CommentsData_Filtered, left_on=['EmpID'], right_on=['EmpID'], how='left').fillna('')
                CommentsData_Merged = CommentsData_Merged.loc[CommentsData_Merged['LeaveType'] != '']

                query1 = "SELECT Type, LeaveName FROM tblTypeofLeaves WHERE Category = 'Leave' AND Type NOT IN ('CLEAR');"
                conn = sqlite3.connect(AttendanceDBPath)
                df_LeaveType = pd.read_sql_query(query1, conn)
                conn.close()

                sh3=wb.sheets.add('Comments',after=sh2)
                sh4=wb.sheets.add('Leave Type',after=sh3)
                sh3.range('A1').options(pd.DataFrame, expand='table',index=False).value=CommentsData_Merged.sort_values(by=['EmpID'])
                sh4.range('A1').options(pd.DataFrame, expand='table',index=False).value=df_LeaveType
                wb.sheets['Sheet1'].delete()
                sh3.autofit()
                sh4.autofit()
                wb.sheets(wb.sheets.count-2).select()
                app.visible = True
                messagebox.showinfo('Attendance Report','Current Year Attendance Report Exported!')
                wb.activate(steal_focus=True)

    def HeadCount():
        Header3.place(x=40, y=10)
        Header4.place(x=40, y=420)
        
        Header2.config(foreground='#054457')
        Submit = True
        Condition = Entry2.get()
        if Condition == '':
            messagebox.showerror('Validation Check','Select a Location!')
            Submit = False
            return False
        else:
            result = DropDown_Validation(Entry2_Values, Entry2)
            if result == 'Failed':
                Header2.config(foreground='red')
                Entry2.focus_set()
                messagebox.showerror('Validation Check',Entry2_msg)
                Submit = False

        if Submit:
            arrlbHeader1 = ["Team Name", "Total Head Count", "Maternity Leave", "Long Leave", "Serving Notice", "Open ATR (All)"]
            arrlbHeader2 = ["Role Name", "Total Head Count", "Maternity Leave", "Long Leave", "Serving Notice", "Open ATR (All)"]
            arrlbHeader3 = ["Location", "Head Count"]
            Reportstree1_CP = MyTreeview(frame2, columns=arrlbHeader1, show="headings", height=2)
            Reportstree1 = MyTreeview(frame2, columns=arrlbHeader1, show="headings", height=14)
            Reportstree2_Total = MyTreeview(frame2, columns=arrlbHeader2, show="headings", height=1)
            Reportstree2 = MyTreeview(frame2, columns=arrlbHeader2, show="headings", height=14)
            Reportstree3 = MyTreeview(frame2, columns=arrlbHeader3, show="headings", height=2)
            
            arrColWidth = [250, 100, 100, 100, 100, 100]
            arrColWidth3 = [80, 80]
            arrColAlignment = ["w", "center", "center", "center", "center", "center"]
            arrColAlignment3 = ["w", "center"]
            
            arrSortType = ["name", "num", "num", "num", "num", "num"]
            arrSortType3 = ["name", "num"]
            
            for iCount in range(len(arrlbHeader1)):
                strHdr = arrlbHeader1[iCount]
                Reportstree1_CP.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
                Reportstree1_CP.column(arrlbHeader1[iCount], width=arrColWidth[iCount], stretch=True, anchor=arrColAlignment[iCount])

            for iCount in range(len(arrlbHeader1)):
                strHdr = arrlbHeader1[iCount]
                Reportstree1.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
                Reportstree1.column(arrlbHeader1[iCount], width=arrColWidth[iCount], stretch=True, anchor=arrColAlignment[iCount])

            for iCount in range(len(arrlbHeader2)):
                strHdr = arrlbHeader2[iCount]
                Reportstree2_Total.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
                Reportstree2_Total.column(arrlbHeader2[iCount], width=arrColWidth[iCount], stretch=True, anchor=arrColAlignment[iCount])
                        
            for iCount in range(len(arrlbHeader2)):
                strHdr = arrlbHeader2[iCount]
                Reportstree2.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
                Reportstree2.column(arrlbHeader2[iCount], width=arrColWidth[iCount], stretch=True, anchor=arrColAlignment[iCount])
            
            for iCount in range(len(arrlbHeader3)):
                strHdr = arrlbHeader3[iCount]
                Reportstree3.heading(strHdr, text=strHdr, sort_by=arrSortType3[iCount])
                Reportstree3.column(arrlbHeader3[iCount], width=arrColWidth3[iCount], stretch=True, anchor=arrColAlignment3[iCount])
            
            Reportstree1_CP.place(x=40, y=320)
            Reportstree1.place(x=40, y=40)

            Reportstree2_Total.place(x=40, y=730)
            Reportstree2.place(x=40, y=450)
            
            Reportstree3.place(x=820, y=40)
            
            Reportstree1_vsb = ttk.Scrollbar(frame2, orient="vertical", command=Reportstree1.yview)
            Reportstree1_vsb.place(x=790, y=40, height=340)
            Reportstree1.configure(yscrollcommand=Reportstree1_vsb.set)

            Reportstree2_vsb = ttk.Scrollbar(frame2, orient="vertical", command=Reportstree2.yview)
            Reportstree2_vsb.place(x=790, y=450, height=320)
            Reportstree2.configure(yscrollcommand=Reportstree2_vsb.set)
            
            style = ttk.Style()
            style.theme_use('default')
            style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
            style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
            style.map('Treeview', background=[('selected', 'green')])

            HeadCount_Query = """SELECT * FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"""
            conn = sqlite3.connect(ProDBPath)
            df_Location = pd.read_sql_query(HeadCount_Query, conn)
            conn.close()
            df_Location_Pivot=pd.pivot_table(df_Location, index=['Location'], values= ['EmpID'] , aggfunc = ['count'], margins=False).reset_index().fillna(0)
            df_Location_Pivot_List = df_Location_Pivot.values.tolist()
            
            if Entry2.get() == 'All':
                query_HeadCount = """SELECT * FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"""
            elif Entry2.get() != 'All':
                query_HeadCount = """SELECT * FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Location = '""" + Entry2.get() + """';"""

            query_ATR = """SELECT * FROM tblATR WHERE Status = 'Open';"""
            query_ATRPosition = """SELECT * FROM tblATRPosition WHERE PositionStatus = 'Closed';"""
            
            conn = sqlite3.connect(ProDBPath)
            df_Emp = pd.read_sql_query(query_HeadCount, conn)
            df_ATR = pd.read_sql_query(query_ATR, conn)
            df_ATRPosition = pd.read_sql_query(query_ATRPosition, conn)
            conn.close()
            
            Filtered_Maternity = df_Emp[df_Emp.EmpStatus.isin(['Maternity Leave'])]
            Filtered_LongLeave = df_Emp[df_Emp.EmpStatus.isin(['Long Leave', 'Long Sick Leave', 'Career Break'])]
            Filtered_ServingNotice = df_Emp[df_Emp.EmpStatus.isin(['Serving Notice Period', 'Notice Extended'])]

            TeamWise_HeadCount = df_Emp.groupby(['Team']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Total Head Count'})
            TeamWise_Maternity = Filtered_Maternity.groupby(['Team']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Maternity Leave'})
            TeamWise_LongLeave = Filtered_LongLeave.groupby(['Team']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Long Leave'})
            TeamWise_ServingNotice = Filtered_ServingNotice.groupby(['Team']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Serving Notice'})
            
            RoleWise_HeadCount = df_Emp.groupby(['Role']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Total Head Count'})
            RoleWise_Maternity = Filtered_Maternity.groupby(['Role']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Maternity Leave'})
            RoleWise_LongLeave = Filtered_LongLeave.groupby(['Role']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Long Leave'})
            RoleWise_ServingNotice = Filtered_ServingNotice.groupby(['Role']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Serving Notice'})

            df_ATRPosition_Count = df_ATRPosition.groupby(['ATRID']).agg({'PositionStatus':'count'}).reset_index().rename(columns={'PositionStatus':'ClosedPositions'})
                        
            TeamWise_df_ATR = df_ATR[['ATRID', 'NoofPositions', 'Team']]
            TeamWise_Merged_ATR = TeamWise_df_ATR.merge(df_ATRPosition_Count, left_on=['ATRID'], right_on=['ATRID'], how='left').fillna(0)
            TeamWise_Merged_ATR['Open ATR'] = TeamWise_Merged_ATR['NoofPositions'] - TeamWise_Merged_ATR['ClosedPositions'].astype(int)
            TeamWise_Merged_ATR = TeamWise_Merged_ATR[['Team', 'Open ATR']]
            TeamWise_Merged_ATR = TeamWise_Merged_ATR.groupby(['Team']).agg({'Open ATR':'sum'}).reset_index()
            
            RoleWise_df_ATR = df_ATR[['ATRID', 'NoofPositions', 'EmpOrRelieverRole']].rename(columns={'EmpOrRelieverRole':'Role'})
            RoleWise_Merged_ATR = RoleWise_df_ATR.merge(df_ATRPosition_Count, left_on=['ATRID'], right_on=['ATRID'], how='left').fillna(0)
            RoleWise_Merged_ATR['Open ATR'] = RoleWise_Merged_ATR['NoofPositions'] - RoleWise_Merged_ATR['ClosedPositions'].astype(int)
            RoleWise_Merged_ATR = RoleWise_Merged_ATR[['Role', 'Open ATR']]
            RoleWise_Merged_ATR = RoleWise_Merged_ATR.groupby(['Role']).agg({'Open ATR':'sum'}).reset_index()

            TeamWise_dfs = [TeamWise_HeadCount, TeamWise_Maternity, TeamWise_LongLeave, TeamWise_ServingNotice, TeamWise_Merged_ATR]
            TeamWise_Output = reduce(lambda x,y: pd.merge(x,y, on='Team', how='outer'), TeamWise_dfs)
            TeamWise_Output.loc['Total Count'] = TeamWise_Output.sum(numeric_only=True, axis=0)
            TeamWise_Output.at['Total Count', 'Team'] = 'Total Count'
            TeamWise_Output[list(['Total Head Count', 'Maternity Leave', 'Long Leave', 'Serving Notice', 'Open ATR'])] = TeamWise_Output[list(['Total Head Count', 'Maternity Leave', 'Long Leave', 'Serving Notice', 'Open ATR'])].fillna(0).astype(int)
            
            TeamWise_Output_NoCP = TeamWise_Output[~TeamWise_Output.Team.isin(['Customer Processing', 'Total Count'])]
            TeamWise_Output_NoCP_List = TeamWise_Output_NoCP.values.tolist()

            TeamWise_Output_CP = TeamWise_Output[TeamWise_Output.Team.isin(['Customer Processing', 'Total Count'])]
            TeamWise_Output_CP_List = TeamWise_Output_CP.values.tolist()
            
            RoleWise_dfs = [RoleWise_HeadCount, RoleWise_Maternity, RoleWise_LongLeave, RoleWise_ServingNotice, RoleWise_Merged_ATR]
            RoleWise_Output = reduce(lambda x,y: pd.merge(x,y, on='Role', how='outer'), RoleWise_dfs)
            RoleWise_Output.loc['Total Count'] = RoleWise_Output.sum(numeric_only=True, axis=0)
            RoleWise_Output.at['Total Count', 'Role'] = 'Total Count'
            RoleWise_Output[list(['Total Head Count', 'Maternity Leave', 'Long Leave', 'Serving Notice', 'Open ATR'])] = RoleWise_Output[list(['Total Head Count', 'Maternity Leave', 'Long Leave', 'Serving Notice', 'Open ATR'])].fillna(0).astype(int)

            RoleWise_Output_NoTotal = RoleWise_Output[~RoleWise_Output.Role.isin(['Total Count'])]
            RoleWise_Output_NoTotal_List = RoleWise_Output_NoTotal.values.tolist()

            RoleWise_Output_Total = RoleWise_Output[RoleWise_Output.Role.isin(['Total Count'])]
            RoleWise_Output_Total_List = RoleWise_Output_Total.values.tolist()
                        
            Reportstree1_CP.tag_configure("evenrow",background='white')
            Reportstree1_CP.tag_configure("oddrow",background='lightblue',font=("Calibri",12,"bold"))
            rowid = 0
            for row in TeamWise_Output_CP_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        Reportstree1_CP.insert("", END, values=row, tags=('oddrow',))
                    else:
                        Reportstree1_CP.insert("", END, values=row, tags=('evenrow',))
            Reportstree1.tag_configure("evenrow",background='white')
            Reportstree1.tag_configure("oddrow",background='lightblue')
            rowid = 0
            for row in TeamWise_Output_NoCP_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        Reportstree1.insert("", END, values=row, tags=('oddrow',))
                    else:
                        Reportstree1.insert("", END, values=row, tags=('evenrow',))

            Reportstree2_Total.tag_configure("evenrow",background='lightblue',font=("Calibri",12,"bold"))
            Reportstree2_Total.tag_configure("oddrow",background='white')
            rowid = 0
            for row in RoleWise_Output_Total_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        Reportstree2_Total.insert("", END, values=row, tags=('oddrow',))
                    else:
                        Reportstree2_Total.insert("", END, values=row, tags=('evenrow',))

            Reportstree2.tag_configure("evenrow",background='white')
            Reportstree2.tag_configure("oddrow",background='lightblue')
            rowid = 0
            for row in RoleWise_Output_NoTotal_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        Reportstree2.insert("", END, values=row, tags=('oddrow',))
                    else:
                        Reportstree2.insert("", END, values=row, tags=('evenrow',))
                        
            Reportstree3.tag_configure("evenrow",background='white')
            Reportstree3.tag_configure("oddrow",background='lightblue')
            rowid = 0
            for row in df_Location_Pivot_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        Reportstree3.insert("", END, values=row, tags=('oddrow',))
                    else:
                        Reportstree3.insert("", END, values=row, tags=('evenrow',))
              
    Image_Run= PhotoImage(file=r')
    Image_Export= PhotoImage(file=r)
    
    ReportB = Button(Can1, image=Image_Export, width=25, height=25, command=lambda:RawReports(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    ReportB.image = Image_Export
    ReportB.place(x=950, y=25)

    LocationB = Button(Can1, image=Image_Run, width=25, height=25, command=lambda:HeadCount(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    LocationB.image = Image_Run
    LocationB.place(x=200, y=25)
    HeadCount()

########################################################## This is Reports Page END ########################################################

########################################################## This is Skill Matrix Page ########################################################

def SkillCheck(Home):
    if Skills_Access == 'Yes':
        SkillMatrixPage(Home)
    else:
        messagebox.showerror('No Access',"You are not authorised to access 'Skill Matrix' module! Contact Innovation Team")

def SkillMatrixPage(Home):
    SkillCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    SkillCan.place(x=150, y=10)

    Label1 = Label(SkillCan, text="Skill Matrix",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",16,"bold"),anchor='center')
    Label1.place(x=420, y=10)

    def SkillMatrixReport():
        Label1.config(foreground='#054457')
        if Entry1.get().strip() == '':
            messagebox.showerror('Validation Check','Team name should not be left blank!')
            return False
        else:
            Submit = True
            if Entry1.get() != '':
                result = DropDown_Validation(Entry1_Values, Entry1)
                if result == 'Failed':
                    Label1.config(foreground='red')
                    Entry1.focus_set()
                    messagebox.showerror('Validation Check',Entry1_msg)
                    Submit = False
                    return False

        if Submit:
            if Entry1.get() == 'All Teams':
                query_EmpData = "SELECT EmpID, EmpName, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"    
            else:
                query_EmpData = "SELECT EmpID, EmpName, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Team = '" + Entry1.get() + "';"


            query_All_EmpData = "SELECT EmpID, EmpName, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"
            conn = sqlite3.connect(ProDBPath)
            df_All_EmpData = pd.read_sql_query(query_All_EmpData, conn)
            conn.close()

            conn = sqlite3.connect(ProDBPath)
            df_EmpData = pd.read_sql_query(query_EmpData, conn)
            conn.close()

            query_Trained = """SELECT EmpID, EmpName AS Name, TransactionTeam, TransactionName, Trained FROM tblSkillsTrained;"""
            conn = sqlite3.connect(ProDBPath)
            df_Trained = pd.read_sql_query(query_Trained, conn)
            conn.close()
            
            EmpData_Trained_Merged_Core = df_EmpData.merge(df_Trained, left_on=['EmpID'], right_on=['EmpID'], how='left')
            
            if Entry1.get() != 'All Teams':
                df_Trained_Filtered = df_Trained.loc[df_Trained['TransactionTeam'] == Entry1.get()]
                outer_join = EmpData_Trained_Merged_Core.merge(df_Trained_Filtered, left_on=['EmpID'], right_on=['EmpID'], how = 'outer', indicator = True)
                anti_join = outer_join[(outer_join._merge == 'right_only')].drop('_merge', axis = 1).dropna(how='all', axis=1)
                anti_join.rename(columns={'Name_y': 'Name', 'TransactionTeam_y': 'TransactionTeam', 'TransactionName_y': 'TransactionName', 'Trained_y': 'Trained'}, inplace=True)
                
                EmpData_Trained_Merged_Other = df_All_EmpData.merge(anti_join, left_on=['EmpID'], right_on=['EmpID'], how='right')
                df_All_Trained = EmpData_Trained_Merged_Core.append(EmpData_Trained_Merged_Other, ignore_index=True)
            else:
                df_All_Trained = EmpData_Trained_Merged_Core
                
            df_Trained_Pivot=pd.pivot_table(df_All_Trained, index=['EmpID', 'EmpName', 'CoreTeam'], columns=['TransactionTeam', 'TransactionName'], values='Trained' , aggfunc = 'max', margins=False).reset_index().sort_values(by=['CoreTeam', 'EmpID'], ascending=True)
            
            xw.view(df_Trained_Pivot, table=False)
            messagebox.showinfo('Skill Matrix','Skill Matrix Data Report Exported!')
        
    def SelectedClear():
        Entry2_0.config(state='normal')
        Entry2_0.delete(0, END)
        Entry2_0.config(state='disabled')
        
        Entry2.config(state='normal')
        Entry2.delete(0, END)
        Entry2.config(state='disabled')

        Entry3.delete(0, END)
        Entry4.delete(0, END)
        Entry5.delete(0, END)

    def OnClick(event, treename):
        SelectedClear()
        item = treename.selection()
        for i in item:
            Entry2_0.config(state='normal')
            Entry2_0.delete(0, END)
            Entry2_0.insert(0,treename.item(i, "values")[0])
            Entry2_0.config(state='disabled')

            Entry2.config(state='normal')
            Entry2.delete(0, END)
            Entry2.insert(0,treename.item(i, "values")[1])
            Entry2.config(state='disabled')

            EmpID = treename.item(i, "values")[0]
            TransTreeRefresh(EmpID)

    def TransTreeRefresh(EmpID):
            TransTree.delete(*TransTree.get_children())
            ViewDashfn(ProDBPath,"SELECT TransactionTeam, TransactionName FROM tblSkillsTrained WHERE EmpID = '" + EmpID + "';",TransTree)

    def TeamList(event):
        SelectedClear()
        SkillTree.delete(*SkillTree.get_children())
        TransTree.delete(*TransTree.get_children())
        
        if Entry1.get() == 'All Teams':
            query_EmpData = "SELECT EmpID, EmpName, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"    
        else:
            query_EmpData = "SELECT EmpID, EmpName, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Team = '" + Entry1.get() + "';"

        conn = sqlite3.connect(ProDBPath)
        df_EmpData = pd.read_sql_query(query_EmpData, conn)
        conn.close()
        
        query_Trained = """SELECT EmpID, EmpName, TransactionTeam, TransactionName FROM tblSkillsTrained;"""
        conn = sqlite3.connect(ProDBPath)
        df_Trained = pd.read_sql_query(query_Trained, conn)
        conn.close()
        
        EmpData_Trained_Merged = df_EmpData.merge(df_Trained, left_on=['EmpID'], right_on=['EmpID'], how='left')
        EmpData_Trained_Merged['Category'] = numpy.where(EmpData_Trained_Merged['CoreTeam'] == EmpData_Trained_Merged['TransactionTeam'], 'Internal', 'External')
        df_Trained_Pivot=pd.pivot_table(EmpData_Trained_Merged, index=['EmpID', 'EmpName_x'], columns='Category', values='TransactionName' , aggfunc = 'count', margins=False).reset_index().fillna(0)
        
        if 'Internal' not in df_Trained_Pivot:
            df_Trained_Pivot['Internal'] = 0
        elif 'External' not in df_Trained_Pivot:
            df_Trained_Pivot['External'] = 0
                
        try:
            df_Trained_Pivot = df_Trained_Pivot[['EmpID', 'EmpName_x', 'Internal', 'External']]
            df_Trained_Pivot[['Internal', 'External']] = df_Trained_Pivot[['Internal', 'External']].astype(int)
            df_Trained_List = df_Trained_Pivot.values.tolist()
            
            SkillTree.tag_configure("evenrow",background='white')
            SkillTree.tag_configure("oddrow",background='lightblue')
            rowid = 0
            for row in df_Trained_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        SkillTree.insert("", END, values=row, tags=('oddrow',))
                    else:
                        SkillTree.insert("", END, values=row, tags=('evenrow',))
        except:
            pass

    def TeamSelected(event):
        Entry4.delete(0, END)
        global Entry4_Values
        Entry4_Values = Queryfun("SELECT TransactionName FROM tblTransactions WHERE Team = '" + Entry3.get() + "';")
        Entry4.config(completevalues=Entry4_Values)

    Can1=Canvas(SkillCan,bg="white", width=1020, height=520, highlightthickness=0)
    Can1.place(x=10, y=50)

    Label1 = Label(Can1, text="Team Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2_0 = Label(Can1, text="Emp ID*",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label2 = Label(Can1, text="Employee Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label3 = Label(Can1, text="Team Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label4 = Label(Can1, text="Transaction Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label5 = Label(Can1, text="Certified On*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label5_1 = Label(Can1, text="dd-mm-yyyy",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')

    Entry1_Values = Queryfun("SELECT TeamName FROM tblTeams;")
    Entry1_Values.append('All Teams')
    Entry1 = AutocompleteCombobox(Can1, width=33, completevalues=Entry1_Values)
    Entry1.set('All Teams')
    Entry1_msg = 'This Team is not available in the list! please check'
    Entry1.bind("<FocusOut>", TeamList)
    Entry1.bind("<<ComboboxSelected>>", TeamList)

    Entry2_0 = Entry(Can1, bg="white",font=("Calibri",10), width=8)
    Entry2_0.config(state='disabled')

    Entry2 = Entry(Can1, bg="white",font=("Calibri",10), width=30)
    Entry2.config(state='disabled')

    Entry3_Values = Queryfun("SELECT TeamName FROM tblTeams;")
    Entry3 = AutocompleteCombobox(Can1, width=30, completevalues=Entry3_Values)
    Entry3_msg = 'This Team is not available in the list! please check'
    Entry3.bind("<FocusOut>", TeamSelected)
    Entry3.bind("<<ComboboxSelected>>", TeamSelected)

    global Entry4_Values
    Entry4_Values = []
    Entry4 = AutocompleteCombobox(Can1, width=40, completevalues=Entry4_Values)
    Entry4_msg = 'This Transaction is not available in the list! please check'

    today = date.today()
    Entry5 = DateEntry(Can1,width=12,bg="white",font=("Calibri",10),date_pattern='dd-mm-yyyy',maxdate=today)
    Entry5.delete(0, END)

    Image_Export= PhotoImage(file=)
    ExportB = Button(Can1, image=Image_Export, width=25, height=25, command=lambda:SkillMatrixReport(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    ExportB.image = Image_Export
    ExportB.place(x=380, y=5)

    Label1.place(x=30, y=10)
    Label2_0.place(x=30, y=410)
    Label2.place(x=120, y=410)
    Label3.place(x=370, y=410)
    Label4.place(x=600, y=410)
    Label5.place(x=890, y=410)
    Label5_1.place(x=890, y=445)

    Entry1.place(x=150, y=10)
    Entry2_0.place(x=30, y=430)
    Entry2.place(x=120, y=430)
    Entry3.place(x=370, y=430)
    Entry4.place(x=600, y=430)
    Entry5.place(x=890, y=430)

    style = ttk.Style()
    style.theme_use('default')
    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
    style.map('Treeview', background=[('selected', 'green')])

    arrlbHeader = ["Emp ID", "Employee Name", "Internally Trained", "Externally Trained"]
    SkillTree = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=17, selectmode='browse')
    SkillTree.column("#1", anchor=CENTER, width=60)
    SkillTree.heading("#1", text="Emp ID")
    SkillTree.column("#2", anchor=W, width=170)
    SkillTree.heading("#2", text="Employee Name")
    SkillTree.column("#3", anchor=CENTER, width=110)
    SkillTree.heading("#3", text="Internally Trained")
    SkillTree.column("#4", anchor=CENTER, width=110)
    SkillTree.heading("#4", text="Externally Trained")
    
    arrSortType = ["num", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        SkillTree.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
        SkillTree.column(arrlbHeader[iCount], stretch=True)

    SkillTree.place(x=30, y=45)

    SkillTree_vsb2 = ttk.Scrollbar(Can1, orient="vertical", command=SkillTree.yview)
    SkillTree_vsb2.place(x=480, y=45, height=360)
    SkillTree.configure(yscrollcommand=SkillTree_vsb2.set)

    SkillTree.bind("<<TreeviewSelect>>", lambda event: OnClick(event, treename=SkillTree))

    arrlbHeader = ["Team Name", "Trained Transaction"]
    TransTree = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=17, selectmode='browse')
    TransTree.column("#1", anchor=W, width=190)
    TransTree.heading("#1", text="Team Name")
    TransTree.column("#2", anchor=W, width=270)
    TransTree.heading("#2", text="Trained Transaction")
    
    arrSortType = ["name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        TransTree.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
        TransTree.column(arrlbHeader[iCount], stretch=True)

    TransTree.place(x=530, y=45)

    TransTree_vsb2 = ttk.Scrollbar(Can1, orient="vertical", command=TransTree.yview)
    TransTree_vsb2.place(x=990, y=45, height=360)
    TransTree.configure(yscrollcommand=TransTree_vsb2.set)

    TeamList(Event)
    
    def Validate_Clear():
        LabelList = [Label1, Label2_0, Label2, Label3, Label4, Label5]
        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')
    
    def Validate_SkillSubmit():
        Validate_Clear()
        global Entry4_Values
        AllLabelList = [Label1, Label3, Label4]
        AllEntryList = [Entry1, Entry3, Entry4]
        AllEntryValues = [Entry1_Values, Entry3_Values, Entry4_Values]
        AllEntryMessage = [Entry1_msg, Entry3_msg, Entry4_msg]

        DateLabelList = [Label5]
        DateEntryList = [Entry5]

        if Entry2_0.get().strip() == '' or Entry2.get().strip() == '' or Entry3.get().strip() == '' or Entry4.get().strip() == '' or Entry5.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True

            TransExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblSkillsTrained WHERE EmpID = " + Entry2_0.get() + " AND TransactionTeam = '" + Entry3.get() + "' AND TransactionName = '" + Entry4.get() + "');")
            if TransExists[0][0] == 0:
                Submit = True
            else:
                Submit = False
                messagebox.showerror('Validation Check','This Skill is already added, Please check!')
                return False

            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break

            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        break

        if Submit:
            SkillSubmit()

    def SkillSubmit():
        Record = (Entry2_0.get(), Entry2.get(), Entry3.get(), Entry4.get(), Entry5.get(), 'Trained', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        InsertQueryfun(ProDBPath,"""INSERT INTO tblSkillsTrained (EmpID, EmpName, TransactionTeam, TransactionName, CertifiedOn, Trained, UpdatedBy, UpdatedDate) VALUES(?, ?, ?, ?, ?, ?, ?, ?);""", Record)
        messagebox.showinfo('Completed','Skill Added Successfully!')
        Entry4.delete(0, END)
        TeamList(Event)
        TransTreeRefresh(Entry2_0.get())

    def SkillCancel():
        SkillMatrixPage(Home)

    Image_Submit= PhotoImage(file=r)
    Image_Reset= PhotoImage(file=r)

    SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_SkillSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:SkillCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
    SubmitB.image = Image_Submit
    CancelB.image = Image_Reset

    SubmitB.place(x=400, y=460)
    CancelB.place(x=600, y=460)

########################################################## This is Asset Management Page ########################################################

def AssetCheck(Home):
    # if Assets_Access == 'Yes':
    AssetManagement(Home)
    # else:
    #     messagebox.showerror('No Access',"You are not authorised to access 'Asset Management' module! Contact Innovation Team")

def AssetManagement(Home):
    messagebox.showinfo('In Process',"Under Development")

########################################################## This is Attendance Page ########################################################

def AttendanceCheck(Home):
    if Attendance_Access == 'Yes':
        Attendance(Home)
    else:
        messagebox.showerror('No Access',"You are not authorised to access 'Attendance' module! Contact Innovation Team")

def Attendance(Home):
    SkillCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    SkillCan.place(x=150, y=10)

    Label1 = Label(SkillCan, text="Attendance",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",16,"bold"),anchor='center')
    Label1.place(x=420, y=10)

    Can1=Canvas(SkillCan,bg="white", width=1020, height=520, highlightthickness=0)
    Can1.place(x=10, y=50)

    frame1=Frame(Can1,bg="white", width=1020, height=1000)
    frame1.place(x=0, y=0)
    
    Can2=Canvas(frame1,bg="white", width=1020, height=1000, highlightthickness=0)
    Can2.place(x=0, y=10)

    hbar=Scrollbar(frame1,orient=HORIZONTAL,command=Can2.xview)
    hbar.place(x=0, y=384, width=1020)
    Can2.config(xscrollcommand=hbar.set)
    Can2.bind('<Configure>', lambda e : Can2.configure(scrollregion=Can2.bbox("all")))

    frame2=Frame(Can2,bg="white", width=1280+50, height=1200)
    Can2.create_window((0,0), window=frame2, anchor='nw')
    
    Label1 = Label(Can1, text="Team Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label2 = Label(Can1, text="Year*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label3 = Label(Can1, text="Month*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label4 = Label(Can1, text="Location*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label5 = Label(Can1, text="Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')

    Entry1_Values = Queryfun("SELECT TeamName FROM tblTeams;")
    Entry1 = AutocompleteCombobox(Can1, width=30, completevalues=Entry1_Values)
    Entry1_msg = 'This Team is not available in the list! please check'
    Entry1.bind("<FocusIn>", lambda event: HidePresentAll(event))
    Entry1.bind("<<ComboboxSelected>>", lambda event: HidePresentAll(event))

    Entry2_Values = [str(x) for x in numpy.arange(2022, date.today().year+2, 1)]
    Entry2 = AutocompleteCombobox(Can1, width=10, completevalues=Entry2_Values)
    Entry2.set(date.today().year)
    Entry2_msg = 'This Year is not available in the list! please check'
    Entry2.bind("<FocusIn>", lambda event: HidePresentAll(event))
    Entry2.bind("<<ComboboxSelected>>", lambda event: HidePresentAll(event))

    Entry3_Values = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
    Entry3 = AutocompleteCombobox(Can1, width=10, completevalues=Entry3_Values)
    if date.today().month < 10:
        Entry3.set('0' + str(date.today().month))
    else:
        Entry3.set(date.today().month)
    Entry3_msg = 'This Month is not available in the list! please check'
    Entry3.bind("<FocusIn>", lambda event: HidePresentAll(event))
    Entry3.bind("<<ComboboxSelected>>", lambda event: HidePresentAll(event))

    Entry4_Values = ['All', 'Bangalore', 'Chennai']
    Entry4 = AutocompleteCombobox(Can1, width=10, completevalues=Entry4_Values)
    Entry4.set('All')
    Entry4_msg = 'This Location is not available in the list! please check'
    Entry4.bind("<FocusIn>", lambda event: HidePresentAll(event))
    Entry4.bind("<<ComboboxSelected>>", lambda event: HidePresentAll(event))

    Entry5 = DateEntry(Can1,width=10,bg="white",font=("Calibri",10),date_pattern='dd-mm-yyyy',mindate=date.today()-timedelta(days=6),maxdate=date.today())
    Entry5.delete(0, END)
    Entry5.set_date(date.today())
    
    Label1.place(x=10, y=15)
    Label2.place(x=300, y=15)
    Label3.place(x=430, y=15)
    Label4.place(x=570, y=15)
    
    Entry1.place(x=90, y=15)
    Entry2.place(x=340, y=15)
    Entry3.place(x=480, y=15)
    Entry4.place(x=630, y=15)

    def AttendanceReport():
        ViewList('ExportReport')
    
    Image_Run= PhotoImage(file=)
    RunButton = Button(Can1, image=Image_Run, width=25, height=25, command=lambda:Validate_ViewList('ViewList'),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    RunButton.image = Image_Run
    RunButton.place(x=720, y=10)

    Image_Export= PhotoImage(file=r'')
    ReportB = Button(Can1, image=Image_Export, width=25, height=25, command=lambda:AttendanceReport(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    ReportB.image = Image_Export

    Image_AllPresent= PhotoImage(file=r)
    LocationB = Button(Can1, image=Image_AllPresent, width=60, height=30, command=lambda:Validate_ViewList('PresentAll'),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    LocationB.image = Image_AllPresent
    
    def ViewPresentAll():
        ReportB.place(x=770, y=10)
        Label5.place(x=820, y=15)
        Label5.config(foreground='#054457')
        Entry5.focus_set()
        Entry5.delete(0, END)
        Entry5.set_date(date.today())
        Entry5.place(x=860, y=15)
        LocationB.place(x=950, y=5)

    def ClearTreeRows():
        for widget in frame2.winfo_children():
            if 'treeview' in str(widget):
                widget.delete(*widget.get_children())

        for widget in frame1.winfo_children():
            if 'treeview' in str(widget):
                widget.delete(*widget.get_children())
                
    def HidePresentAll(event):
        ClearTreeRows()
        LeaveNameClear()
        SelectAttendance_LeaveOption()
        ReportB.place_forget()
        Label5.place_forget()
        Entry5.place_forget()
        LocationB.place_forget()

    def deletetreeviewinframe(scrollcount):
        intcount = 0
        for widget in frame2.winfo_children():
            if 'treeview' in str(widget) or 'scrollbar' in str(widget):
                widget.destroy()

        intcount = 0
        for widget in frame1.winfo_children():
            if 'scrollbar' in str(widget):
                intcount+=1
                if intcount==2:
                    widget.destroy()

    def OnClick(event, MainTree):
        item = MainTree.selection()
        for i in item:
            Entry11.configure(state = "normal")
            Entry12.configure(state = "normal")
            
            Entry11.delete(0, END)
            Entry12.delete(0, END)
            
            Entry11.insert(0, MainTree.item(i, "values")[0])
            Entry12.insert(0, MainTree.item(i, "values")[1])
            
            Entry11.configure(state = "disabled")
            Entry12.configure(state = "disabled")

    def Validate_Clear1():
        LabelList = [Label1, Label2, Label3, Label4]
        
        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_ViewList(FunName):
        Validate_Clear1()

        AllLabelList = [Label1, Label2, Label3, Label4]
        AllEntryList = [Entry1, Entry2, Entry3, Entry4]
        AllEntryValues = [Entry1_Values, Entry2_Values, Entry3_Values, Entry4_Values]
        AllEntryMessage = [Entry1_msg, Entry2_msg, Entry3_msg, Entry4_msg]
        
        if Entry1.get() == '' or Entry2.get() == '' or Entry3.get() == '' or Entry4.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break
            
            if Submit:
                if FunName == 'ViewList':
                    ViewList()
                    ViewPresentAll()
                    
                elif FunName == 'PresentAll':
                    Validate_PresentAll()
            
    def ViewList(ReportRequired=''):
        deletetreeviewinframe(2)
        SelectedDate = '01-' + Entry3.get() + '-' + Entry2.get()
        SelectedDate = datetime.strptime(SelectedDate, "%d-%m-%Y")
        FirstDate = SelectedDate.replace(day=1)
        LastDay = calendar.monthrange(SelectedDate.year, SelectedDate.month)[1]
        DateList = list(range(1, LastDay+1))
        Header1 = ["Emp ID", "Name", "WFH/WFO"]
        arrlbHeader1 = Header1 + DateList
        
        def dates_bwn_twodates(start_date):
            for n in range(LastDay):
                yield (start_date + timedelta(n)).strftime('%a')
        
        DateInList = list(dates_bwn_twodates(FirstDate))
        arrlbHeader2 = ['', '', ''] + DateInList

        ####### Day Tree Dummy #######
        Attendancetree2 = MyTreeview(frame2, columns=arrlbHeader2, show="headings", height=1, selectmode='browse')
        
        Attendancetree1 = MyTreeview(frame2, columns=arrlbHeader1, show="headings", height=15, selectmode='browse')
        arrColWidth1 = [50, 180, 80, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]
        arrColAlignment1 = ["center", "w", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center"]
        
        if SelectedDate.month in [1,3,5,7,8,10,12]:
            arrColWidth1 = arrColWidth1 + [32, 32, 32]
            arrColAlignment1 = arrColAlignment1 + ["center", "center", "center"]
        elif SelectedDate.month in [4,6,9,11]:
            arrColWidth1 = arrColWidth1 + [32, 32]
            arrColAlignment1 = arrColAlignment1 + ["center", "center"]
        else:
            if SelectedDate.year%4 == 0:
                arrColWidth1 = arrColWidth1 + [32]
                arrColAlignment1 = arrColAlignment1 + ["center"]
            else:
                arrColWidth1 = arrColWidth1
                arrColAlignment1 = arrColAlignment1
        
        ####### Day Tree Dummy #######
        for iCount in range(len(arrlbHeader2)):
            strHdr = arrlbHeader2[iCount]
            Attendancetree2.heading(iCount, text=strHdr)
            Attendancetree2.column(iCount, width=arrColWidth1[iCount], stretch=False,  anchor=arrColAlignment1[iCount])

        for iCount in range(len(arrlbHeader1)):
            strHdr = arrlbHeader1[iCount]
            Attendancetree1.heading(strHdr, text=strHdr)
            Attendancetree1.column(arrlbHeader1[iCount], width=arrColWidth1[iCount], stretch=False, anchor=arrColAlignment1[iCount])

        Attendancetree2.place(x=1, y=40)
        Attendancetree1.place(x=1, y=56)
                        
        Attendancetree1_vsb = ttk.Scrollbar(frame1, orient="vertical", command=Attendancetree1.yview)
        Attendancetree1_vsb.place(x=1005, y=50, height=336)
        Attendancetree1.configure(yscrollcommand=Attendancetree1_vsb.set)
        
        Attendancetree1.bind("<<TreeviewSelect>>", lambda event: OnClick(event, MainTree=Attendancetree1))

        query1 = """SELECT * FROM tblAttendance
                    WHERE Year = '""" + Entry2.get() + """' AND Month = '""" + str(int(Entry3.get())) + """';"""

        if Entry4.get() != 'All':
            query2 = """SELECT A.EmpID, A.EmpName, A.Team, A.Location, A.DOJ, B.ActualLWD, A.EmpStatus FROM tblEmpData AS A 
                        LEFT JOIN (SELECT EmpID, ActualLWD, MAX(RegID) from tblRegData GROUP BY EmpID) AS B 
                        ON A.EmpID = B.EmpID
                        WHERE A.Team = '""" + Entry1.get() + """' AND A.Location = '""" + Entry4.get() + """';"""
        
        else:
            query2 = """SELECT A.EmpID, A.EmpName, A.Team, A.Location, A.DOJ, B.ActualLWD, A.EmpStatus FROM tblEmpData AS A 
                        LEFT JOIN (SELECT EmpID, ActualLWD, MAX(RegID) from tblRegData GROUP BY EmpID) AS B 
                        ON A.EmpID = B.EmpID
                        WHERE A.Team = '""" + Entry1.get() + """';"""

        query3 = """SELECT EmpID, WFHorWFO, MAX(ID) AS MaxID FROM tblWFHorWFO GROUP BY EmpID"""
        
        conn = sqlite3.connect(AttendanceDBPath)
        df_AttendanceData = pd.read_sql_query(query1, conn)
        df_WFHData = pd.read_sql_query(query3, conn)
        conn.close()
        conn = sqlite3.connect(ProDBPath)
        df_EmployeeData = pd.read_sql_query(query2, conn)
        conn.close()
        Date_Start = '01-' + Entry3.get() + '-' + Entry2.get()
        Date_Start = pd.to_datetime(Date_Start, format='%d-%m-%Y', errors='coerce')
        Date_End = pd.Period(Date_Start.date(), freq='M').end_time.date()
        Date_End = pd.to_datetime(Date_End, format='%Y-%m-%d', errors='coerce')
        
        df_EmployeeData['DOJ'] = pd.to_datetime(df_EmployeeData['DOJ'], format='%d-%m-%Y', errors='coerce')
        df_EmployeeData['ActualLWD'] = pd.to_datetime(df_EmployeeData['ActualLWD'], format='%d-%m-%Y', errors='coerce')
        df_EmpData_Filtered = df_EmployeeData.loc[(df_EmployeeData['DOJ'] <= Date_End) & ((df_EmployeeData['ActualLWD'] >= Date_Start) | (df_EmployeeData['ActualLWD'].isnull()))]
        
        EmployeeData_WFHData_Merged = df_EmpData_Filtered.merge(df_WFHData, left_on=['EmpID'], right_on=['EmpID'], how='left').fillna('')
        Attendance_Merged = EmployeeData_WFHData_Merged.merge(df_AttendanceData, left_on=['EmpID'], right_on=['EmpID'], how='left').fillna('')
        Attendance_Merged['WFHorWFO'] = numpy.where(Attendance_Merged['WFHorWFO'] == '', 'WFO', Attendance_Merged['WFHorWFO'])
        Attendance_Merged['WFHorWFO'] = numpy.where(Attendance_Merged['EmpStatus'].isin(['Abscond', 'Termination', 'Resigned']), Attendance_Merged['EmpStatus'], Attendance_Merged['WFHorWFO'])
        Attendance_Report = Attendance_Merged.drop(['EmpStatus', 'Team', 'MaxID', 'ID', 'Year', 'Month', 'UpdatedBy', 'UpdatedDate'], axis=1)
        Attendance_Merged.drop(['EmpStatus', 'Team', 'Location', 'DOJ', 'ActualLWD', 'MaxID', 'ID', 'Year', 'Month'], axis=1, inplace=True)
        Attendance_Merged_List = Attendance_Merged.values.tolist()
               
        if ReportRequired == 'ExportReport':
            SelectedFrom = SelectedDate
            SelectedTo = SelectedFrom.replace(day = calendar.monthrange(SelectedFrom.year, SelectedFrom.month)[1])
            
            def dates_bwn_twodates2(start_date, end_date):
                for n in range(int ((end_date - start_date).days)+1):
                    yield (start_date + timedelta(n)).strftime('%d-%b')

            DateList = list(dates_bwn_twodates2(SelectedFrom.date(), SelectedTo.date()))
            if len(DateList) == 31:
                DummyCol = []
            elif len(DateList) == 30:
                DummyCol = ['']
            elif len(DateList) == 29:
                DummyCol = ['', '']
            elif len(DateList) == 28:
                DummyCol = ['', '', '']
            else:
                messagebox.showerror("Error", "Column size error! Please contact Innovation team")
            
            ReportHeader = ["EmpID", "Name", "Location", 'DOJ', 'ActualLWD', "WFH/WFO"] + DateList + DummyCol
            Attendance_Report.columns = ReportHeader

            query1 = "SELECT Type, LeaveName FROM tblTypeofLeaves WHERE Category = 'Leave' AND Type NOT IN ('CLEAR', 'PR');"
            conn = sqlite3.connect(AttendanceDBPath)
            df_LeaveType = pd.read_sql_query(query1, conn)
            conn.close()
            df_LeaveType_HalfDay = df_LeaveType[df_LeaveType['LeaveName'].str.contains('Half')]
            df_Type_Empty = pd.DataFrame(columns=df_LeaveType['Type'].to_list())

            if len(DateList) < 31:
                Attendance_Report.drop([''], axis=1, inplace=True)
            Attendance_Report = pd.concat([Attendance_Report, df_Type_Empty])

            for i in df_LeaveType['Type'].to_list():
                if i in df_LeaveType_HalfDay['Type'].to_list():
                    Attendance_Report[i] = Attendance_Report.eq(i).sum(1) * 0.5
                else:    
                    Attendance_Report[i] = Attendance_Report.eq(i).sum(1)

            df_LeaveType_List = df_LeaveType['Type'].to_list()
            del df_LeaveType_List[0]
            
            Attendance_Report['Total Leaves'] = Attendance_Report[df_LeaveType_List].sum(1)
                                
            query1 = "SELECT EmpID, Date, LeaveType, Hours, Comments FROM tblAttendanceComments;"
            conn = sqlite3.connect(AttendanceDBPath)
            df_CommentsData = pd.read_sql_query(query1, conn)
            conn.close()

            df_CommentsData['Date'] = pd.to_datetime(df_CommentsData['Date'], format='%Y-%m-%d', errors='coerce')
            df_CommentsData_Filtered = df_CommentsData.loc[(df_CommentsData['Date'] >= SelectedFrom) & (df_CommentsData['Date'] <= SelectedTo)]
            CommentsData_Merged = Attendance_Report[['EmpID', 'Name', 'Location']].merge(df_CommentsData_Filtered, left_on=['EmpID'], right_on=['EmpID'], how='left').fillna('')
            CommentsData_Merged = CommentsData_Merged.loc[CommentsData_Merged['LeaveType'] != '']
            
            query1 = "SELECT Type, LeaveName FROM tblTypeofLeaves WHERE Category = 'Leave' AND Type NOT IN ('CLEAR');"
            conn = sqlite3.connect(AttendanceDBPath)
            df_LeaveType = pd.read_sql_query(query1, conn)
            conn.close()
            
            wb=xw.Book()
            sh1=wb.sheets.add('Attendance Details')
            sh2=wb.sheets.add('Comments',after=sh1)
            sh3=wb.sheets.add('Leave Type',after=sh2)
            sh1.range('A1').options(pd.DataFrame, expand='table',index=False).value=Attendance_Report.sort_values(by=['EmpID'])
            sh2.range('A1').options(pd.DataFrame, expand='table',index=False).value=CommentsData_Merged.sort_values(by=['EmpID'])
            sh3.range('A1').options(pd.DataFrame, expand='table',index=False).value=df_LeaveType
            wb.sheets['Sheet1'].delete()
            sh1.autofit()
            sh2.autofit()
            sh3.autofit()
            sh1.select()
            messagebox.showinfo('Attendance Report','Attendance Data Report Exported!')
            wb.activate(steal_focus=True)
        
        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        Attendancetree1.tag_configure("evenrow",background='white')
        Attendancetree1.tag_configure("oddrow",background='lightblue')

        rowid = 0
        for row in Attendance_Merged_List:
            if row[0] != None:
                rowid = rowid + 1
                if rowid % 2 == 0:
                    Attendancetree1.insert("", END, values=row, tags=('oddrow',))
                else:
                    Attendancetree1.insert("", END, values=row, tags=('evenrow',))
        
    ####### Day Tree Dummy #######
    arrlbHeader2 = ['', '', '', 'Mon','Tue','Wed','Thu','Fri','Sat','Sun','Mon','Tue','Wed','Thu','Fri','Sat','Sun','Mon','Tue','Wed','Thu','Fri','Sat','Sun','Mon','Tue','Wed','Thu','Fri','Sat','Sun','Mon','Tue','Wed']
    Attendancetree2 = MyTreeview(frame2, columns=arrlbHeader2, show="headings", height=1, selectmode='browse')
    arrColWidth2 = [50, 180, 80, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]
    arrColAlignment2 = ["center", "w", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center"]
    
    ####### Day Tree Dummy #######
    for iCount in range(len(arrlbHeader2)):
        strHdr = arrlbHeader2[iCount]
        Attendancetree2.heading(iCount, text=strHdr)
        Attendancetree2.column(iCount, width=arrColWidth2[iCount], stretch=False,  anchor=arrColAlignment2[iCount])

    arrlbHeader1 = ['Emp ID', 'Name', 'WFH/WFO', '1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']
    Attendancetree1 = MyTreeview(frame2, columns=arrlbHeader1, show="headings", height=15, selectmode='browse')
    arrColWidth1 = [50, 180, 80, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]
    arrColAlignment1 = ["center", "w", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center"]
      
    for iCount in range(len(arrlbHeader1)):
        strHdr = arrlbHeader1[iCount]
        Attendancetree1.heading(strHdr, text=strHdr)
        Attendancetree1.column(arrlbHeader1[iCount], width=arrColWidth1[iCount], stretch=False, anchor=arrColAlignment1[iCount])
        
    Attendancetree2.place(x=1, y=40)
    Attendancetree1.place(x=1, y=56)
    
    Attendancetree1_vsb = ttk.Scrollbar(frame1, orient="vertical", command=Attendancetree1.yview)
    Attendancetree1_vsb.place(x=1005, y=50, height=336)
    Attendancetree1.configure(yscrollcommand=Attendancetree1_vsb.set)

    Attendancetree1.bind('<MouseWheel>', StopScrollwheel)

    def CheckHoliday():
        Country = Queryfun("SELECT Holidays FROM tblTeams WHERE TeamName = '" + Entry1.get() + "';")
        query1 = "SELECT Date FROM tblHolidays WHERE Country = '" + Country[0] +"';"
        conn = sqlite3.connect(AttendanceDBPath)
        df_HolidayDates = pd.read_sql_query(query1, conn)
        conn.close()
        return df_HolidayDates['Date'].to_list()
    
    def Validate_PresentAll():
        Label5.config(foreground='#054457')

        DateLabelList = [Label5]
        DateEntryList = [Entry5]
                
        HolidayDates = CheckHoliday()
        
        if Entry5.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        elif Entry5.get_date() > date.today() or Entry5.get_date() < date.today()-timedelta(days=6):
            messagebox.showerror('Validation Check','Selected Date should not be greater/less than permitted range! Please check')
            return False
        elif Entry5.get_date().weekday() > 4 or Entry5.get() in HolidayDates:
            answer = messagebox.askyesno(title='Weekend/Holiday Selected', message='You have selected weekend/holiday date for Present All! Please confirm')
            if answer:
                Submit = True
            else:
                return False
        else:
            Submit = True

        for i in range(0,len(DateEntryList)):
            if DateEntryList[i].get() != '':
                result = Date_Validation(DateEntryList[i])
                if result == 'Failed':
                    DateLabelList[i].config(foreground='red')
                    DateEntryList[i].focus_set()
                    messagebox.showerror('Date Error','This typed date is not valid! Please check')
                    Submit = False
                    break

        if Submit:
            PresentAll()

    def PresentAll():
        if Entry4.get() != 'All':
            query1 = """SELECT A.EmpID, A.DOJ, B.ActualLWD, A.EmpStatus FROM tblEmpData AS A 
                        LEFT JOIN (SELECT EmpID, ActualLWD, MAX(RegID) from tblRegData GROUP BY EmpID) AS B
                        ON A.EmpID = B.EmpID
                        WHERE A.Team = '""" + Entry1.get() + """' AND A.Location = '""" + Entry4.get() + """';"""
        
        else:
            query1 = """SELECT A.EmpID, A.DOJ, B.ActualLWD, A.EmpStatus FROM tblEmpData AS A 
                        LEFT JOIN (SELECT EmpID, ActualLWD, MAX(RegID) from tblRegData GROUP BY EmpID) AS B
                        ON A.EmpID = B.EmpID
                        WHERE A.Team = '""" + Entry1.get() + """';"""

        conn = sqlite3.connect(ProDBPath)
        df_EmpData = pd.read_sql_query(query1, conn)
        conn.close()
        SelectedDate = Entry5.get_date()
        
        df_EmpData['DOJ'] = pd.to_datetime(df_EmpData['DOJ'], format='%d-%m-%Y', errors='coerce')
        df_EmpData['ActualLWD'] = pd.to_datetime(df_EmpData['ActualLWD'], format='%d-%m-%Y', errors='coerce')
        df_EmpData['SelectedDate'] = pd.to_datetime(Entry5.get(), format='%d-%m-%Y', errors='coerce')
        
        df_EmpData_Filtered = df_EmpData.loc[(df_EmpData['DOJ'] <= df_EmpData['SelectedDate']) & ((df_EmpData['ActualLWD'] >= df_EmpData['SelectedDate']) | (df_EmpData['ActualLWD'].isnull()))]
        df_EmpData_List = df_EmpData_Filtered['EmpID'].values.tolist()
        
        for i in df_EmpData_List:
            RowExists = ViewQueryfun(AttendanceDBPath,"SELECT EXISTS(SELECT 1 FROM tblAttendance WHERE EmpID = '" + str(i) + "' AND Year = '" + str(SelectedDate.year) + "' AND Month = '" + str(SelectedDate.month) + "');")
            if RowExists[0][0] != 1:
                Record = (i, SelectedDate.year, SelectedDate.month)
                InsertQueryfun(AttendanceDBPath,"""INSERT INTO tblAttendance (EmpID, Year, Month) VALUES(?, ?, ?);""", Record)

        query = "UPDATE tblAttendance SET _" + str(SelectedDate.day) + " = 'P', UpdatedBy = (?), UpdatedDate = (?) WHERE Year = (?) AND Month = (?) AND EmpID IN (" + ','.join(map(str, df_EmpData_List)) + ") AND (_" + str(SelectedDate.day) + " IS NULL OR _" + str(SelectedDate.day) + " = '');"
        Record = (Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry2.get(), int(Entry3.get()))
        InsertQueryfun(AttendanceDBPath, query, Record)
        ViewList()
        messagebox.showinfo('Updated','All Present Updated Successfully!')

    def Validate_Clear2():
        LabelList = [Label11, Label12, Label13, Label14, Label15, Label16, Label16_1, Label16_2, Label17]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_LeavesUpdate():
        Validate_Clear2()
        global Entry15_Values
        if Entry15.get() == 'PR':
            AllLabelList = [Label15, Label16_1, Label16_2]
            AllEntryList = [Entry15, Entry16_1, Entry16_2]
            AllEntryValues = [Entry15_Values, Entry16_1_Values, Entry16_2_Values]
            AllEntryMessage = [Entry15_msg, Entry16_1_msg, Entry16_2_msg]
        else:
            AllLabelList = [Label15]
            AllEntryList = [Entry15]
            AllEntryValues = [Entry15_Values]
            AllEntryMessage = [Entry15_msg]

        DateLabelList = [Label13, Label14]
        DateEntryList = [Entry13, Entry14]

        CommentsMandate = QueryfunParam(AttendanceDBPath, "SELECT CommentsMandate FROM tblTypeofLeaves WHERE Type = (?);", (Entry15.get().strip(), ))
        selection = Attendance_LeaveOption.get()
        if selection == 1:
            MandatoryCondition = Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == '' or Entry14.get() == '' or Entry15.get() == ''
        elif selection == 2:
            MandatoryCondition = Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == '' or Entry15.get() == ''

        if MandatoryCondition:
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        elif Entry15.get() == 'PR' and (Entry16_1.get() == '' or Entry16_2.get() == ''):
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        elif Entry13.get_date() > Entry14.get_date():
            if selection == 1:
                messagebox.showerror('Validation Check','From Date should be greater than To Date!')
                return False
        elif Entry14.get_date() > date.today() and (Entry15.get() == 'P' or Entry15.get() == 'PR'):
            messagebox.showerror('Validation Check','Leave To should not be greater than Today, if Present or Permission is selected!')
            return False
        elif len(CommentsMandate) !=0 and CommentsMandate[0] == 'Yes' and Entry17.get(1.0, END).strip() == '':
            messagebox.showerror('Validation Check','Comments are mandatory for this selected Leave type!')
            return False
        else:
            Submit = True
            
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        return False
                        break
            
            for i in range(0,len(DateEntryList)):
                if DateEntryList[i].get() != '':
                    result = Date_Validation(DateEntryList[i])
                    if result == 'Failed':
                        DateLabelList[i].config(foreground='red')
                        DateEntryList[i].focus_set()
                        messagebox.showerror('Date Error','This typed date is not valid! Please check')
                        Submit = False
                        return False
                        break

            query1 = """SELECT A.EmpID, A.DOJ, B.ActualLWD, A.EmpStatus FROM tblEmpData AS A 
                        LEFT JOIN (SELECT EmpID, ActualLWD, MAX(RegID) from tblRegData GROUP BY EmpID) AS B
                        ON A.EmpID = B.EmpID
                        WHERE A.EmpID = '""" + Entry11.get() + """';"""

            conn = sqlite3.connect(ProDBPath)
            df_EmpData = pd.read_sql_query(query1, conn)
            conn.close()
            df_EmpData['DOJ'] = pd.to_datetime(df_EmpData['DOJ'], format='%d-%m-%Y', errors='coerce')
            df_EmpData['ActualLWD'] = pd.to_datetime(df_EmpData['ActualLWD'], format='%d-%m-%Y', errors='coerce')
            df_EmpData['FromDate'] = pd.to_datetime(Entry13.get(), format='%d-%m-%Y', errors='coerce')

            if selection == 1:
                df_EmpData['ToDate'] = pd.to_datetime(Entry14.get(), format='%d-%m-%Y', errors='coerce')
                
                df_EmpData_Filtered1 = df_EmpData.loc[(df_EmpData['DOJ'] <= df_EmpData['FromDate']) & (df_EmpData['DOJ'] <= df_EmpData['ToDate'])]
                df_EmpData_Filtered2 = df_EmpData.loc[((df_EmpData['ActualLWD'] >= df_EmpData['FromDate']) | (df_EmpData['ActualLWD'].isnull())) & ((df_EmpData['ActualLWD'] >= df_EmpData['ToDate']) | (df_EmpData['ActualLWD'].isnull()))]
                
            elif selection == 2:
                df_EmpData_Filtered1 = df_EmpData.loc[(df_EmpData['DOJ'] <= df_EmpData['FromDate'])]
                df_EmpData_Filtered2 = df_EmpData.loc[((df_EmpData['ActualLWD'] >= df_EmpData['FromDate']) | (df_EmpData['ActualLWD'].isnull()))]

            if len(df_EmpData_Filtered1) == 0 or len(df_EmpData_Filtered2) == 0:
                Submit = False
                messagebox.showerror('Validation Check','Selected Date should not be less than DOJ or greater than LWD! Please check')
                return False
            else:
                Submit = True

            if Submit:
                LeavesUpdate()

    def LeavesUpdate():
        selection = Attendance_LeaveOption.get()
        if selection == 1:
            SelectedFrom = Entry13.get_date()
            SelectedTo = Entry14.get_date()
            DateList = pd.date_range(SelectedFrom.replace(day=1),SelectedTo,freq='MS').tolist()
            
            for i in DateList:
                RowExists = ViewQueryfun(AttendanceDBPath,"SELECT EXISTS(SELECT 1 FROM tblAttendance WHERE EmpID = '" + Entry11.get() + "' AND Year = '" + str(i.year) + "' AND Month = '" + str(i.month) + "');")
                if RowExists[0][0] != 1:
                    Record = (Entry11.get(), i.year, i.month)
                    InsertQueryfun(AttendanceDBPath,"""INSERT INTO tblAttendance (EmpID, Year, Month) VALUES (?, ?, ?);""", Record)
            
            delta = timedelta(days=1)
            DateFrom = SelectedFrom
            while DateFrom <= SelectedTo:
                if Entry15.get() == 'CLEAR':
                    query = "UPDATE tblAttendance SET _" + str(DateFrom.day) + " = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE Year = (?) AND Month = (?) AND EmpID = (?);"
                    Record = ('', Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), DateFrom.year, DateFrom.month, Entry11.get())
                    InsertQueryfun(AttendanceDBPath, query, Record)

                    RowExistsPR = ViewQueryfun(AttendanceDBPath,"SELECT EXISTS(SELECT 1 FROM tblAttendanceComments WHERE EmpID = '" + Entry11.get() + "' AND Date = '" + str(DateFrom) + "');")
                    if RowExistsPR[0][0] == 1:
                        Record = (Entry11.get(), DateFrom)
                        InsertQueryfun(AttendanceDBPath,"DELETE FROM tblAttendanceComments WHERE EmpID = (?) AND Date = (?);", Record)
                else:
                    if DateFrom.weekday() <=4 or Entry15.get() == 'P':
                        query = "UPDATE tblAttendance SET _" + str(DateFrom.day) + " = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE Year = (?) AND Month = (?) AND EmpID = (?);"
                        Record = (Entry15.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), DateFrom.year, DateFrom.month, Entry11.get())
                        InsertQueryfun(AttendanceDBPath, query, Record)

                        RowExistsPR = ViewQueryfun(AttendanceDBPath,"SELECT EXISTS(SELECT 1 FROM tblAttendanceComments WHERE EmpID = '" + Entry11.get() + "' AND Date = '" + str(DateFrom) + "');")
                        if RowExistsPR[0][0] == 1:
                            Record = (Entry11.get(), DateFrom)
                            InsertQueryfun(AttendanceDBPath,"DELETE FROM tblAttendanceComments WHERE EmpID = (?) AND Date = (?);", Record)
                
                        if Entry15.get() == 'PR':
                            PermissionHours = Entry16_1.get() + ':' + Entry16_2.get()
                        else:
                            PermissionHours = ''
                        
                        CommentsMandate = QueryfunParam(AttendanceDBPath, "SELECT CommentsMandate FROM tblTypeofLeaves WHERE Type = (?);", (Entry15.get(), ))
                        if len(CommentsMandate) !=0 and CommentsMandate[0] == 'Yes':
                            query = "INSERT INTO tblAttendanceComments (EmpID, Date, LeaveType, Hours, Comments, UpdatedBy, UpdatedDate) VALUES (?, ?, ?, ?, ?, ?, ?);"
                            Record = (Entry11.get(), DateFrom, Entry15.get(), PermissionHours, Entry17.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                            InsertQueryfun(AttendanceDBPath, query, Record)

                DateFrom += delta

            ViewList()
            messagebox.showinfo('Updated','Leave Details Updated Successfully!')

        elif selection == 2:
            query = "INSERT INTO tblWFHorWFO (EmpID, Date, WFHorWFO, Comments, UpdatedBy, UpdatedDate) VALUES (?, ?, ?, ?, ?, ?);"
            Record = (Entry11.get(), Entry13.get(), Entry15.get(), Entry17.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
            InsertQueryfun(AttendanceDBPath, query, Record)

            ViewList()
            messagebox.showinfo('Updated','WFH/WFO Details Updated Successfully!')
        else:
            messagebox.showerror('Error','Details Not Updated! Please try again')

        LeaveNameClear()
        SelectAttendance_LeaveOption()
        
    def LeaveTypeSelect(Event):
        Temp = Entry15.get().strip()
        if Temp != "":
            LeaveLabelName = QueryfunParam(AttendanceDBPath, "SELECT LeaveName FROM tblTypeofLeaves WHERE Type = (?);", (Temp, ))
            if len(LeaveLabelName) != 0:
                Label15_1.config(text=LeaveLabelName[0])
            else:
                Label15_1.config(text='')

            Entry16_1.config(state='normal')
            Entry16_2.config(state='normal')
            if Temp == 'PR':
                Entry16_1.delete(0,END)
                Entry16_2.delete(0,END)
            else:
                Entry16_1.delete(0,END)
                Entry16_2.delete(0,END)
                Entry16_1.config(state='disabled')
                Entry16_2.config(state='disabled')

            CommentsMandate = QueryfunParam(AttendanceDBPath, "SELECT CommentsMandate FROM tblTypeofLeaves WHERE Type = (?);", (Temp, ))
            if len(CommentsMandate) !=0 and CommentsMandate[0] == 'Yes':
                selection = Attendance_LeaveOption.get()
                if selection == 1:
                    Label17.place(x=580, y=410)
                    Entry17.place(x=580, y=430)
                    Entry17_vsb.place(x=723, y=430, height=65)
                elif selection == 2:
                    Label17.place(x=460, y=410)
                    Entry17.place(x=460, y=430)
                    Entry17_vsb.place(x=603, y=430, height=65)
            else:
                Label17.place_forget()
                Entry17.place_forget()
                Entry17_vsb.place_forget()
        else:
            Label15_1.config(text='')
            Label17.place_forget()
            Entry17.place_forget()
            Entry17_vsb.place_forget()

    def LeaveNameClear():
        Entry11.config(state='normal')
        Entry12.config(state='normal')
        Entry11.delete(0,END)
        Entry12.delete(0,END)
        Entry11.config(state='disabled')
        Entry12.config(state='disabled')

    def LeaveFieldsClear():
        Validate_Clear2()
        Entry13.delete(0,END)
        Entry14.delete(0,END)
        Entry15.delete(0,END)
        Entry16_1.config(state='normal')
        Entry16_1.delete(0,END)
        Entry16_1.config(state='disabled')
        Entry16_2.config(state='normal')
        Entry16_2.delete(0,END)
        Entry16_2.config(state='disabled')
        Entry17.delete(1.0,END)

    def SelectAttendance_LeaveOption():
        LeaveFieldsClear()
        SubmitB.place(x=750, y=440)
        CancelB.place(x=900, y=440)
        Label15_1.config(text='')
        selection = Attendance_LeaveOption.get()
        global Entry15_Values
        if selection == 1:
            Entry15_Values = QueryfunParam(AttendanceDBPath, "SELECT Type FROM tblTypeofLeaves WHERE Category = 'Leave' ORDER BY ID;", [])
            Entry15.config(completevalues=Entry15_Values)
            Label13.config(text="Leave From*")
            Entry13.config(maxdate=date.today()+timedelta(365))
            Entry13.set_date(date.today())
            Entry14.set_date(date.today())
            Label15.config(text="Leave Type*")
                    
            Label11.place(x=10, y=460)
            Label12.place(x=110, y=460)
            Label13.place(x=350, y=410)
            Label14.place(x=460, y=410)
            Label15.place(x=350, y=460)
            Label16.place(x=460, y=460)

            Entry11.place(x=10, y=480)
            Entry12.place(x=110, y=480)
            Entry13.place(x=350, y=430)
            Entry14.place(x=460, y=430)
            Entry15.place(x=350, y=480)
            Label15_1.place(x=310, y=500)
            Entry16_1.place(x=470, y=480)
            Label16_1.place(x=465, y=500)
            Label16_1_1.place(x=495, y=480)
            Entry16_2.place(x=510, y=480)
            Label16_2.place(x=505, y=500)

        elif selection == 2:
            Entry15_Values = QueryfunParam(AttendanceDBPath, "SELECT Type FROM tblTypeofLeaves WHERE Category = 'WF' ORDER BY ID;", [])
            Entry15.config(completevalues=Entry15_Values)
            Label13.config(text="WFH/WFO From*")
            Entry13.config(maxdate=date.today())
            Entry13.set_date(date.today())

            Label14.place_forget()
            Entry14.place_forget()
            Label15.config(text="WFH/WFO*")
            Label16.place_forget()
            Entry16_1.place_forget()
            Label16_1.place_forget()
            Label16_1_1.place_forget()
            Entry16_2.place_forget()
            Label16_2.place_forget()

            Label11.place(x=10, y=460)
            Label12.place(x=110, y=460)
            Label13.place(x=350, y=410)
            Label15.place(x=350, y=460)

            Entry11.place(x=10, y=480)
            Entry12.place(x=110, y=480)
            Entry13.place(x=350, y=430)
            Entry15.place(x=350, y=480)

        LeaveTypeSelect(Event)

    Attendance_LeaveOption = IntVar()
    R1 = Radiobutton(Can1, text="Leave", variable=Attendance_LeaveOption, value=1,command=SelectAttendance_LeaveOption, bg='white', fg='#006E8E', activeforeground='red', selectcolor='white', font=("Calibri",11,"bold"),cursor='hand2')
    R2 = Radiobutton(Can1, text="WFH/WFO", variable=Attendance_LeaveOption, value=2,command=SelectAttendance_LeaveOption, bg='white', fg='#006E8E', activeforeground='red', selectcolor='white', font=("Calibri",11,"bold"),cursor='hand2')
    Attendance_LeaveOption.set(1)
    
    R1.place(x=10, y=410)
    R2.place(x=100, y=410)

    global Entry15_Values

    Label11 = Label(Can1, text="Emp ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label12 = Label(Can1, text="Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label13 = Label(Can1, text="Leave From*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label14 = Label(Can1, text="Leave To*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label15 = Label(Can1, text="Leave Type*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label15_1 = Label(Can1, text="",width=22,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='center')
    Label16 = Label(Can1, text="Permission Hours*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label16_1 = Label(Can1, text="HH",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
    Label16_1_1 = Label(Can1, text=":",width=2,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label16_2 = Label(Can1, text="MM",width=4,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
    Label17 = Label(Can1, text="Comments*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')

    Entry11 = Entry(Can1, bg="white",font=("Calibri",10), width=10)
    Entry12 = Entry(Can1, bg="white",font=("Calibri",10), width=30)
    
    Entry13 = DateEntry(Can1,width=10,bg="white",font=("Calibri",10),date_pattern='dd-mm-yyyy',mindate=date.today()-timedelta(days=6))
    Entry13.delete(0, END)
    Entry13.set_date(date.today())

    Entry14 = DateEntry(Can1,width=10,bg="white",font=("Calibri",10),date_pattern='dd-mm-yyyy')
    Entry14.delete(0, END)
    Entry14.set_date(date.today())

    Entry15_Values = []
    Entry15 = AutocompleteCombobox(Can1, width=12, completevalues=Entry15_Values)
    Entry15_msg = 'This Option is not available in the list! please check'
    Entry15.bind("<FocusOut>", lambda event: LeaveTypeSelect(event))
    Entry15.bind("<<ComboboxSelected>>", lambda event: LeaveTypeSelect(event))
    
    Entry16_1_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08']
    Entry16_1 = Entry(Can1,validate='key',bg="white",font=("Calibri",10),width=2)
    Entry16_1['validatecommand'] = (Entry16_1.register(AcceptNum),'%P','%d')
    Entry16_1_msg = 'This typed hour is not correct, please check!'
    
    Entry16_2_Values = ['0','00','1','01','2','02','3','03','4','04','5','05','6','06','7','07','8','08','9','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
    Entry16_2 = Entry(Can1,validate='key',bg="white",font=("Calibri",10),width=2)
    Entry16_2['validatecommand'] = (Entry16_2.register(AcceptNum),'%P','%d')
    Entry16_2_msg = 'This typed minute is not correct, please check!'

    Entry17 = Text(Can1,bg="white",font=("Calibri",10),width=20,height=4)
    Entry17.bind('<Tab>', lambda event: focusNext(Entry17))
    Entry17.bind('<Shift-Tab>', lambda event: focusPrev(Entry17))

    Entry17_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry17.yview)
    Entry17.configure(yscrollcommand=Entry17_vsb.set)

    Entry11.config(state='disabled')
    Entry12.config(state='disabled')
    Entry16_1.config(state='disabled')
    Entry16_2.config(state='disabled')
    
    def LeavesUpdateCancel():
        LeaveNameClear()
        SelectAttendance_LeaveOption()

    Image_Submit= PhotoImage(file=r')
    Image_Reset= PhotoImage(file=r')

    SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_LeavesUpdate(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:LeavesUpdateCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
    SubmitB.image = Image_Submit
    CancelB.image = Image_Reset

    SelectAttendance_LeaveOption()

########################################################## This is RAG Status Page ########################################################

def RAGStatusCheck(Home):
    if RAG_Access == 'Yes':
        RAGStatus(Home)
    else:
        messagebox.showerror('No Access',"You are not authorised to access 'RAG Status' module! Contact Innovation Team")

def RAGStatus(Home):
    global Red, Amber, Green, TotalCount
    RAGCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    RAGCan.place(x=150, y=10)

    HeaderLabel1 = Label(RAGCan, text="RAG Status",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",16,"bold"),anchor='center')
    HeaderLabel1.place(x=420, y=10)

    Can1=Canvas(RAGCan,bg="white", width=1020, height=520, highlightthickness=0)
    Can1.place(x=10, y=50)

    def SelectedClear():
        Entry2_0.config(state='normal')
        Entry2_0.delete(0, END)
        Entry2_0.config(state='disabled')
        
        Entry2.config(state='normal')
        Entry2.delete(0, END)
        Entry2.config(state='disabled')

        Entry3.delete(0, END)
        Entry4.delete(0, END)
        Entry5.delete(1.0, END)
        
    def OnClick(event, treename):
        SelectedClear()
        item = treename.selection()
        for i in item:
            Entry2_0.config(state='normal')
            Entry2_0.delete(0, END)
            Entry2_0.insert(0,treename.item(i, "values")[0])
            Entry2_0.config(state='disabled')

            Entry2.config(state='normal')
            Entry2.delete(0, END)
            Entry2.insert(0,treename.item(i, "values")[1])
            Entry2.config(state='disabled')

            Entry3.delete(0, END)
            Entry3.set(treename.item(i, "values")[3])

            Entry4.delete(0, END)
            Entry4.set(treename.item(i, "values")[4])

            Entry5.delete(1.0, END)
            Entry5.insert(1.0, treename.item(i, "values")[5])
                
    def TeamList(event):
        global Red, Amber, Green, TotalCount
        SelectedClear()
        RAGTree.delete(*RAGTree.get_children())

        if Entry1.get() == 'All Teams' and Entry1_1.get() == 'All':
            query_EmpData = "SELECT EmpID, EmpName, Location, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"    
        elif Entry1.get() == 'All Teams' and Entry1_1.get() != 'All':
            query_EmpData = "SELECT EmpID, EmpName, Location, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Location = '" + Entry1_1.get() + "';"    
        elif Entry1.get() != 'All Teams' and Entry1_1.get() == 'All':
            query_EmpData = "SELECT EmpID, EmpName, Location, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Team = '" + Entry1.get() + "';"    
        else:             
            query_EmpData = "SELECT EmpID, EmpName, Location, Team AS CoreTeam FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Team = '" + Entry1.get() + "' AND Location = '" + Entry1_1.get() + "';"

        conn = sqlite3.connect(ProDBPath)
        df_EmpData = pd.read_sql_query(query_EmpData, conn)
        conn.close()

        query_Trained = """SELECT EmpID, EmpName As Name, RAGStatus, CriticalStaff, Comments FROM tblRAGStatus;"""
        conn = sqlite3.connect(ProDBPath)
        df_RAG = pd.read_sql_query(query_Trained, conn)
        conn.close()
        
        EmpData_RAG_Merged = df_EmpData.merge(df_RAG, left_on=['EmpID'], right_on=['EmpID'], how='left')
        EmpData_RAG_Merged = EmpData_RAG_Merged[['EmpID', 'EmpName', 'Location', 'RAGStatus', 'CriticalStaff', 'Comments']]
        df_RAG_List = EmpData_RAG_Merged.values.tolist()
        
        RAGTree.tag_configure("evenrow",background='white')
        RAGTree.tag_configure("oddrow",background='lightblue')
        rowid = 0
        for row in df_RAG_List:
            if row[0] != None:
                rowid = rowid + 1
                if rowid % 2 == 0:
                    RAGTree.insert("", END, values=row, tags=('oddrow',))
                else:
                    RAGTree.insert("", END, values=row, tags=('evenrow',))

        df_Grouped = EmpData_RAG_Merged.groupby(['RAGStatus']).agg({'EmpID':'count'})
        
        if 'Amber' in df_Grouped.index:
            Amber = df_Grouped.loc['Amber', 'EmpID']
        else:
            Amber = 0

        if 'Green' in df_Grouped.index:
            Green = df_Grouped.loc['Green', 'EmpID']
        else:
            Green = 0

        if 'Red' in df_Grouped.index:
            Red = df_Grouped.loc['Red', 'EmpID']
        else:
            Red = 0

        TotalCount = Red + Amber + Green

        Label_Red_Value.config(text=Red)
        Label_Amber_Value.config(text=Amber)
        Label_Green_Value.config(text=Green)
        Label_Total_Value.config(text=TotalCount)
        
    Label1 = Label(Can1, text="Team Name*",width=12,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label1_1 = Label(Can1, text="Location*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2_0 = Label(Can1, text="Employee ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can1, text="Employee Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can1, text="RAG Status*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label4 = Label(Can1, text="Critical Staff*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label5 = Label(Can1, text="Comments",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    
    Entry1_Values = Queryfun("SELECT TeamName FROM tblTeams;")
    Entry1_Values.append('All Teams')
    Entry1 = AutocompleteCombobox(Can1, width=30, completevalues=Entry1_Values)
    Entry1.set('All Teams')
    Entry1_msg = 'This Team is not available in the list! please check'
    Entry1.bind("<FocusOut>", TeamList)
    Entry1.bind("<<ComboboxSelected>>", TeamList)

    Entry1_1_Values = ['All', 'Chennai', 'Bangalore']
    Entry1_1 = AutocompleteCombobox(Can1, width=12, completevalues=Entry1_1_Values)
    Entry1_1.set('All')
    Entry1_1_msg = 'This Location is not available in the list! please check'
    Entry1_1.bind("<FocusOut>", TeamList)
    Entry1_1.bind("<<ComboboxSelected>>", TeamList)

    Entry2_0 = Entry(Can1, bg="white",font=("Calibri",10), width=30)
    Entry2_0.config(state='disabled')

    Entry2 = Entry(Can1, bg="white",font=("Calibri",10), width=30)
    Entry2.config(state='disabled')

    Entry3_Values = ['Red', 'Amber', 'Green']
    Entry3 = AutocompleteCombobox(Can1, width=33, completevalues=Entry3_Values)
    Entry3_msg = 'This option is not available in the list! please check'

    Entry4_Values = ['Yes', 'No']
    Entry4 = AutocompleteCombobox(Can1, width=33, completevalues=Entry4_Values)
    Entry4_msg = 'This option is not available in the list! please check'

    Entry5 = Text(Can1,bg="white",font=("Calibri",10),width=28,height=3)
    Entry5.bind('<Tab>', lambda event: focusNext(Entry5))
    Entry5.bind('<Shift-Tab>', lambda event: focusPrev(Entry5))

    Entry5_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry5.yview)
    Entry5_vsb.place(x=810, y=400, height=50)
    Entry5.configure(yscrollcommand=Entry5_vsb.set)
        
    Label1.place(x=10, y=10)
    Label1_1.place(x=320, y=10)
    Label2_0.place(x=490, y=180)
    Label2.place(x=490, y=235)
    Label3.place(x=490, y=290)
    Label4.place(x=490, y=345)
    Label5.place(x=490, y=415)
    
    Entry1.place(x=105, y=10) 
    Entry1_1.place(x=400, y=10) 
    Entry2_0.place(x=610, y=180)
    Entry2.place(x=610, y=235)
    Entry3.place(x=610, y=290)
    Entry4.place(x=610, y=345)
    Entry5.place(x=610, y=400)
    
    style = ttk.Style()
    style.theme_use('default')
    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
    style.map('Treeview', background=[('selected', 'green')])

    arrlbHeader = ["Emp ID", "Employee Name", "Location", "RAG Status", "Critical Staff", "Comments"]
    RAGTree = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=19, selectmode='browse')
    RAGTree.column("#1", anchor=CENTER, width=60)
    RAGTree.heading("#1", text="Emp ID")
    RAGTree.column("#2", anchor=W, width=200)
    RAGTree.heading("#2", text="Employee Name")
    RAGTree.column("#3", anchor=CENTER, width=70)
    RAGTree.heading("#3", text="Location")
    RAGTree.column("#4", anchor=CENTER, width=70)
    RAGTree.heading("#4", text="RAG Status")
    RAGTree.column("#5", anchor=CENTER, width=70)
    RAGTree.heading("#5", text="Critical Staff")
    RAGTree.column("#6", minwidth=0, width=0)
        
    arrSortType = ["num", "name", "name", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        RAGTree.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
        RAGTree.column(arrlbHeader[iCount], stretch=True)

    RAGTree.place(x=10, y=50)

    RAGTree_vsb2 = ttk.Scrollbar(Can1, orient="vertical", command=RAGTree.yview)
    RAGTree_vsb2.place(x=480, y=50, height=400)
    RAGTree.configure(yscrollcommand=RAGTree_vsb2.set)

    RAGTree.bind("<<TreeviewSelect>>", lambda event: OnClick(event, treename=RAGTree))
    
    def Validate_Clear():
        LabelList = [Label1, Label1_1, Label2_0, Label2, Label3, Label4]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_RAGSubmit():
        Validate_Clear()
        AllLabelList = [Label1, Label1_1, Label3, Label4]
        AllEntryList = [Entry1, Entry1_1, Entry3, Entry4]
        AllEntryValues = [Entry1_Values, Entry1_1_Values, Entry3_Values, Entry4_Values]
        AllEntryMessage = [Entry1_msg, Entry1_1_msg, Entry3_msg, Entry4_msg]

        if Entry2_0.get().strip() == '' or Entry2.get().strip() == '' or Entry3.get().strip() == '' or Entry4.get().strip() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break

        if Submit:
            RAGSubmit()

    def RAGSubmit():
        Record = (Entry3.get(), Entry4.get(), Entry5.get(1.0, END).strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry2_0.get())
        InsertQueryfun(ProDBPath,"""UPDATE tblRAGStatus SET RAGStatus = (?), CriticalStaff = (?), Comments = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);""", Record)
        messagebox.showinfo('Completed','RAG Status Updated Successfully!')
        
        TeamList(Event)
        
    def RAGCancel():
        RAGStatus(Home)

    Image_Red= PhotoImage(file=r')
    Image_Amber= PhotoImage(file=r)
    Image_Green= PhotoImage(file=r)
    Image_Total= PhotoImage(file=r)

    Label_Red = Label(Can1,image=Image_Red,width=125,height=125,bg="white")
    Label_Amber = Label(Can1,image=Image_Amber,width=125,height=125,bg="white")
    Label_Green = Label(Can1,image=Image_Green,width=125,height=125,bg="white")
    Label_Total = Label(Can1,image=Image_Total,width=175,height=175,bg="white")

    Label_Red.image = Image_Red
    Label_Amber.image = Image_Amber
    Label_Green.image = Image_Green
    Label_Total.image = Image_Total

    Label_Red.place(x=520, y=20)
    Label_Amber.place(x=690, y=20)
    Label_Green.place(x=860, y=20)
    Label_Total.place(x=835, y=202)
    
    Label_Red_Value = Label(Can1,text='',width=5,height=1,bg="white",font=("Calibri",13,"bold"))
    Label_Amber_Value = Label(Can1,text='',width=5,height=1,bg="white",font=("Calibri",13,"bold"))
    Label_Green_Value = Label(Can1,text='',width=5,height=1,bg="white",font=("Calibri",13,"bold"))
    Label_Total_Value = Label(Can1,text='',width=5,height=1,bg="white",font=("Calibri",18,"bold"))

    Label_Red_Value.place(x=560, y=70)
    Label_Amber_Value.place(x=730, y=70)
    Label_Green_Value.place(x=900, y=70)
    Label_Total_Value.place(x=890, y=275)

    TeamList(Event)

    Image_Submit= PhotoImage(file=r)
    Image_Reset= PhotoImage(file=r')

    SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_RAGSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:RAGCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
    SubmitB.image = Image_Submit
    CancelB.image = Image_Reset

    SubmitB.place(x=400, y=460)
    CancelB.place(x=600, y=460)


########################################################## This is for Successor Page ########################################################
def SuccessorCheck(Home):
    if Successor_Access == 'Yes':
        SuccessorPlan(Home)
    else:
        messagebox.showerror('No Access',"You are not authorised to access 'Successor Plan' module! Contact Innovation Team")

def SuccessorPlan(Home):
    SuccessorCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    SuccessorCan.place(x=150, y=10)

    HeaderLabel1 = Label(SuccessorCan, text="Successor Plan",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",16,"bold"),anchor='center')
    HeaderLabel1.place(x=420, y=10)

    def SuccessorDetails():
        Can1=Canvas(SuccessorCan,bg="white", width=1020, height=520, highlightthickness=0)
        Can1.place(x=10, y=50)

        global Entry2_Values, Entry4_Values, Entry7_Values

        def SelectedClear1():
            Entry3.config(state='normal')
            Entry3.delete(0, END)
            
            Entry4.config(state='normal')
            Entry4.delete(0, END)
            
            Entry5.config(state='normal')
            Entry5.delete(0, END)
            
            Entry6.delete(0, END)
            Entry7.delete(0, END)
            Entry8.delete(0, END)

            SuccessorTree1.delete(*SuccessorTree1.get_children())
            SuccessorTree2.delete(*SuccessorTree2.get_children())

        def SelectedClear2():
            Entry1.delete(0, END)
            Entry2.delete(0, END)

            Entry3.config(state='normal')
            Entry3.delete(0, END)
            
            Entry4.config(state='normal')
            Entry4.delete(0, END)
            
            Entry5.config(state='normal')
            Entry5.delete(0, END)
            
            Entry6.delete(0, END)
            Entry7.delete(0, END)
            Entry8.delete(0, END)

            SuccessorTree1.delete(*SuccessorTree1.get_children())
            SuccessorTree2.delete(*SuccessorTree2.get_children())

        def OnClick1(event, treename):
            item = treename.selection()
            for i in item:
                Entry3.config(state = 'normal')
                Entry3.delete(0, END)
                Entry3.set(treename.item(i, "values")[1])
                ViewEmpName(Event)
                Entry4.config(state = 'normal')
                Entry4.delete(0, END)
                Entry4.set(treename.item(i, "values")[0])

                Entry5.config(state = 'normal')
                Entry5.delete(0, END)
                Entry5.set(treename.item(i, "values")[3])

        def OnClick2(event, treename):
            item = treename.selection()
            for i in item:
                Entry7.delete(0, END)
                Entry7.set(treename.item(i, "values")[0])

        def ClearTree(event):
            SuccessorTree1.delete(*SuccessorTree1.get_children())
            SelectedClear1()
            
        def Validate_Clear():
            LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='#054457')

        def Validate_ViewList(ReportRequired=''):
            Validate_Clear()
            AllLabelList = [Label1, Label2]
            AllEntryList = [Entry1, Entry2]
            AllEntryValues = [Entry1_Values, Entry2_Values]
            AllEntryMessage = [Entry1_msg, Entry2_msg]

            if Entry1.get().strip() == '':
                messagebox.showerror('Validation Check','Team name should not be left blank!')
                return False
            elif len(Entry2_Values) > 1 and Entry2.get().strip() == '':
                messagebox.showerror('Validation Check','Role name should not be left blank!')
                return False
            else:
                Submit = True
                for i in range(0,len(AllEntryList)):
                    if AllEntryList[i].get() != '':
                        result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                        if result == 'Failed':
                            AllLabelList[i].config(foreground='red')
                            AllEntryList[i].focus_set()
                            messagebox.showerror('Validation Check',AllEntryMessage[i])
                            Submit = False
                            break

            if Submit:
                if ReportRequired == 'ExportReport':
                    ViewList('ExportReport')
                else:
                    ViewList()
            
        def ViewList(ReportRequired=''):
            SuccessorTree1.delete(*SuccessorTree1.get_children())
            
            if Entry1.get() == 'All' and Entry2.get() == 'All':
                query1 = """SELECT A.Name, B.Role, B.Team, A.VacancyStatus, A.SuccessorName1, A.SuccessorName2, A.EmpID, A.SuccessorID1, A.SuccessorID2 FROM tblSuccessorPlan AS A 
                            LEFT JOIN tblEmpData AS B
                            ON A.EmpID = B.EmpID 
                            WHERE B.EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND A.VacancyStatus NOT IN ('Resigned', 'Abscond', 'Termination') 
                            ORDER BY A.Name;"""
            elif Entry1.get() == 'All' and Entry2.get() != 'All':
                query1 = """SELECT A.Name, B.Role, B.Team, A.VacancyStatus, A.SuccessorName1, A.SuccessorName2, A.EmpID, A.SuccessorID1, A.SuccessorID2 FROM tblSuccessorPlan AS A 
                            LEFT JOIN tblEmpData AS B
                            ON A.EmpID = B.EmpID 
                            WHERE B.EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND A.VacancyStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND B.Role = '"""+ Entry2.get() + """' 
                            ORDER BY A.Name;"""
            elif Entry1.get() != 'All' and Entry2.get() == 'All':
                query1 = """SELECT A.Name, B.Role, B.Team, A.VacancyStatus, A.SuccessorName1, A.SuccessorName2, A.EmpID, A.SuccessorID1, A.SuccessorID2 FROM tblSuccessorPlan AS A 
                            LEFT JOIN tblEmpData AS B
                            ON A.EmpID = B.EmpID 
                            WHERE B.EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND A.VacancyStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND B.Team = '"""+ Entry1.get() + """' 
                            ORDER BY A.Name;"""
            else:
                query1 = """SELECT A.Name, B.Role, B.Team, A.VacancyStatus, A.SuccessorName1, A.SuccessorName2, A.EmpID, A.SuccessorID1, A.SuccessorID2 FROM tblSuccessorPlan AS A 
                            LEFT JOIN tblEmpData AS B
                            ON A.EmpID = B.EmpID 
                            WHERE B.EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND A.VacancyStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND B.Team = '"""+ Entry1.get() + """' AND B.Role = '"""+ Entry2.get() + """' 
                            ORDER BY A.Name;"""
            
            conn = sqlite3.connect(ProDBPath)
            df_Data1 = pd.read_sql_query(query1, conn)
            conn.close()
                    
            df_Data1_List = df_Data1.values.tolist()
                    
            SuccessorTree1.tag_configure("evenrow",background='white')
            SuccessorTree1.tag_configure("oddrow",background='lightblue')
            rowid = 0
            for row in df_Data1_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        SuccessorTree1.insert("", END, values=row, tags=('oddrow',))
                    else:
                        SuccessorTree1.insert("", END, values=row, tags=('evenrow',))
        
            if ReportRequired == 'ExportReport':
                if len(df_Data1) > 0:
                    df_Export_Data = df_Data1[['Name', 'Role', 'Team','VacancyStatus', 'SuccessorName1', 'SuccessorName2']]
                    xw.view(df_Export_Data, table=False)
                    messagebox.showinfo('Successor plan','Successor Plan Data Report Exported!')
                else:
                    messagebox.showwarning('No Data','No records available for this selected criteria!')

        def ViewEmpListTree():
            SuccessorTree2.delete(*SuccessorTree2.get_children())
            query1 = """SELECT EmpID, EmpName, Role, Team FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Team = '"""+ Entry6.get() + """' ORDER BY EmpName;"""
            query2 = """SELECT * FROM tblSuccessorPlan WHERE VacancyStatus NOT IN ('Resigned', 'Abscond', 'Termination');"""
            
            conn = sqlite3.connect(ProDBPath)
            df_Data1 = pd.read_sql_query(query1, conn)
            df_Data2 = pd.read_sql_query(query2, conn)
            conn.close()
            df_Data2['SuccessorLevel1'] = numpy.where(df_Data2['SuccessorID1'] != '', 'Successor 1', '')
            df_Data2['SuccessorLevel2'] = numpy.where(df_Data2['SuccessorID2'] != '', 'Successor 2', '')
            df_Data3 = df_Data2[['SuccessorID1', 'SuccessorName1', 'SuccessorLevel1', 'Name']].rename(columns={'SuccessorID1':'SuccessorID', 'SuccessorName1':'SuccessorName', 'SuccessorLevel1':'SuccessorLevel'})
            df_Data4 = df_Data2[['SuccessorID2', 'SuccessorName2', 'SuccessorLevel2', 'Name']].rename(columns={'SuccessorID2':'SuccessorID', 'SuccessorName2':'SuccessorName', 'SuccessorLevel2':'SuccessorLevel'})
            df_Data5 = df_Data3.append(df_Data4, ignore_index=True)
            df_Data_6 = df_Data1.merge(df_Data5, left_on=['EmpID'], right_on=['SuccessorID'], how='left').fillna('')
            df_Data_7 = df_Data_6[['EmpName', 'Role', 'Team', 'SuccessorLevel', 'Name']]

            df_Data1_List = df_Data_7.values.tolist()
                    
            SuccessorTree2.tag_configure("evenrow",background='white')
            SuccessorTree2.tag_configure("oddrow",background='lightblue')
            rowid = 0
            for row in df_Data1_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        SuccessorTree2.insert("", END, values=row, tags=('oddrow',))
                    else:
                        SuccessorTree2.insert("", END, values=row, tags=('evenrow',))

        def ViewEmpList(event):
            global Entry7_Values
            Entry7.delete(0, END)
            Entry8.delete(0, END)
            Temp = Entry6.get()
            if Temp != "":
                Entry7_Values = Queryfun("SELECT EmpName from tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Team = '" + Entry6.get() + "';")
                Entry7.config(completevalues=Entry7_Values)
            else:
                pass

            ViewEmpListTree()

        def ViewRole(event):
            Entry2.delete(0, END)
            Temp = Entry1.get()
            global Entry2_Values
            if Temp != "":
                Entry2_Values = Queryfun("SELECT Role from tblSuccessorLevels WHERE AboveSME = 'Yes';")
                Entry2_Values.append('All')
                Entry2.config(completevalues=Entry2_Values)
            else:
                pass

        def ViewEmpName(event):
            Entry4.delete(0, END)
            Temp = Entry3.get()
            global Entry4_Values
            if Temp != "":
                Entry4_Values = Queryfun("SELECT EmpName from tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND Role = '" + Entry3.get() + "';")
                Entry4.config(completevalues=Entry4_Values)
            else:
                pass

        def SuccessorReport():
            Validate_ViewList('ExportReport')
        
        Label1 = Label(Can1, text="Team*",width=8,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label2 = Label(Can1, text="Role*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label3 = Label(Can1, text="Incumbent Role*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label4 = Label(Can1, text="Incumbent Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label5 = Label(Can1, text="Vacancy Status*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label6 = Label(Can1, text="Successor Team*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label7 = Label(Can1, text="Successor Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label8 = Label(Can1, text="Successor Level*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')

        Entry1_Values = Queryfun("SELECT TeamName FROM tblTeams;")
        Entry1_Values.append('All')
        Entry1 = AutocompleteCombobox(Can1, width=33, completevalues=Entry1_Values)
        Entry1_msg = 'This Team is not available in the list! please check'
        Entry1.bind("<FocusIn>", lambda event: [ViewRole(Event), ClearTree(Event)])
        Entry1.bind("<<ComboboxSelected>>", lambda event: [ViewRole(Event), ClearTree(Event)])

        Entry2_Values = []
        Entry2 = AutocompleteCombobox(Can1, width=33, completevalues=Entry2_Values)
        Entry2_msg = 'This Role is not available in the list! please check'
        Entry2.bind("<FocusIn>", ClearTree)
        Entry2.bind("<<ComboboxSelected>>", ClearTree)

        Entry3_Values = Queryfun("SELECT Role from tblSuccessorLevels WHERE AboveSME = 'Yes';")
        Entry3 = AutocompleteCombobox(Can1, width=33, completevalues=Entry3_Values)
        Entry3_msg = 'This Role is not available in the list! please check'
        Entry3.bind("<FocusIn>", ViewEmpName)
        Entry3.bind("<<ComboboxSelected>>", ViewEmpName)

        Entry4_Values = []
        Entry4 = AutocompleteCombobox(Can1, width=33, completevalues=Entry4_Values)
        Entry4_msg = 'This Name is not available in the list! please check'

        Entry5_Values = Queryfun("SELECT VacancyStatus FROM tblSuccessorVacancy;")
        Entry5 = AutocompleteCombobox(Can1, width=33, completevalues=Entry5_Values)
        Entry5_msg = 'This Option is not available in the list! please check'
        
        Entry6_Values = Queryfun("SELECT TeamName FROM tblTeams;")
        Entry6 = AutocompleteCombobox(Can1, width=33, completevalues=Entry6_Values)
        Entry6_msg = 'This Team is not available in the list! please check'
        Entry6.bind("<FocusIn>", lambda event: ViewEmpList(Event))
        Entry6.bind("<FocusOut>", lambda event: ViewEmpList(Event))
        Entry6.bind("<<ComboboxSelected>>", lambda event: ViewEmpList(Event))
        
        Entry7_Values = []
        Entry7 = AutocompleteCombobox(Can1, width=33, completevalues=Entry7_Values)
        Entry7_msg = 'This Name is not available in the list! please check'

        Entry8_Values = ['Successor 1', 'Successor 2']
        Entry8 = AutocompleteCombobox(Can1, width=33, completevalues=Entry8_Values)
        Entry8_msg = 'This Level is not available in the list! please check'

        Label1.place(x=10, y=10)
        Label2.place(x=320, y=10)

        Label3.place(x=10, y=230)
        Label4.place(x=260, y=230)
        Label5.place(x=510, y=230)

        Label6.place(x=10, y=280)
        Label7.place(x=260, y=280)
        Label8.place(x=510, y=280)

        Entry1.place(x=75, y=10) 
        Entry2.place(x=400, y=10)

        Entry3.place(x=10, y=250)
        Entry4.place(x=260, y=250)
        Entry5.place(x=510, y=250)

        Entry6.place(x=10, y=300)
        Entry7.place(x=260, y=300)
        Entry8.place(x=510, y=300)

        Image_Run= PhotoImage(file=r)
        Image_Export= PhotoImage(file=r)

        RunButton = Button(Can1, image=Image_Run, width=25, height=25, command=lambda:Validate_ViewList(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
        RunButton.image = Image_Run
        RunButton.place(x=630, y=5)

        ReportB = Button(Can1, image=Image_Export, width=25, height=25, command=lambda:SuccessorReport(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
        ReportB.image = Image_Export
        ReportB.place(x=950, y=5)

        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])
        
        arrlbHeader = ["Incumbent Name", "Role", "Team", "Vacancy Status", "Successor 1", "Successor 2", "Emp ID", "Successor ID1", "Successor ID2"]
        SuccessorTree1 = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=8, selectmode='browse')
            
        SuccessorTree1.column("#1", anchor=W, width=160)
        SuccessorTree1.heading("#1", text="Incumbent Name")
        SuccessorTree1.column("#2", anchor=W, width=190)
        SuccessorTree1.heading("#2", text="Role")
        SuccessorTree1.column("#3", anchor=W, width=190)
        SuccessorTree1.heading("#3", text="Team")
        SuccessorTree1.column("#4", anchor=W, width=130)
        SuccessorTree1.heading("#4", text="Vacancy Status")
        SuccessorTree1.column("#5", anchor=W, width=160)
        SuccessorTree1.heading("#5", text="Successor 1")
        SuccessorTree1.column("#6", anchor=W, width=160)
        SuccessorTree1.heading("#6", text="Successor 2")
        SuccessorTree1.column("#7", minwidth=0, width=0)
        SuccessorTree1.column("#8", minwidth=0, width=0)
        SuccessorTree1.column("#9", minwidth=0, width=0)
                
        arrSortType = ["name", "name", "name", "name", "name", "name", "name", "name", "name"]
        for iCount in range(len(arrlbHeader)):
            strHdr = arrlbHeader[iCount]
            SuccessorTree1.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
            SuccessorTree1.column(arrlbHeader[iCount], stretch=True)

        SuccessorTree1.place(x=10, y=40)

        SuccessorTree1_vsb = ttk.Scrollbar(Can1, orient="vertical", command=SuccessorTree1.yview)
        SuccessorTree1_vsb.place(x=1000, y=40, height=180)
        SuccessorTree1.configure(yscrollcommand=SuccessorTree1_vsb.set)

        SuccessorTree1.bind("<<TreeviewSelect>>", lambda event: OnClick1(event, treename=SuccessorTree1))

        arrlbHeader = ["Employee Name", "Role", "Team", "Successor Level", "Incumbent Name", "Emp ID", "Incumbent ID"]
        SuccessorTree2 = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=8, selectmode='browse')
            
        SuccessorTree2.column("#1", anchor=W, width=180)
        SuccessorTree2.heading("#1", text="Employee Name")
        SuccessorTree2.column("#2", anchor=W, width=190)
        SuccessorTree2.heading("#2", text="Role")
        SuccessorTree2.column("#3", anchor=W, width=190)
        SuccessorTree2.heading("#3", text="Team")
        SuccessorTree2.column("#4", anchor=W, width=100)
        SuccessorTree2.heading("#4", text="Successor Level")
        SuccessorTree2.column("#5", anchor=W, width=180)
        SuccessorTree2.heading("#5", text="Incumbent Name")
        SuccessorTree2.column("#6", minwidth=0, width=0)
        SuccessorTree2.column("#7", minwidth=0, width=0)
                    
        arrSortType = ["name", "name", "name", "name", "name", "name", "name"]
        for iCount in range(len(arrlbHeader)):
            strHdr = arrlbHeader[iCount]
            SuccessorTree2.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
            SuccessorTree2.column(arrlbHeader[iCount], stretch=True)

        SuccessorTree2.place(x=10, y=330)

        SuccessorTree2_vsb = ttk.Scrollbar(Can1, orient="vertical", command=SuccessorTree2.yview)
        SuccessorTree2_vsb.place(x=850, y=330, height=180)
        SuccessorTree2.configure(yscrollcommand=SuccessorTree2_vsb.set)

        SuccessorTree2.bind("<<TreeviewSelect>>", lambda event: OnClick2(event, treename=SuccessorTree2))

        def Validate_SuccessorSubmit():
            Validate_Clear()
            global Entry4_Values
            AllLabelList = [Label3, Label4, Label5, Label6, Label7, Label8]
            AllEntryList = [Entry3, Entry4, Entry5, Entry6, Entry7, Entry8]
            AllEntryValues = [Entry3_Values, Entry4_Values, Entry5_Values, Entry6_Values, Entry7_Values, Entry8_Values]
            AllEntryMessage = [Entry3_msg, Entry4_msg, Entry5_msg, Entry6_msg, Entry7_msg, Entry8_msg]

            if Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False
            elif Entry6.get() == '' and Entry7.get() == '' and Entry8.get() == '' and (Entry3.get() == '' or Entry4.get() == '' or Entry5.get() == ''):
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False
            elif Entry6.get() != '' and (Entry7.get() == '' or Entry8.get() == ''):
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False
            elif Entry7.get() != '' and (Entry6.get() == '' or Entry8.get() == ''):
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False
            elif Entry8.get() != '' and (Entry6.get() == '' or Entry7.get() == ''):
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False
            else:
                Submit = True

                for i in range(0,len(AllEntryList)):
                    if AllEntryList[i].get() != '':
                        result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                        if result == 'Failed':
                            AllLabelList[i].config(foreground='red')
                            AllEntryList[i].focus_set()
                            messagebox.showerror('Validation Check',AllEntryMessage[i])
                            Submit = False
                            break

            if Submit:
                SuccessorSubmit()

        def SuccessorSubmit():
            
            IncumbentID = ViewQueryfun(ProDBPath, "SELECT EmpID FROM tblEmpData WHERE EmpName = '" + Entry4.get() + "' AND Role = '" + Entry3.get() + "';")
            IncumbentExists = ViewQueryfun(ProDBPath,"SELECT EXISTS(SELECT 1 FROM tblSuccessorPlan WHERE VacancyStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND EmpID = '" + str(IncumbentID[0][0]) + "');")
            
            if Entry3.get() != '' and Entry4.get() != '' and Entry5.get() != '' and (Entry6.get() == '' and Entry7.get() == '' and Entry8.get() == ''):
                if IncumbentExists[0][0] == 1:
                    Record = (Entry5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry4.get(), IncumbentID[0][0])
                    InsertQueryfun(ProDBPath,"""UPDATE tblSuccessorPlan SET VacancyStatus = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE Name = (?) AND EmpID = (?);""", Record)
                    messagebox.showinfo('Updated','Details Updated Successfully!')
                else:
                    Record = (IncumbentID[0][0], Entry4.get(), Entry5.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                    InsertQueryfun(ProDBPath,"""INSERT INTO tblSuccessorPlan (EmpID, Name, VacancyStatus, UpdatedBy, UpdatedDate) VALUES(?, ?, ?, ?, ?);""", Record)
                    messagebox.showinfo('Added','Details Added Successfully!')
                    Entry1.set('All')
                    Entry2.set(Entry3.get())
            else:
                SuccessorID = ViewQueryfun(ProDBPath, "SELECT EmpID FROM tblEmpData WHERE EmpName = '" + Entry7.get() + "' AND Team = '" + Entry6.get() + "';")
                SuccessorID1Exists = ViewQueryfun(ProDBPath, "SELECT EXISTS(SELECT 1 FROM tblSuccessorPlan WHERE VacancyStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND SuccessorID1 = '" + str(SuccessorID[0][0]) + "');")
                SuccessorID2Exists = ViewQueryfun(ProDBPath, "SELECT EXISTS(SELECT 1 FROM tblSuccessorPlan WHERE VacancyStatus NOT IN ('Resigned', 'Abscond', 'Termination') AND SuccessorID2 = '" + str(SuccessorID[0][0]) + "');")

                SuccessorIDExistsTraining = ViewQueryfun(ProDBPath, "SELECT EXISTS(SELECT 1 FROM tblSuccessorTraining WHERE SuccessorID = '" + str(SuccessorID[0][0]) + "');")

                if IncumbentID[0][0] == SuccessorID[0][0]:
                    messagebox.showerror('Validation','Incumbent and Successor both are same! Please check')
                    return False
                elif SuccessorID1Exists[0][0] == 0 and SuccessorID2Exists[0][0] == 0:
                    if Entry8.get() == 'Successor 1':
                        if IncumbentExists[0][0] == 1:
                            Record1 = (Entry5.get(), SuccessorID[0][0], Entry7.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), IncumbentID[0][0])
                            query1 = "UPDATE tblSuccessorPlan SET VacancyStatus = (?), SuccessorID1 = (?), SuccessorName1 = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);"
                        else:    
                            Record1 = (IncumbentID[0][0], Entry4.get(), Entry5.get(), SuccessorID[0][0], Entry7.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                            query1 = """INSERT INTO tblSuccessorPlan (EmpID, Name, VacancyStatus, SuccessorID1, SuccessorName1, UpdatedBy, UpdatedDate) VALUES(?, ?, ?, ?, ?, ?, ?);"""
                    elif Entry8.get() == 'Successor 2':
                        if IncumbentExists[0][0] == 1:
                            Record1 = (Entry5.get(), SuccessorID[0][0], Entry7.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), IncumbentID[0][0])
                            query1 = """UPDATE tblSuccessorPlan SET VacancyStatus = (?), SuccessorID2 = (?), SuccessorName2 = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE EmpID = (?);"""
                        else:    
                            Record1 = (IncumbentID[0][0], Entry4.get(), Entry5.get(), SuccessorID[0][0], Entry7.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                            query1 = """INSERT INTO tblSuccessorPlan (EmpID, Name, VacancyStatus, SuccessorID2, SuccessorName2, UpdatedBy, UpdatedDate) VALUES(?, ?, ?, ?, ?, ?, ?);"""
                    InsertQueryfun(ProDBPath, query1, Record1)

                    if SuccessorIDExistsTraining[0][0] == 0:
                        Record2 = (SuccessorID[0][0], Entry7.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                        query2 = """INSERT INTO tblSuccessorTraining (SuccessorID, SuccessorName, UpdatedBy, UpdatedDate) VALUES(?, ?, ?, ?);"""
                        InsertQueryfun(ProDBPath, query2, Record2)

                    messagebox.showinfo('Added','Successor Details Added Successfully!')
                else:
                    messagebox.showerror('Validation','This user is already assigned as Successor! Please check')
                    return False
        
            ViewList()
            ViewEmpListTree()

        def SuccessorCancel():
            SelectedClear2()

        Image_Submit= PhotoImage(file=r')
        Image_Reset= PhotoImage(file=r')

        SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_SuccessorSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
        CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:SuccessorCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
        SubmitB.image = Image_Submit
        CancelB.image = Image_Reset

        SubmitB.place(x=750, y=255)
        CancelB.place(x=900, y=255)

    def TrainingDetails():
        Can2=Canvas(SuccessorCan,bg="white", width=1020, height=520, highlightthickness=0)
        Can2.place(x=10, y=50)

        global Entry2_Values, Entry5_Values

        def SelectedClear1():
            Entry3_0_Invisible.delete(0,END)

            Entry3.configure(state = "normal")
            Entry3.delete(0,END)
            Entry3.configure(state = "disabled")

            SelectedClear2()

        def SelectedClear2():
            Entry4.delete(0, END)
            Entry5.delete(0, END)
            Entry6.delete(0, END)
            Entry7.delete(0, END)

        def OnClick1(event, treename):
            SelectedClear1()
            item = treename.selection()
            for i in item:
                Entry3_0_Invisible.delete(0,END)
                Entry3_0_Invisible.insert(0,treename.item(i, "values")[0])

                Entry3.configure(state = "normal")
                Entry3.delete(0,END)
                Entry3.insert(0,treename.item(i, "values")[1])
                Entry3.configure(state = "disabled")

                EmpID = treename.item(i, "values")[0]
                TrainingTreeRefresh(EmpID)
                
        def TrainingTreeRefresh(EmpID):
            SuccessorTree4.delete(*SuccessorTree4.get_children())
            ViewDashfn(ProDBPath,"SELECT TrainingCategory, TrainingName, TargetDate, TrainingStatus FROM tblSuccessorTraining WHERE SuccessorID = '" + EmpID + "' ORDER BY TrainingCategory;",SuccessorTree4)

        def OnClick2(event, treename):
            item = treename.selection()
            for i in item:
                Entry4.delete(0, END)
                Entry4.set(treename.item(i, "values")[0])
                ListTraining(Event)

                Entry5.delete(0, END)
                Entry5.set(treename.item(i, "values")[1])
                
                Entry6.delete(0, END)
                Entry6.set_date(treename.item(i, "values")[2])

                Entry7.delete(0, END)
                Entry7.set(treename.item(i, "values")[3])

        def ClearTree(event):
            SuccessorTree3.delete(*SuccessorTree3.get_children())
            SuccessorTree4.delete(*SuccessorTree4.get_children())
            SelectedClear1()
            
        def Validate_Clear():
            LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7]

            for i in range(0,len(LabelList)):
                LabelList[i].config(foreground='#054457')

        def Validate_ViewList(ReportRequired=''):
            Validate_Clear()
            AllLabelList = [Label1, Label2]
            AllEntryList = [Entry1, Entry2]
            AllEntryValues = [Entry1_Values, Entry2_Values]
            AllEntryMessage = [Entry1_msg, Entry2_msg]

            if Entry1.get().strip() == '':
                messagebox.showerror('Validation Check','Team name should not be left blank!')
                return False
            elif Entry2.get().strip() == '':
                messagebox.showerror('Validation Check','Role name should not be left blank!')
                return False
            else:
                Submit = True
                for i in range(0,len(AllEntryList)):
                    if AllEntryList[i].get() != '':
                        result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                        if result == 'Failed':
                            AllLabelList[i].config(foreground='red')
                            AllEntryList[i].focus_set()
                            messagebox.showerror('Validation Check',AllEntryMessage[i])
                            Submit = False
                            break

            if Submit:
                if ReportRequired == 'ExportReport':
                    ViewList('ExportReport')
                else:
                    ViewList()
            
        def ViewList(ReportRequired=''):
            SuccessorTree3.delete(*SuccessorTree3.get_children())
            
            query1 = """SELECT A.SuccessorID, A.SuccessorName, A.TrainingCategory, A.TrainingName, A.TargetDate, A.TrainingStatus FROM tblSuccessorTraining AS A
                        LEFT JOIN tblEmpData AS B
                        ON A.SuccessorID = B.EmpID
                        WHERE B.EmpStatus NOT IN ('Abscond', 'Termination', 'Resigned');"""
            query2 = """SELECT EmpID, Role, Team FROM tblEmpData
                        WHERE EmpStatus NOT IN ('Abscond', 'Termination', 'Resigned');"""
            conn = sqlite3.connect(ProDBPath)
            df_Data1 = pd.read_sql_query(query1, conn)
            df_Data2 = pd.read_sql_query(query2, conn)
            conn.close()

            df_Data3 = df_Data1.merge(df_Data2, left_on=['SuccessorID'], right_on=['EmpID'], how='left').fillna('')
            df_Trained_Date_Pivot=pd.pivot_table(df_Data3, index=['SuccessorID', 'SuccessorName', 'Role', 'Team'], columns='TrainingCategory', values='TargetDate' , aggfunc = 'max', margins=False).reset_index().rename(columns={'Internal Training':'IT Target Date', 'External Training':'ET Target Date'})
            df_Trained_Total_Pivot=pd.pivot_table(df_Data3, index=['SuccessorID', 'SuccessorName', 'Role', 'Team'], columns='TrainingCategory', values='TrainingName' , aggfunc = 'count', margins=False).reset_index().rename(columns={'Internal Training':'IT Required', 'External Training':'ET Required'})
            df_Trained_IT_Completed = df_Data3.loc[df_Data3['TrainingCategory'] == 'Internal Training']
            df_Trained_IT_Completed_Pivot=pd.pivot_table(df_Trained_IT_Completed, index=['SuccessorID', 'SuccessorName', 'Role', 'Team'], columns='TrainingStatus', values='TargetDate' , aggfunc = 'count', margins=False).reset_index()
            df_Trained_ET_Completed = df_Data3.loc[df_Data3['TrainingCategory'] == 'External Training']
            df_Trained_ET_Completed_Pivot=pd.pivot_table(df_Trained_ET_Completed, index=['SuccessorID', 'SuccessorName', 'Role', 'Team'], columns='TrainingStatus', values='TargetDate' , aggfunc = 'count', margins=False).reset_index()
            if 'Completed' not in df_Trained_IT_Completed_Pivot.columns:
                df_Trained_IT_Completed_Pivot['Completed'] = 0
            
            df_Trained_IT_Completed_Pivot = df_Trained_IT_Completed_Pivot.rename(columns={'Completed':'IT Completed'})

            if 'Completed' not in df_Trained_ET_Completed_Pivot.columns:
                df_Trained_ET_Completed_Pivot['Completed'] = 0

            df_Trained_ET_Completed_Pivot = df_Trained_ET_Completed_Pivot.rename(columns={'Completed':'ET Completed'})
            
            if len(df_Trained_IT_Completed_Pivot) == 0:
                df_Trained_IT_Completed_Pivot['SuccessorID'] = ''
                df_Trained_IT_Completed_Pivot['SuccessorName'] = ''
                df_Trained_IT_Completed_Pivot['Role'] = ''
                df_Trained_IT_Completed_Pivot['IT Required'] = 0
                df_Trained_IT_Completed_Pivot['IT Completed'] = 0
                df_Trained_IT_Completed_Pivot['IT Target Date'] = ''

            if len(df_Trained_ET_Completed_Pivot) == 0:
                df_Trained_ET_Completed_Pivot['SuccessorID'] = ''
                df_Trained_ET_Completed_Pivot['SuccessorName'] = ''
                df_Trained_ET_Completed_Pivot['Role'] = ''
                df_Trained_ET_Completed_Pivot['ET Required'] = 0
                df_Trained_ET_Completed_Pivot['ET Completed'] = 0
                df_Trained_ET_Completed_Pivot['ET Target Date'] = ''

            data_frames = [df_Trained_Date_Pivot, df_Trained_Total_Pivot, df_Trained_IT_Completed_Pivot, df_Trained_ET_Completed_Pivot]
            df_Merged = reduce(lambda  left,right: pd.merge(left,right,on=['SuccessorID', 'SuccessorName', 'Role', 'Team'], how='outer'), data_frames)
            df_Merged = pd.DataFrame(df_Merged[['SuccessorID', 'SuccessorName', 'Role', 'Team', 'IT Required', 'IT Completed', 'IT Target Date', 'ET Required', 'ET Completed', 'ET Target Date']])
            df_Merged[['IT Required', 'IT Completed', 'ET Required', 'ET Completed']] = df_Merged[['IT Required', 'IT Completed', 'ET Required', 'ET Completed']].fillna(0).astype(int)
            df_Merged[['IT Target Date', 'ET Target Date']] = df_Merged[['IT Target Date', 'ET Target Date']].fillna('')
            
            if Entry1.get() == 'All' and Entry2.get() == 'All':
                df_Final = df_Merged
            elif Entry1.get() == 'All' and Entry2.get() != 'All':
                df_Final = df_Merged.loc[df_Merged['Role'] == Entry2.get()]
            elif Entry1.get() != 'All' and Entry2.get() == 'All':
                df_Final = df_Merged.loc[df_Merged['Team'] == Entry1.get()]
            else:
                df_Final = df_Merged.loc[(df_Merged['Team'] == Entry1.get()) & (df_Merged['Role'] == Entry2.get())]
            
            df_Final_List = df_Final.drop(columns='Team').values.tolist()
                    
            SuccessorTree3.tag_configure("evenrow",background='white')
            SuccessorTree3.tag_configure("oddrow",background='lightblue')
            rowid = 0
            for row in df_Final_List:
                if row[0] != None:
                    rowid = rowid + 1
                    if rowid % 2 == 0:
                        SuccessorTree3.insert("", END, values=row, tags=('oddrow',))
                    else:
                        SuccessorTree3.insert("", END, values=row, tags=('evenrow',))
            
            df_TrainingDetails = df_Data1.merge(df_Final, left_on=['SuccessorID', 'SuccessorName'], right_on=['SuccessorID', 'SuccessorName'], how='right').fillna('')
            df_TrainingDetails = df_TrainingDetails[['SuccessorID', 'SuccessorName', 'TrainingCategory', 'TrainingName', 'TargetDate', 'TrainingStatus']]

            if ReportRequired == 'ExportReport':
                if len(df_Final) > 0:
                    wb=xw.Book()
                    sh1=wb.sheets.add('Summary')
                    sh2=wb.sheets.add('Training Details',after=sh1)
                    sh1.range('A1').options(pd.DataFrame, expand='table',index=False).value=df_Final.sort_values(by=['SuccessorID'])
                    sh2.range('A1').options(pd.DataFrame, expand='table',index=False).value=df_TrainingDetails.sort_values(by=['SuccessorID', 'TrainingCategory', 'TrainingName'])
                    wb.sheets['Sheet1'].delete()
                    sh1.autofit()
                    sh2.autofit()
                    sh1.select()
                    messagebox.showinfo('Training Details','Training Data Report Exported!')
                    wb.activate(steal_focus=True)
                else:
                    messagebox.showwarning('No Data','No records available for this selected criteria!')

        def ViewRole(event):
            Entry2.delete(0, END)
            Temp = Entry1.get()
            global Entry2_Values
            if Temp != "":
                Entry2_Values = Queryfun("SELECT DISTINCT Role from tblEmpData;")
                Entry2_Values.append('All')
                Entry2.config(completevalues=Entry2_Values)
            else:
                pass

        def ListTraining(event):
            Entry5.delete(0, END)
            global Entry5_Values
            if Entry4.get() != "":
                Entry5_Values = Queryfun("SELECT TrainingName from tblSuccessorTrainingsList WHERE Category = '" + Entry4.get() + "';")
                Entry5.config(completevalues=Entry5_Values)
            else:
                pass

        def TrainingReport():
            Validate_ViewList('ExportReport')

        Label1 = Label(Can2, text="Team*",width=8,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
        Label2 = Label(Can2, text="Role*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')

        Label3_0_Invisible = Label(Can2, text="Successor ID*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label3 = Label(Can2, text="Successor Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')

        Label4 = Label(Can2, text="Training Category*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label5 = Label(Can2, text="Training Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label6_0 = Label(Can2, text="dd-mm-yyyy",width=23,height=1,fg="#054457", bg="white",font=("Calibri",10,"italic"),anchor='w')
        Label6 = Label(Can2, text="Target Date*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        Label7 = Label(Can2, text="Training Status*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
        
        Entry1_Values = Queryfun("SELECT TeamName FROM tblTeams;")
        Entry1_Values.append('All')
        Entry1 = AutocompleteCombobox(Can2, width=33, completevalues=Entry1_Values)
        Entry1_msg = 'This Team is not available in the list! please check'
        Entry1.bind("<FocusIn>", lambda event: [ViewRole(Event), ClearTree(Event)])
        Entry1.bind("<<ComboboxSelected>>", lambda event: [ViewRole(Event), ClearTree(Event)])

        Entry2_Values = []
        Entry2 = AutocompleteCombobox(Can2, width=33, completevalues=Entry2_Values)
        Entry2_msg = 'This Role is not available in the list! please check'
        Entry2.bind("<FocusIn>", ClearTree)
        Entry2.bind("<<ComboboxSelected>>", ClearTree)

        Entry3_0_Invisible = Entry(Can2, bg="white",font=("Calibri",10), width=30)
        Entry3 = Entry(Can2, bg="white",font=("Calibri",10, 'bold'), width=30)

        Entry4_Values = Queryfun("SELECT DISTINCT Category FROM tblSuccessorTrainingsList;")
        Entry4 = AutocompleteCombobox(Can2, width=15, completevalues=Entry4_Values)
        Entry4_msg = 'This Category is not available in the list! please check'
        Entry4.bind("<FocusIn>", ListTraining)
        Entry4.bind("<<ComboboxSelected>>", ListTraining)

        Entry5_Values = []
        Entry5 = AutocompleteCombobox(Can2, width=40, completevalues=Entry5_Values)
        Entry5_msg = 'This Training is not available in the list! please check'

        today = date.today()
        Entry6 = DateEntry(Can2,width=15,bg="darkblue",fg="white",date_pattern='dd-mm-yyyy',mindate=today)
        Entry6.delete(0, END)

        Entry7_Values = ['Not Started', 'In Progress', 'Completed']
        Entry7 = AutocompleteCombobox(Can2, width=15, completevalues=Entry7_Values)
        Entry7_msg = 'This Role is not available in the list! please check'

        Label1.place(x=10, y=10)
        Label2.place(x=320, y=10)

        Label3.place(x=550, y=270)
        Label4.place(x=550, y=330)
        Label5.place(x=730, y=330)
        Label6.place(x=550, y=390)
        Label7.place(x=730, y=390)
        
        Entry1.place(x=75, y=10) 
        Entry2.place(x=400, y=10)
        
        Entry3.place(x=550, y=290)
        Entry4.place(x=550, y=350)
        Entry5.place(x=730, y=350)
        Entry6.place(x=550, y=410)
        Label6_0.place(x=550, y=430)
        Entry7.place(x=730, y=410)

        Image_Run= PhotoImage(file=r')
        Image_Export= PhotoImage(file=r')

        RunButton = Button(Can2, image=Image_Run, width=25, height=25, command=lambda:Validate_ViewList(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
        RunButton.image = Image_Run
        RunButton.place(x=630, y=5)

        ReportB = Button(Can2, image=Image_Export, width=25, height=25, command=lambda:TrainingReport(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
        ReportB.image = Image_Export
        ReportB.place(x=950, y=5)

        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])
        
        arrlbHeader = ["Successor ID", "Successor Name", "Successor Role", "IT Required", "IT Completed", "IT Target Date", "ET Required", "ET Completed", "ET Target Date", "Successor ID"]
        SuccessorTree3 = MyTreeview(Can2, columns=arrlbHeader, show="headings", height=10, selectmode='browse')

        SuccessorTree3.column("#1", anchor=W, width=70)
        SuccessorTree3.heading("#1", text="Successor ID")    
        SuccessorTree3.column("#2", anchor=W, width=190)
        SuccessorTree3.heading("#2", text="Successor Name")
        SuccessorTree3.column("#3", anchor=W, width=190)
        SuccessorTree3.heading("#3", text="Successor Role")
        SuccessorTree3.column("#4", anchor=CENTER, width=90)
        SuccessorTree3.heading("#4", text="IT Required")
        SuccessorTree3.column("#5", anchor=CENTER, width=90)
        SuccessorTree3.heading("#5", text="IT Completed")
        SuccessorTree3.column("#6", anchor=CENTER, width=90)
        SuccessorTree3.heading("#6", text="IT Target Date")
        SuccessorTree3.column("#7", anchor=CENTER, width=90)
        SuccessorTree3.heading("#7", text="ET Required")
        SuccessorTree3.column("#8", anchor=CENTER, width=90)
        SuccessorTree3.heading("#8", text="ET Completed")
        SuccessorTree3.column("#9", anchor=CENTER, width=90)
        SuccessorTree3.heading("#9", text="ET Target Date")
        SuccessorTree3.column("#10", minwidth=0, width=0)
                
        arrSortType = ["num", "name", "name", "name", "name", "name", "name", "name", "name", "num"]
        for iCount in range(len(arrlbHeader)):
            strHdr = arrlbHeader[iCount]
            SuccessorTree3.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
            SuccessorTree3.column(arrlbHeader[iCount], stretch=True)

        SuccessorTree3.place(x=10, y=40)

        SuccessorTree3_vsb = ttk.Scrollbar(Can2, orient="vertical", command=SuccessorTree3.yview)
        SuccessorTree3_vsb.place(x=1000, y=40, height=220)
        SuccessorTree3.configure(yscrollcommand=SuccessorTree3_vsb.set)

        SuccessorTree3.bind("<<TreeviewSelect>>", lambda event: OnClick1(event, treename=SuccessorTree3))

        arrlbHeader = ["Category", "Training Name", "Target Date", "Training Status"]
        SuccessorTree4 = MyTreeview(Can2, columns=arrlbHeader, show="headings", height=11, selectmode='browse')
            
        SuccessorTree4.column("#1", anchor=W, width=110)
        SuccessorTree4.heading("#1", text="Category")
        SuccessorTree4.column("#2", anchor=W, width=220)
        SuccessorTree4.heading("#2", text="Training Name")
        SuccessorTree4.column("#3", anchor=CENTER, width=70)
        SuccessorTree4.heading("#3", text="Target Date")
        SuccessorTree4.column("#4", anchor=CENTER, width=100)
        SuccessorTree4.heading("#4", text="Training Status")
                    
        arrSortType = ["name", "name", "name", "name"]
        for iCount in range(len(arrlbHeader)):
            strHdr = arrlbHeader[iCount]
            SuccessorTree4.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
            SuccessorTree4.column(arrlbHeader[iCount], stretch=True)

        SuccessorTree4.place(x=10, y=270)

        SuccessorTree4_vsb = ttk.Scrollbar(Can2, orient="vertical", command=SuccessorTree4.yview)
        SuccessorTree4_vsb.place(x=510, y=270, height=240)
        SuccessorTree4.configure(yscrollcommand=SuccessorTree4_vsb.set)

        SuccessorTree4.bind("<<TreeviewSelect>>", lambda event: OnClick2(event, treename=SuccessorTree4))

        def Validate_SuccessorTrainingSubmit():
            Validate_Clear()
            AllLabelList = [Label4, Label5, Label7]
            AllEntryList = [Entry4, Entry5, Entry7]
            AllEntryValues = [Entry4_Values, Entry5_Values, Entry7_Values]
            AllEntryMessage = [Entry4_msg, Entry5_msg, Entry7_msg]

            DateLabelList = [Label6]
            DateEntryList = [Entry6]

            if Entry3.get().strip() == '' or Entry4.get() == '' or Entry5.get() == '' or Entry6.get().strip() == '' or Entry7.get() == '':
                messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
                return False
            else:
                Submit = True
                for i in range(0,len(AllEntryList)):
                    if AllEntryList[i].get() != '':
                        result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                        if result == 'Failed':
                            AllLabelList[i].config(foreground='red')
                            AllEntryList[i].focus_set()
                            messagebox.showerror('Validation Check',AllEntryMessage[i])
                            Submit = False
                            break

                for i in range(0,len(DateEntryList)):
                    if DateEntryList[i].get() != '':
                        result = Date_Validation(DateEntryList[i])
                        if result == 'Failed':
                            DateLabelList[i].config(foreground='red')
                            DateEntryList[i].focus_set()
                            messagebox.showerror('Date Error','This typed date is not valid! Please check')
                            Submit = False
                            break

            if Submit:
                SuccessorTrainingSubmit()

        def SuccessorTrainingSubmit():
            TrainingExists = ViewQueryfun(ProDBPath,"""SELECT EXISTS(SELECT 1 FROM tblSuccessorTraining WHERE SuccessorID = '""" + Entry3_0_Invisible.get() + """' AND 
                                                TrainingCategory = '""" + Entry4.get() + """' AND TrainingName = '"""+ Entry5.get() + """');""")
        
            if TrainingExists[0][0] == 0:
                Record1 = (Entry3_0_Invisible.get(), Entry3.get(), Entry4.get(), Entry5.get(), Entry6.get(), Entry7.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
                query1 = """INSERT INTO tblSuccessorTraining (SuccessorID, SuccessorName, TrainingCategory, TrainingName, TargetDate, TrainingStatus, UpdatedBy, UpdatedDate) VALUES(?, ?, ?, ?, ?, ?, ?, ?);"""
                InsertQueryfun(ProDBPath, query1, Record1)
                messagebox.showinfo('Added','Training Details Added Successfully!')
            else:
                Record1 = (Entry6.get(), Entry7.get(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry3_0_Invisible.get(), Entry4.get(), Entry5.get())
                query1 = """UPDATE tblSuccessorTraining SET TargetDate = (?), TrainingStatus = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE SuccessorID = (?) AND TrainingCategory = (?) AND TrainingName = (?);"""
                InsertQueryfun(ProDBPath, query1, Record1)
                messagebox.showinfo('Updated','Training Details Updated Successfully!')

            TrainingTreeRefresh(Entry3_0_Invisible.get())
            ViewList()
            SelectedClear2()

        def SuccessorTrainingCancel():
            Entry1.delete(0, END)
            Entry2.delete(0, END)
            ClearTree(Event)

        Image_Submit= PhotoImage(file=r')
        Image_Reset= PhotoImage(file=r')

        SubmitB = Button(Can2, image=Image_Submit, width=90, height=45, command=lambda:Validate_SuccessorTrainingSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
        CancelB = Button(Can2, image=Image_Reset, width=90, height=45, command=lambda:SuccessorTrainingCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
        SubmitB.image = Image_Submit
        CancelB.image = Image_Reset

        SubmitB.place(x=630, y=460)
        CancelB.place(x=830, y=460)

    def SelectSuccessor():
        selection = Successor_Option.get()
        if selection == 1:
            SuccessorDetails()
        elif selection == 2:
            TrainingDetails()

    Successor_Option = IntVar()
    R1 = Radiobutton(SuccessorCan, text="Successor Status", variable=Successor_Option, value=1,command=SelectSuccessor, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    R2 = Radiobutton(SuccessorCan, text="Training Status", variable=Successor_Option, value=2,command=SelectSuccessor, bg='#006E8E', fg='white', activeforeground='red', selectcolor='#006E8E', font=("Calibri",12,"bold"),cursor='hand2')
    
    R1.place(x=20, y=10)
    R2.place(x=880, y=10)

########################################################## This is for Escalation Matrix Page ########################################################
def EscalationCheck(Home):
    if Escalation_Access == 'Yes':
        EscalationMatrix(Home)
    else:
        messagebox.showerror('No Access',"You are not authorised to access 'Escalation Matrix' module! Contact Innovation Team")

def EscalationMatrix(Home):
    EscalationCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    EscalationCan.place(x=150, y=10)

    HeaderLabel1 = Label(EscalationCan, text="Escalation Matrix",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",16,"bold"),anchor='center')
    HeaderLabel1.place(x=420, y=10)

    Can1=Canvas(EscalationCan,bg="white", width=1020, height=520, highlightthickness=0)
    Can1.place(x=10, y=50)

    global Entry2_Values

    def SelectedClear():
        Entry3.delete(0, END)
        Entry4.delete(0, END)
        Entry5.delete(0, END)
        Entry6.delete(0, END)
        Entry7.delete(1.0, END)
        Entry8.delete(0, END)

    def OnClick(event, treename):
        SelectedClear()
        item = treename.selection()
        for i in item:
            Entry3.set(treename.item(i, "values")[0])
            Entry4.insert(0, treename.item(i, "values")[1])
            Entry5.insert(0, treename.item(i, "values")[2])
            Entry6.insert(0, treename.item(i, "values")[3])
            Entry7.insert(1.0, treename.item(i, "values")[4])
            Entry8.set(treename.item(i, "values")[5])

    def ClearTree(event):
        EscalationTree1.delete(*EscalationTree1.get_children())
        EscalationTree2.delete(*EscalationTree2.get_children())

        TreeHeader1.config(text='')
        TreeHeader2.config(text='')

        SelectedClear()

    def Validate_Clear():
        LabelList = [Label1, Label2, Label3, Label4, Label5, Label6, Label7, Label8]

        for i in range(0,len(LabelList)):
            LabelList[i].config(foreground='#054457')

    def Validate_ViewList(ReportRequired=''):
        Validate_Clear()
        AllLabelList = [Label1, Label2]
        AllEntryList = [Entry1, Entry2]
        AllEntryValues = [Entry1_Values, Entry2_Values]
        AllEntryMessage = [Entry1_msg, Entry2_msg]

        if Entry1.get().strip() == '':
            messagebox.showerror('Validation Check','Team name should not be left blank!')
            return False
        elif len(Entry2_Values) > 1 and Entry2.get().strip() == '':
            messagebox.showerror('Validation Check','Sub-Team name should not be left blank!')
            return False
        else:
            Submit = True
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break

        if Submit:
            if ReportRequired == 'ExportReport':
                ViewList('ExportReport')
            else:
                ViewList()
        
    def ViewList(ReportRequired=''):
        SelectedClear()
        EscalationTree1.delete(*EscalationTree1.get_children())
        EscalationTree2.delete(*EscalationTree2.get_children())
        
        query_Onshore = """SELECT Levels, Name, Role, Email, Phone, Location FROM tblEscalationMatrix 
                        WHERE Location NOT IN ('INDIA') AND Team = '""" + Entry1.get() + """' AND 
                        SubTeam = '""" + Entry2.get() + """' ORDER BY 
                        CASE Levels 
                            WHEN '1st Level of Contact' THEN 1 
                            WHEN '2nd Level of Contact' THEN 2 
                            WHEN '3rd Level of Contact' THEN 3 
                            WHEN '1st Level of Escalation' THEN 4 
                            WHEN '2nd Level of Escalation' THEN 5 
                            WHEN '3rd Level of Escalation' THEN 6 
                            ELSE 7
                        END;"""

        query_India = """SELECT Levels, Name, Role, Email, Phone, Location FROM tblEscalationMatrix 
                        WHERE Location IN ('INDIA') AND Team = '""" + Entry1.get() + """' AND 
                        SubTeam = '""" + Entry2.get() + """' ORDER BY 
                        CASE Levels 
                            WHEN '1st Level of Contact' THEN 1 
                            WHEN '2nd Level of Contact' THEN 2 
                            WHEN '3rd Level of Contact' THEN 3 
                            WHEN '1st Level of Escalation' THEN 4 
                            WHEN '2nd Level of Escalation' THEN 5 
                            WHEN '3rd Level of Escalation' THEN 6 
                            ELSE 7
                        END;"""

        conn = sqlite3.connect(ProDBPath)
        df_OnshoreData = pd.read_sql_query(query_Onshore, conn)
        df_OffshoreData = pd.read_sql_query(query_India, conn)
        conn.close()
                
        df_OnshoreData_List = df_OnshoreData.values.tolist()
        df_Offshore_List = df_OffshoreData.values.tolist()
        
        if len(df_OnshoreData) > 0:
            Location_Onshore = df_OnshoreData.loc[0, 'Location']
        else:
            Location_Onshore = ''

        if len(df_OffshoreData) > 0:
            Location_Offshore = df_OffshoreData.loc[0, 'Location']
        else:
            Location_Offshore = ''

        if Entry2.get() == '':
            TreeHeader1.config(text=Location_Onshore)        
            TreeHeader2.config(text=Location_Offshore)
        else:
            if Location_Onshore != '':
                TreeHeader1.config(text=Entry2.get() + ' - ' + Location_Onshore)
            else:
                TreeHeader1.config(text='')

            if Location_Offshore != '':
                TreeHeader2.config(text=Entry2.get() + ' - ' + Location_Offshore)
            else:
                TreeHeader2.config(text='')

        EscalationTree1.tag_configure("Contact1",background='SeaGreen2')
        EscalationTree1.tag_configure("Contact2",background='SeaGreen2')
        EscalationTree1.tag_configure("Contact3",background='SeaGreen2')
        EscalationTree1.tag_configure("Escalation1",background='orange')
        EscalationTree1.tag_configure("Escalation2",background='orange')
        EscalationTree1.tag_configure("Escalation3",background='orange')
        
        for row in df_OnshoreData_List:
            if row[0] == '1st Level of Contact':
                EscalationTree1.insert("", END, values=row, tags=('Contact1',))
            elif row[0] == '2nd Level of Contact':
                EscalationTree1.insert("", END, values=row, tags=('Contact2',))
            elif row[0] == '3rd Level of Contact':
                EscalationTree1.insert("", END, values=row, tags=('Contact3',))
            elif row[0] == '1st Level of Escalation':
                EscalationTree1.insert("", END, values=row, tags=('Escalation1',))
            elif row[0] == '2nd Level of Escalation':
                EscalationTree1.insert("", END, values=row, tags=('Escalation2',))
            elif row[0] == '3rd Level of Escalation':
                EscalationTree1.insert("", END, values=row, tags=('Escalation3',))

        EscalationTree2.tag_configure("Contact1",background='SeaGreen2')
        EscalationTree2.tag_configure("Contact2",background='SeaGreen2')
        EscalationTree2.tag_configure("Contact3",background='SeaGreen2')
        EscalationTree2.tag_configure("Escalation1",background='orange')
        EscalationTree2.tag_configure("Escalation2",background='orange')
        EscalationTree2.tag_configure("Escalation3",background='orange')
        
        for row in df_Offshore_List:
            if row[0] == '1st Level of Contact':
                EscalationTree2.insert("", END, values=row, tags=('Contact1',))
            elif row[0] == '2nd Level of Contact':
                EscalationTree2.insert("", END, values=row, tags=('Contact2',))
            elif row[0] == '3rd Level of Contact':
                EscalationTree2.insert("", END, values=row, tags=('Contact3',))
            elif row[0] == '1st Level of Escalation':
                EscalationTree2.insert("", END, values=row, tags=('Escalation1',))
            elif row[0] == '2nd Level of Escalation':
                EscalationTree2.insert("", END, values=row, tags=('Escalation2',))
            elif row[0] == '3rd Level of Escalation':
                EscalationTree2.insert("", END, values=row, tags=('Escalation3',))

        if ReportRequired == 'ExportReport':
            df_Append = df_OnshoreData.append(df_OffshoreData, ignore_index=True)
            xw.view(df_Append, table=False)
            messagebox.showinfo('Escalation Matrix','Escalation Matrix Data Report Exported!')

    def ViewSubTeam(event):
        Entry2.delete(0, END)
        Temp = Entry1.get()
        global Entry2_Values
        if Temp != "":
            Entry2_Values = Queryfun("SELECT SubTeamName from tblSubTeams WHERE TeamID = (SELECT TeamID FROM tblTeams WHERE TeamName = '" + Temp + "');")
            Entry2.config(completevalues=Entry2_Values)
        else:
            pass

    def EscalationReport():
        Validate_ViewList('ExportReport')
            
    Label1 = Label(Can1, text="Team*",width=8,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label2 = Label(Can1, text="Sub-Team*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='e')
    Label3 = Label(Can1, text="Levels*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label4 = Label(Can1, text="Name*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label5 = Label(Can1, text="Role*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label6 = Label(Can1, text="Email*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label7 = Label(Can1, text="Phone*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label8 = Label(Can1, text="Location*",width=10,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')

    TreeHeader1 = Label(Can1, text="",width=50,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"),anchor='center')
    TreeHeader2 = Label(Can1, text="",width=50,height=1,fg="#054457", bg="white",font=("Calibri",14,"bold"),anchor='center')

    Entry1_Values = Queryfun("SELECT TeamName FROM tblTeams WHERE TeamName NOT IN ('Customer Processing');")
    Entry1 = AutocompleteCombobox(Can1, width=33, completevalues=Entry1_Values)
    Entry1_msg = 'This Team is not available in the list! please check'
    Entry1.bind("<FocusIn>", lambda event: [ViewSubTeam(Event), ClearTree(Event)])
    Entry1.bind("<<ComboboxSelected>>", lambda event: [ViewSubTeam(Event), ClearTree(Event)])

    Entry2_Values = []
    Entry2 = AutocompleteCombobox(Can1, width=48, completevalues=Entry2_Values)
    Entry2_msg = 'This Sub-Team is not available in the list! please check'
    Entry2.bind("<FocusIn>", ClearTree)
    Entry2.bind("<<ComboboxSelected>>", ClearTree)

    Entry3_Values = Queryfun("SELECT Levels FROM tblEscalationLevels;")
    Entry3 = AutocompleteCombobox(Can1, width=33, completevalues=Entry3_Values)
    Entry3_msg = 'This option is not available in the list! please check'

    Entry4 = Entry(Can1, bg="white",font=("Calibri",10), width=30)
    Entry5 = Entry(Can1, bg="white",font=("Calibri",10), width=30)
    Entry6 = Entry(Can1, bg="white",font=("Calibri",10), width=30)

    Entry7 = Text(Can1,bg="white",font=("Calibri",10),width=28,height=2)
    Entry7.bind('<Tab>', lambda event: focusNext(Entry7))
    Entry7.bind('<Shift-Tab>', lambda event: focusPrev(Entry7))

    Entry7_vsb = ttk.Scrollbar(Can1, orient="vertical", command=Entry7.yview)
    Entry7_vsb.place(x=209, y=480, height=35)
    Entry7.configure(yscrollcommand=Entry7_vsb.set)
    
    Entry8_Values = ['INDIA', 'UK', 'US']
    Entry8 = AutocompleteCombobox(Can1, width=20, completevalues=Entry8_Values)
    Entry8_msg = 'This option is not available in the list! please check'

    Label1.place(x=10, y=10)
    Label2.place(x=320, y=10)
    TreeHeader1.place(x=250, y=40)
    TreeHeader2.place(x=250, y=230)

    Label3.place(x=10, y=410)
    Label4.place(x=265, y=410)
    Label5.place(x=520, y=410)
    Label6.place(x=775, y=410)
    Label7.place(x=10, y=460)
    Label8.place(x=265, y=460)

    Entry1.place(x=75, y=10) 
    Entry2.place(x=400, y=10)

    Entry3.place(x=10, y=430)
    Entry4.place(x=265, y=430)
    Entry5.place(x=520, y=430)
    Entry6.place(x=775, y=430)
    Entry7.place(x=10, y=480)
    Entry8.place(x=265, y=480)

    Image_Run= PhotoImage(file=r')
    RunButton = Button(Can1, image=Image_Run, width=25, height=25, command=lambda:Validate_ViewList(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    RunButton.image = Image_Run
    RunButton.place(x=720, y=5)

    Image_Export= PhotoImage(file=r')
    ExportB = Button(Can1, image=Image_Export, width=25, height=25, command=lambda:EscalationReport(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    ExportB.image = Image_Export
    ExportB.place(x=850, y=5)

    style = ttk.Style()
    style.theme_use('default')
    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
    style.map('Treeview', background=[('selected', 'SkyBlue3')])
    
    arrlbHeader = ["Levels", "Name", "Role", "Email", "Phone", "Location"]
    EscalationTree1 = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=6, selectmode='browse')
    EscalationTree1.column("#1", anchor=CENTER, width=140)
    EscalationTree1.heading("#1", text="Levels")
    EscalationTree1.column("#2", anchor=CENTER, width=220)
    EscalationTree1.heading("#2", text="Name")
    EscalationTree1.column("#3", anchor=CENTER, width=210)
    EscalationTree1.heading("#3", text="Role")
    EscalationTree1.column("#4", anchor=CENTER, width=220)
    EscalationTree1.heading("#4", text="Email")
    EscalationTree1.column("#5", anchor=CENTER, width=200)
    EscalationTree1.heading("#5", text="Phone")
    EscalationTree1.column("#6", minwidth=0, width=0)
            
    arrSortType = ["name", "name", "name", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        EscalationTree1.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
        EscalationTree1.column(arrlbHeader[iCount], stretch=True)

    EscalationTree1.place(x=10, y=70)

    EscalationTree1_vsb = ttk.Scrollbar(Can1, orient="vertical", command=EscalationTree1.yview)
    EscalationTree1_vsb.place(x=1000, y=70, height=140)
    EscalationTree1.configure(yscrollcommand=EscalationTree1_vsb.set)

    EscalationTree1.bind("<<TreeviewSelect>>", lambda event: OnClick(event, treename=EscalationTree1))

    EscalationTree2 = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=6, selectmode='browse')
    EscalationTree2.column("#1", anchor=CENTER, width=140)
    EscalationTree2.heading("#1", text="Levels")
    EscalationTree2.column("#2", anchor=CENTER, width=220)
    EscalationTree2.heading("#2", text="Name")
    EscalationTree2.column("#3", anchor=CENTER, width=210)
    EscalationTree2.heading("#3", text="Role")
    EscalationTree2.column("#4", anchor=CENTER, width=220)
    EscalationTree2.heading("#4", text="Email")
    EscalationTree2.column("#5", anchor=CENTER, width=200)
    EscalationTree2.heading("#5", text="Phone")
    EscalationTree2.column("#6", minwidth=0, width=0)
            
    arrSortType = ["name", "name", "name", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        EscalationTree2.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
        EscalationTree2.column(arrlbHeader[iCount], stretch=True)

    EscalationTree2.place(x=10, y=260)

    EscalationTree2_vsb = ttk.Scrollbar(Can1, orient="vertical", command=EscalationTree2.yview)
    EscalationTree2_vsb.place(x=1000, y=260, height=140)
    EscalationTree2.configure(yscrollcommand=EscalationTree2_vsb.set)

    EscalationTree2.bind("<<TreeviewSelect>>", lambda event: OnClick(event, treename=EscalationTree2))
    
    def Validate_EscalationSubmit():
        Validate_Clear()
        AllLabelList = [Label3, Label8]
        AllEntryList = [Entry3, Entry8]
        AllEntryValues = [Entry3_Values, Entry8_Values]
        AllEntryMessage = [Entry3_msg, Entry8_msg]

        if Entry3.get().strip() == '' or Entry4.get().strip() == '' or Entry5.get().strip() == '' or Entry6.get().strip() == '' or Entry7.get(1.0, END).strip() == '' or Entry8.get().strip() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True
            for i in range(0,len(AllEntryList)):
                if AllEntryList[i].get() != '':
                    result = DropDown_Validation(AllEntryValues[i], AllEntryList[i])
                    if result == 'Failed':
                        AllLabelList[i].config(foreground='red')
                        AllEntryList[i].focus_set()
                        messagebox.showerror('Validation Check',AllEntryMessage[i])
                        Submit = False
                        break

        if Submit:
            EscalationSubmit()

    def EscalationSubmit():

        LevelExists = ViewQueryfun(ProDBPath,"""SELECT EXISTS(SELECT 1 FROM tblEscalationMatrix WHERE Levels = '""" + Entry3.get() + """' AND 
                                                Location = '""" + Entry8.get() + """' AND Team = '"""+ Entry1.get() +"""' AND SubTeam = '"""+ Entry2.get() + """');""")
        if LevelExists[0][0] == 0:
            Record = (Entry3.get(), Entry4.get().strip(), Entry5.get().strip(), Entry6.get().strip(), Entry7.get(1.0, END).strip(), Entry8.get().strip(), Entry1.get().strip(), Entry2.get().strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
            InsertQueryfun(ProDBPath,"""INSERT INTO tblEscalationMatrix (Levels, Name, Role, Email, Phone, Location, Team, SubTeam, UpdatedBy, UpdatedDate) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);""", Record)
            messagebox.showinfo('Added','Details Added Successfully!')
        else:
            Record = (Entry4.get().strip(), Entry5.get().strip(), Entry6.get().strip(), Entry7.get(1.0, END).strip(), Entry8.get().strip(), Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'), Entry3.get().strip(), Entry1.get().strip(), Entry2.get().strip(), Entry8.get().strip())
            InsertQueryfun(ProDBPath,"""UPDATE tblEscalationMatrix SET Name = (?), Role = (?), Email = (?), Phone = (?), Location = (?), UpdatedBy = (?), UpdatedDate = (?) WHERE Levels = (?) AND Team = (?) AND SubTeam = (?) AND Location = (?);""", Record)
            messagebox.showinfo('Updated','Details Updated Successfully!')

        EscalationCancel()
        ViewList()

    def EscalationCancel():
        SelectedClear()

    def EscalationDelete(treename):
        item = treename.selection()
        for i in item:
            RecordExists = ViewQueryfun(ProDBPath,"""SELECT EXISTS(SELECT 1 FROM tblEscalationMatrix WHERE Levels = '""" + treename.item(i, "values")[0] + """' AND 
                                                Name = '""" + treename.item(i, "values")[1] + """' AND Role = '""" + treename.item(i, "values")[2] + """' AND 
                                                Email = '""" + treename.item(i, "values")[3] + """' AND Location = '""" + treename.item(i, "values")[5] + """' 
                                                AND Team = '"""+ Entry1.get() +"""' AND SubTeam = '"""+ Entry2.get() + """');""")
            if RecordExists[0][0] > 0:
                Msgbox = messagebox.askquestion('Delete Record','Are you sure want to delete the selected record?',icon = 'question')
                if Msgbox == 'yes':
                    Record = (treename.item(i, "values")[0], treename.item(i, "values")[1], treename.item(i, "values")[2], treename.item(i, "values")[3], treename.item(i, "values")[5], Entry1.get(), Entry2.get())
                    InsertQueryfun(ProDBPath,"""DELETE FROM tblEscalationMatrix WHERE Levels = (?) AND Name = (?) AND Role = (?) AND 
                                                Email = (?) AND Location = (?) AND Team = (?) AND SubTeam = (?);""", Record)
                    ViewList()
                    messagebox.showinfo('Deleted','Selected Record Deleted Successfully!')
                else:
                    pass
        
            else:
                messagebox.showerror('Not Available','Please select a record from below table to delete!')
                return False

    Image_Submit= PhotoImage(file=r)
    Image_Reset= PhotoImage(file=r')
    Image_Bin= PhotoImage(file=r')

    SubmitB = Button(Can1, image=Image_Submit, width=90, height=45, command=lambda:Validate_EscalationSubmit(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CancelB = Button(Can1, image=Image_Reset, width=90, height=45, command=lambda:EscalationCancel(),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')           
    DeleteB1 = Button(Can1, image=Image_Bin, width=26, height=26, command=lambda:EscalationDelete(EscalationTree1),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    DeleteB2 = Button(Can1, image=Image_Bin, width=26, height=26, command=lambda:EscalationDelete(EscalationTree2),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    SubmitB.image = Image_Submit
    CancelB.image = Image_Reset
    DeleteB1.image = Image_Bin
    DeleteB2.image = Image_Bin

    SubmitB.place(x=450, y=470)
    CancelB.place(x=650, y=470)
    DeleteB1.place(x=985, y=40)
    DeleteB2.place(x=985, y=230)

########################################################## This is Budget FTE Page ########################################################

def BudgetFTECheck(Home):
    if BudgetFTE_Access == 'Yes':
        BudgetFTE(Home)
    else:
        messagebox.showerror('No Access',"You are not authorised to access 'Budget FTE' module! Contact Innovation Team")

def BudgetFTE(Home):
    ReportsCan=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    ReportsCan.place(x=150, y=10)

    HLabel1 = Label(ReportsCan, text="Budget VS Actual FTE",width=20,height=1,fg="white", bg="#006E8E",font=("Calibri",16,"bold"),anchor='center')
    HLabel1.place(x=420, y=10)
    
    Can1=Canvas(ReportsCan,bg="white", width=1020, height=560, highlightthickness=0)
    Can1.place(x=10, y=50)

    frame1=Frame(Can1,bg="white", width=1020, height=1000)
    frame1.place(x=0, y=0)
    
    Can2=Canvas(frame1,bg="white", width=1002, height=1000, highlightthickness=0)
    Can2.place(x=0, y=0)
        
    frame2=Frame(Can2,bg="white", width=1000, height=1200)
    Can2.create_window((0,0), window=frame2, anchor='nw')
    
    Header1 = Label(frame2, text="Cost Center wise Head Count",width=22,height=1,fg="#054457", bg="white",font=("Calibri",11,"bold"),anchor='w')
    Header1.place(x=10, y=10)

    def TreeView_Selected(CostCentre):
        Budgettree2.delete(*Budgettree2.get_children())
        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])

        query = """SELECT * FROM tblBudgetFTE 
                            WHERE CostCentre = '""" + CostCentre + """' AND BudgetYear = '""" + str(date.today().year) + """';"""

        conn = sqlite3.connect(ProDBPath)
        df_BudgetFTE_Selected = pd.read_sql_query(query, conn)
        conn.close()

        if len(df_BudgetFTE_Selected) != 0:
            df_BudgetFTE_Selected.drop('ID', axis=1, inplace=True)
            df_BudgetFTE_Selected_List = df_BudgetFTE_Selected.values.tolist()
            
            for row in df_BudgetFTE_Selected_List:
                Budgettree2.insert("", END, values=row)

    def OnClick(event, treename):
        item = treename.selection()
        for i in item:
            TreeView_Selected(treename.item(i, "values")[1])
            Entry11.configure(state = "normal")
            Entry12.configure(state = "normal")
            Entry13.configure(state = "normal")

            Entry11.delete(0, END)
            Entry12.delete(0, END)
            Entry13.delete(0, END)
            Entry14.delete(0, END)
            
            Entry11.insert(0, treename.item(i, "values")[0])
            Entry12.insert(0, treename.item(i, "values")[1])
            Entry13.insert(0, date.today().year)
            
            Entry11.configure(state = "disabled")
            Entry12.configure(state = "disabled")
            Entry13.configure(state = "disabled")

    def ClearTree():
        Budgettree1.delete(*Budgettree1.get_children())
        Budgettree2.delete(*Budgettree2.get_children())
        
    def SelectedClear1():
        Entry11.config(state='normal')
        Entry12.config(state='normal')
        Entry13.config(state='normal')
        
        Entry11.delete(0, END)
        Entry12.delete(0, END)
        Entry13.delete(0, END)
        Entry14.delete(0, END)
        
        Entry11.config(state='disabled')
        Entry12.config(state='disabled')
        Entry13.config(state='disabled')
                    
    def CopytoClipboard(df):
        df1 = pd.DataFrame(df)
        df1.to_clipboard(excel = True)

    def HeadCount(Copydata=''):
        Budgettree1.delete(*Budgettree1.get_children())
        style = ttk.Style()
        style.theme_use('default')
        style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
        style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
        style.map('Treeview', background=[('selected', 'green')])
        
        query_HeadCount = """SELECT * FROM tblEmpData WHERE EmpStatus NOT IN ('Resigned', 'Abscond', 'Termination');"""
        query_ATR = """SELECT * FROM tblATR WHERE Status = 'Open';"""
        query_ATRPosition = """SELECT * FROM tblATRPosition WHERE PositionStatus = 'Closed';"""
        query_CC = """SELECT CCTeam, TeamName AS Team, CostCentre FROM tblTeams;"""
        query_BudgetFTE = """SELECT * FROM tblBudgetFTE 
                            WHERE BudgetYear = '""" + str(date.today().year) + """';"""
        query_BudgetUpdates = """SELECT CCTeam, CostCentre, FTEUpdates, AddorDel, BudgetYear FROM tblBudgetUpdates 
                                WHERE BudgetYear = '""" + str(date.today().year) + """';"""
        query_CCTeam = """SELECT CCTeam, CostCentre FROM tblBudgetFTE 
                            WHERE BudgetYear = '""" + str(date.today().year) + """';"""

        conn = sqlite3.connect(ProDBPath)
        df_Emp = pd.read_sql_query(query_HeadCount, conn)
        df_ATR = pd.read_sql_query(query_ATR, conn)
        df_ATRPosition = pd.read_sql_query(query_ATRPosition, conn)
        df_CC = pd.read_sql_query(query_CC, conn)
        df_BudgetFTE = pd.read_sql_query(query_BudgetFTE, conn)
        df_BudgetUpdates = pd.read_sql_query(query_BudgetUpdates, conn)
        df_CCTeam = pd.read_sql_query(query_CCTeam, conn)
        conn.close()

        Filtered_Maternity = df_Emp[df_Emp.EmpStatus.isin(['Maternity Leave'])]
        Filtered_LongLeave = df_Emp[df_Emp.EmpStatus.isin(['Long Leave', 'Long Sick Leave', 'Career Break'])]
        Filtered_ServingNotice = df_Emp[df_Emp.EmpStatus.isin(['Serving Notice Period', 'Notice Extended'])]

        TeamWise_HeadCount = df_Emp.groupby(['Team']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Current FTE'})
        TeamWise_Maternity = Filtered_Maternity.groupby(['Team']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Maternity Leave'})
        TeamWise_LongLeave = Filtered_LongLeave.groupby(['Team']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Long Leave'})
        TeamWise_ServingNotice = Filtered_ServingNotice.groupby(['Team']).agg({'EmpID':'count'}).reset_index().rename(columns={'EmpID':'Serving Notice'})
                    
        df_ATRPosition_Count = df_ATRPosition.groupby(['ATRID']).agg({'PositionStatus':'count'}).reset_index().rename(columns={'PositionStatus':'ClosedPositions'})
                    
        TeamWise_df_ATR = df_ATR[['ATRID', 'NoofPositions', 'Team']]
        TeamWise_Merged_ATR = TeamWise_df_ATR.merge(df_ATRPosition_Count, left_on=['ATRID'], right_on=['ATRID'], how='left').fillna(0)
        TeamWise_Merged_ATR['Open ATR'] = TeamWise_Merged_ATR['NoofPositions'] - TeamWise_Merged_ATR['ClosedPositions'].astype(int)
        TeamWise_Merged_ATR = TeamWise_Merged_ATR[['Team', 'Open ATR']]
        TeamWise_Merged_ATR = TeamWise_Merged_ATR.groupby(['Team']).agg({'Open ATR':'sum'}).reset_index()
                    
        CurMonth = date.today().month
        df_BudgetFTE['BudgetFTE'] = df_BudgetFTE.iloc[:, CurMonth+3:CurMonth+4]
        df_BudgetFTE_Pivot = df_BudgetFTE[['CostCentre', 'BudgetFTE']]
        
        df_BudgetUpdates_Pivot=pd.pivot_table(df_BudgetUpdates, index='CostCentre', columns='AddorDel', values='FTEUpdates' , aggfunc = 'sum', margins=False).reset_index().fillna(0)

        if len(df_BudgetUpdates_Pivot) == 0:
            df_BudgetUpdates_Pivot['CostCentre'] = ''
            df_BudgetUpdates_Pivot['Addition'] = 0
            df_BudgetUpdates_Pivot['Deletion'] = 0

        if 'Addition' not in df_BudgetUpdates_Pivot:
            df_BudgetUpdates_Pivot['Addition'] = 0

        if 'Deletion' not in df_BudgetUpdates_Pivot:
            df_BudgetUpdates_Pivot['Deletion'] = 0

        df_BudgetUpdates_Pivot = df_BudgetUpdates_Pivot[['CostCentre', 'Addition', 'Deletion']]
        
        CC_dfs = [TeamWise_HeadCount, TeamWise_Maternity, TeamWise_LongLeave, TeamWise_ServingNotice, TeamWise_Merged_ATR, df_CC,]
        CC_Output = reduce(lambda x,y: pd.merge(x,y, on='Team', how='outer'), CC_dfs)
        CC_Output.loc['Total Count'] = CC_Output.sum(numeric_only=True, axis=0)
        CC_Output_Pivot = pd.pivot_table(CC_Output, index='CostCentre', aggfunc = 'sum', margins=False).reset_index().fillna(0)
        
        CC_dfs = [CC_Output_Pivot, df_BudgetFTE_Pivot, df_BudgetUpdates_Pivot, df_CCTeam]
        CC_Output = reduce(lambda x,y: pd.merge(x,y, on='CostCentre', how='outer'), CC_dfs).fillna(0)
        
        CC_Output['SurplusDeficit'] = CC_Output['Current FTE'] - (CC_Output['BudgetFTE'] + CC_Output['Addition'] - CC_Output['Deletion'])
        CC_Output['Offered'] = 0
        CC_Output[list(['BudgetFTE', 'Addition', 'Deletion', 'Current FTE', 'SurplusDeficit', 'Open ATR', 'Maternity Leave', 'Long Leave', 'Serving Notice'])] = CC_Output[list(['BudgetFTE', 'Addition', 'Deletion', 'Current FTE', 'SurplusDeficit', 'Open ATR', 'Maternity Leave', 'Long Leave', 'Serving Notice'])].fillna(0).astype(int)
        CC_Output = CC_Output[['CCTeam', 'CostCentre', 'BudgetFTE', 'Addition', 'Deletion', 'Current FTE', 'SurplusDeficit', 'Open ATR', 'Offered', 'Maternity Leave', 'Long Leave', 'Serving Notice']]
                    
        CC_Output_List = CC_Output.values.tolist()

        if len(CC_Output) != 0 and Copydata == 'Copy':
            CopytoClipboard(CC_Output)
            ClearTree()
            SelectedClear1()
        else:
            pyperclip.copy('')

        Budgettree1.tag_configure("evenrow",background='white')
        Budgettree1.tag_configure("oddrow",background='lightblue')
        rowid = 0
        for row in CC_Output_List:
            if row[0] != None:
                rowid = rowid + 1
                if rowid % 2 == 0:
                    Budgettree1.insert("", END, values=row, tags=('oddrow',))
                else:
                    Budgettree1.insert("", END, values=row, tags=('evenrow',))
    
    def Validate_BudgetFTESubmit(AddRemove):
        if Entry11.get() == '' or Entry12.get() == '' or Entry13.get() == '' or Entry14.get() == '':
            messagebox.showerror('Validation Check','Mandatory fields should not be left blank!')
            return False
        else:
            Submit = True

        if Submit:
            BudgetFTESubmit(AddRemove)

    def BudgetFTESubmit(AddRemove):
        Record = (Entry11.get(), Entry12.get(), Entry13.get(), Entry14.get(), AddRemove, Var_UserID, datetime.now().strftime('%d-%m-%Y %H:%M:%S'))
        query = """INSERT INTO tblBudgetUpdates (CCTeam, CostCentre, BudgetYear, FTEUpdates, AddorDel, UpdatedBy, UpdatedDate) VALUES(?, ?, ?, ?, ?, ?, ?);"""
        InsertQueryfun(ProDBPath, query, Record)

        SelectedClear1()
        ClearTree()
        HeadCount()
        messagebox.showinfo('Updated','FTE Details Updated Successfully!')
     
    arrlbHeader1 = ["Team Name", "Cost Centre", "Budgetted FTE", "Added FTE", "Removed FTE", "Current FTE", "Surplus/Deficit", "Open ATR", "Offered", "Maternity Leave", "Long Leave", "Serving Notice"]

    Budgettree1 = MyTreeview(frame2, columns=arrlbHeader1, show="headings", height=17)
    arrColWidth1 = [110, 75, 85, 75, 80, 75, 90, 65, 60, 95, 80, 85]
    arrColAlignment1 = ["w", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center"]
    arrSortType1 = ["name", "name", "num", "num", "num", "num", "num", "num", "num", "num", "num", "num"]

    for iCount in range(len(arrlbHeader1)):
        strHdr = arrlbHeader1[iCount]
        Budgettree1.heading(strHdr, text=strHdr, sort_by=arrSortType1[iCount])
        Budgettree1.column(arrlbHeader1[iCount], width=arrColWidth1[iCount], stretch=True, anchor=arrColAlignment1[iCount])

    Budgettree1.place(x=10, y=40)

    Budgettree1_vsb = ttk.Scrollbar(frame2, orient="vertical", command=Budgettree1.yview)
    Budgettree1_vsb.place(x=985, y=40, height=360)
    Budgettree1.configure(yscrollcommand=Budgettree1_vsb.set)

    Budgettree1.bind("<<TreeviewSelect>>", lambda event: OnClick(event, treename=Budgettree1))

    arrlbHeader2 = ["Team Name", "Cost Centre", "Budget Year", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"]

    Budgettree2 = MyTreeview(frame2, columns=arrlbHeader2, show="headings", height=1)
    arrColWidth2 = [110, 80, 80, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]
    arrColAlignment2 = ["w", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center", "center"]
    arrSortType2 = ["name", "name", "num", "num", "num", "num", "num", "num", "num", "num", "num", "num", "num", "num", "num"]

    for iCount in range(len(arrlbHeader2)):
        strHdr = arrlbHeader2[iCount]
        Budgettree2.heading(strHdr, text=strHdr, sort_by=arrSortType2[iCount])
        Budgettree2.column(arrlbHeader2[iCount], width=arrColWidth2[iCount], stretch=True, anchor=arrColAlignment2[iCount])

    Budgettree2.place(x=10, y=420)
    
    HeadCount()

    Image_Copy= PhotoImage(file=r)

    CopyB1 = Button(Can1, image=Image_Copy, width=26, height=26, command=lambda:HeadCount('Copy'),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CopyB1.image = Image_Copy
    
    CopyB1.place(x=980, y=10)
    
    Label11 = Label(frame2, text="Team Name*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label12 = Label(frame2, text="Cost Centre*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label13 = Label(frame2, text="Budget Year*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    Label14 = Label(frame2, text="FTE Updates*",width=15,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    
    Entry11 = Entry(frame2, bg="white",font=("Calibri",10), width=15)
    Entry12 = Entry(frame2, bg="white",font=("Calibri",10), width=15)
    Entry13 = Entry(frame2, bg="white",font=("Calibri",10), width=15)
    Entry14 = Entry(frame2, validate="key", bg="white",font=("Calibri",10), width=12)
    Entry14['validatecommand'] = (Entry14.register(AcceptNum),'%P','%d')

    Entry11.config(state='disabled')
    Entry12.config(state='disabled')
    Entry13.config(state='disabled')
    
    Label11.place(x=10, y=470)
    Label12.place(x=160, y=470)
    Label13.place(x=310, y=470)
    Label14.place(x=460, y=470)
    
    Entry11.place(x=10, y=490)
    Entry12.place(x=160, y=490)
    Entry13.place(x=310, y=490)
    Entry14.place(x=460, y=490)
           
    Image_Add= PhotoImage(file=r')
    Image_Remove= PhotoImage(file=r)

    AddB = Button(frame2, image=Image_Add, width=70, height=40, command=lambda:Validate_BudgetFTESubmit('Addition'),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    AddB.image = Image_Add
    AddB.place(x=580, y=475)

    RemoveB = Button(frame2, image=Image_Remove, width=70, height=40, command=lambda:Validate_BudgetFTESubmit('Deletion'),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    RemoveB.image = Image_Remove
    RemoveB.place(x=700, y=475)

########################################################## This is Budget FTE Page END ########################################################

########################################################## This is Button Change for Home Page ########################################################

def ButtonChange(Home, fun):
    global bNewUser, bPersonalDetails, bRoleChange, bLeaveDetails, bLeaverUpdate, bATR, bHome
    global Label_VLine, NewUser_Bg, Personal_Bg, Role_Bg, Leave_Bg, Leaver_Bg, ATR_Bg, Home_Bg

    Label_VLine.config(height=64)
    Label_VLine.place_forget()    

    if fun == 'New User':
        if NewUser_Access == 'Yes':
            NewUser_Bg.config(background='#054457')
            Personal_Bg.config(background='white')
            Role_Bg.config(background='white')
            Leave_Bg.config(background='white')
            Leaver_Bg.config(background='white')
            ATR_Bg.config(background='white')
            Home_Bg.config(background='white')

            bNewUser.config(borderwidth=1, relief='flat')
            bPersonalDetails.config(borderwidth=0, relief='flat')
            bRoleChange.config(borderwidth=0, relief='flat')
            bLeaveDetails.config(borderwidth=0, relief='flat')
            bLeaverUpdate.config(borderwidth=0, relief='flat')
            bATR.config(borderwidth=0, relief='flat')
            bHome.config(borderwidth=0, relief='flat')
            
            Label_VLine.place(x=138, y=10)
            NewUser(Home)
        else:
            messagebox.showerror('No Access',"You are not authorised to access 'New User' module! Contact Innovation Team")

    elif fun == 'Personal':
        if Personal_Access == 'Yes':
            NewUser_Bg.config(background='white')
            Personal_Bg.config(background='#054457')
            Role_Bg.config(background='white')
            Leave_Bg.config(background='white')
            Leaver_Bg.config(background='white')
            ATR_Bg.config(background='white')
            Home_Bg.config(background='white')

            bNewUser.config(borderwidth=0, relief='flat')
            bPersonalDetails.config(borderwidth=1, relief='flat')
            bRoleChange.config(borderwidth=0, relief='flat')
            bLeaveDetails.config(borderwidth=0, relief='flat')
            bLeaverUpdate.config(borderwidth=0, relief='flat')
            bATR.config(borderwidth=0, relief='flat')
            bHome.config(borderwidth=0, relief='flat')
            
            Label_VLine.place(x=138, y=96)
            PersonalDetails(Home)
        else:
            messagebox.showerror('No Access',"You are not authorised to access 'Personal Details' module! Contact Innovation Team")

    elif fun == 'Role':
        if Role_Access == 'UpdateOnly' or Role_Access == 'Both':
            NewUser_Bg.config(background='white')
            Personal_Bg.config(background='white')
            Role_Bg.config(background='#054457')
            Leave_Bg.config(background='white')
            Leaver_Bg.config(background='white')
            ATR_Bg.config(background='white')
            Home_Bg.config(background='white')

            bNewUser.config(borderwidth=0, relief='flat')
            bPersonalDetails.config(borderwidth=0, relief='flat')
            bRoleChange.config(borderwidth=1, relief='flat')
            bLeaveDetails.config(borderwidth=0, relief='flat')
            bLeaverUpdate.config(borderwidth=0, relief='flat')
            bATR.config(borderwidth=0, relief='flat')
            bHome.config(borderwidth=0, relief='flat')

            Label_VLine.config(height=69)
            Label_VLine.place(x=138, y=182)
            RoleChange(Home)
        else:
            messagebox.showerror('No Access',"You are not authorised to access 'Role/Team Change' module! Contact Innovation Team")

    elif fun == 'Leave':
        if Leaves_Access == 'Yes':
            NewUser_Bg.config(background='white')
            Personal_Bg.config(background='white')
            Role_Bg.config(background='white')
            Leave_Bg.config(background='#054457')
            Leaver_Bg.config(background='white')
            ATR_Bg.config(background='white')
            Home_Bg.config(background='white')

            bNewUser.config(borderwidth=0, relief='flat')
            bPersonalDetails.config(borderwidth=0, relief='flat')
            bRoleChange.config(borderwidth=0, relief='flat')
            bLeaveDetails.config(borderwidth=1, relief='flat')
            bLeaverUpdate.config(borderwidth=0, relief='flat')
            bATR.config(borderwidth=0, relief='flat')
            bHome.config(borderwidth=0, relief='flat')

            Label_VLine.place(x=138, y=268)
            LeaveDetails(Home)
        else:
            messagebox.showerror('No Access',"You are not authorised to access 'Leaves' module! Contact Innovation Team")

    elif fun == 'Leaver':
        if Attrition_Access == 'Yes':
            NewUser_Bg.config(background='white')
            Personal_Bg.config(background='white')
            Role_Bg.config(background='white')
            Leave_Bg.config(background='white')
            Leaver_Bg.config(background='#054457')
            ATR_Bg.config(background='white')
            Home_Bg.config(background='white')

            bNewUser.config(borderwidth=0, relief='flat')
            bPersonalDetails.config(borderwidth=0, relief='flat')
            bRoleChange.config(borderwidth=0, relief='flat')
            bLeaveDetails.config(borderwidth=0, relief='flat')
            bLeaverUpdate.config(borderwidth=1, relief='flat')
            bATR.config(borderwidth=0, relief='flat')
            bHome.config(borderwidth=0, relief='flat')

            Label_VLine.place(x=138, y=354)
            LeaverUpdate(Home)
        else:
            messagebox.showerror('No Access',"You are not authorised to access 'Attrition' module! Contact Innovation Team")

    elif fun == 'ATR':
        if ATR_Access == 'Yes':
            NewUser_Bg.config(background='white')
            Personal_Bg.config(background='white')
            Role_Bg.config(background='white')
            Leave_Bg.config(background='white')
            Leaver_Bg.config(background='white')
            ATR_Bg.config(background='#054457')
            Home_Bg.config(background='white')

            bNewUser.config(borderwidth=0, relief='flat')
            bPersonalDetails.config(borderwidth=0, relief='flat')
            bRoleChange.config(borderwidth=0, relief='flat')
            bLeaveDetails.config(borderwidth=0, relief='flat')
            bLeaverUpdate.config(borderwidth=0, relief='flat')
            bATR.config(borderwidth=1, relief='flat')
            bHome.config(borderwidth=0, relief='flat')

            Label_VLine.place(x=138, y=440)
            ATRPage(Home)
        else:
            messagebox.showerror('No Access',"You are not authorised to access 'ATR' module! Contact Innovation Team")

    elif fun == 'Home':
        NewUser_Bg.config(background='white')
        Personal_Bg.config(background='white')
        Role_Bg.config(background='white')
        Leave_Bg.config(background='white')
        Leaver_Bg.config(background='white')
        ATR_Bg.config(background='white')
        Home_Bg.config(background='#054457')

        bNewUser.config(borderwidth=0, relief='flat')
        bPersonalDetails.config(borderwidth=0, relief='flat')
        bRoleChange.config(borderwidth=0, relief='flat')
        bLeaveDetails.config(borderwidth=0, relief='flat')
        bLeaverUpdate.config(borderwidth=0, relief='flat')
        bATR.config(borderwidth=0, relief='flat')
        bHome.config(borderwidth=1, relief='flat')

        Label_VLine.place(x=138, y=522)
        Home1(Home)
        
########################################################## This is Home Page ########################################################
def Home1(Home):
    Home1Can=Canvas(Home,bg="#006E8E", width=1040, height=580, highlightthickness=0)
    Home1Can.place(x=150, y=10)

    global bNewUser, bPersonalDetails, bRoleChange, bLeaveDetails, bLeaverUpdate, bATR, bHome
    global Label_VLine, NewUser_Bg, Personal_Bg, Role_Bg, Leave_Bg, Leaver_Bg, ATR_Bg, Home_Bg
    
    Can1=Canvas(Home1Can,bg="white", width=1020, height=560, highlightthickness=0)
    Can1.place(x=10, y=10)

    UNameLabel = Label(Can1, text='Hi ' + Var_UserName + ', Have a great day!',height=2,fg="#006E8E",bg='white',font=("Calibri",12,"bold"))
    UNameLabel.place(x=400, y=250)
    
    NewUser_Bg.config(background='white')
    Personal_Bg.config(background='white')
    Role_Bg.config(background='white')
    Leave_Bg.config(background='white')
    Leaver_Bg.config(background='white')
    ATR_Bg.config(background='white')
    Home_Bg.config(background='#054457')

    bNewUser.config(borderwidth=0, relief='flat')
    bPersonalDetails.config(borderwidth=0, relief='flat')
    bRoleChange.config(borderwidth=0, relief='flat')
    bLeaveDetails.config(borderwidth=0, relief='flat')
    bLeaverUpdate.config(borderwidth=0, relief='flat')
    bATR.config(borderwidth=0, relief='flat')
    bHome.config(borderwidth=1, relief='flat')

    Label_VLine.place(x=138, y=522)

    Image8= PhotoImage(file=r')
    Image9= PhotoImage(file=r')
    Image10= PhotoImage(file=r)
    Image11= PhotoImage(file=r)
    Image12= PhotoImage(file=r)
    Image13= PhotoImage(file=r)
    Image14= PhotoImage(file=r)
    
    Image15= PhotoImage(file=r)

    Reports_Bg = Frame(Can1, background='white', width=135, height=68)
    Skills_Bg = Frame(Can1, background='white', width=135, height=68)
    Assets_Bg = Frame(Can1, background='white', width=135, height=68)
    Attendance_Bg = Frame(Can1, background='white', width=135, height=68)
    RAG_Bg = Frame(Can1, background='white', width=135, height=68)
    Successor_Bg = Frame(Can1, background='white', width=135, height=68)
    Escalation_Bg = Frame(Can1, background='white', width=135, height=68)

    BudgetFTE_Bg = Frame(Can1, background='white', width=135, height=80)

    bReports = Button(Reports_Bg, text='Reports', image=Image8, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:ReportsCheck(Home), borderwidth=0, cursor='hand2')
    bReports.image = Image8

    bSkills = Button(Skills_Bg, text='Skill Matrix', image=Image9, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:SkillCheck(Home), borderwidth=0, cursor='hand2')
    bSkills.image = Image9

    bAssets = Button(Assets_Bg, text='Asset Management', image=Image10, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:AssetCheck(Home), borderwidth=0, cursor='hand2')
    bAssets.image = Image10

    bAttendance = Button(Attendance_Bg, text='Attendance', image=Image11, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:AttendanceCheck(Home), borderwidth=0, cursor='hand2')
    bAttendance.image = Image11

    bRAG = Button(RAG_Bg, text='RAG Status', image=Image12, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:RAGStatusCheck(Home), borderwidth=0, cursor='hand2')
    bRAG.image = Image12

    bSuccessor = Button(Successor_Bg, text='Successor Plan', image=Image13, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:SuccessorCheck(Home), borderwidth=0, cursor='hand2')
    bSuccessor.image = Image13

    bEscalation = Button(Escalation_Bg, text='Escalation Matrix', image=Image14, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:EscalationCheck(Home), borderwidth=0, cursor='hand2')
    bEscalation.image = Image14

    bBudgetFTE = Button(BudgetFTE_Bg, text='Budget FTE', image=Image15, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=65, command=lambda:BudgetFTECheck(Home), borderwidth=0, cursor='hand2')
    bBudgetFTE.image = Image15
    
    Reports_Bg.place(x=0, y=20)
    Skills_Bg.place(x=140, y=20)
    Assets_Bg.place(x=290, y=20)
    Attendance_Bg.place(x=440, y=20)
    RAG_Bg.place(x=590, y=20)
    Successor_Bg.place(x=740, y=20)
    Escalation_Bg.place(x=890, y=20)

    BudgetFTE_Bg.place(x=0, y=120)

    bReports.place(x=1, y=1)
    bSkills.place(x=1, y=1)
    bAssets.place(x=1, y=1)
    bAttendance.place(x=1, y=1)
    bRAG.place(x=1, y=1)
    bSuccessor.place(x=1, y=1)
    bEscalation.place(x=1, y=1)

    bBudgetFTE.place(x=1, y=1)

    def CopytoClipboard(df):
        df1 = pd.DataFrame(df)
        df1.to_clipboard(excel = True)

    def CopyTree(treename, Category):
        CheckDate = DateSelected()
        if CheckDate == 'ValidDate':
            if Category == 'DOB':
                ViewTree(treename, 'DOB', 'Copy')
            elif Category == 'DOJ':
                ViewTree(treename, 'DOJ', 'Copy')
        else:
            pass

    def ClearTree(event):
        BirthdayTree.delete(*BirthdayTree.get_children())
        AnniversaryTree.delete(*AnniversaryTree.get_children())

    def DateSelected():
        RunButton.focus_set()
        ClearTree(Event)
        if DateEntry1.get() != '':
            result = Date_Validation(DateEntry1)
            if result == 'Failed':
                messagebox.showerror('Date Error','This typed date is not valid! Please check')
                DateEntry1.delete(0, END)
                DateEntry1.set_date(date.today())
                DateEntry1.delete(0, END)
                Datevalue = 'InvalidDate'
            else:
                ViewTree(BirthdayTree, 'DOB')
                ViewTree(AnniversaryTree, 'DOJ')
                Datevalue = 'ValidDate'
        else:
            Datevalue = 'NoDate'
            messagebox.showerror('Date Error','Date is not selected! Please check')

        return Datevalue

    def ViewTree(treename, Category, Copydata=''):
        treename.delete(*treename.get_children())
        
        if Category == 'DOB':
            query = """SELECT A.EmpID, A.EmpName, A.UserID, B.DOB, A.Team, A.Location, A.TeamLeader FROM tblEmpData AS A
                    LEFT JOIN tblPersonalData AS B
                    ON A.EmpID = B.EmpID
                    WHERE EmpStatus NOT IN ('Abscond', 'Termination', 'Resigned');"""

            conn = sqlite3.connect(ProDBPath)
            df_RawData = pd.read_sql_query(query, conn)
            conn.close()
            
            today = DateEntry1.get_date()
            df_RawData['DOB'] = pd.to_datetime(df_RawData['DOB'], format='%d-%m-%Y', errors='coerce')
            df_RawData['Date'] = df_RawData['DOB'].dt.day
            df_RawData['Month'] = df_RawData['DOB'].dt.month
            df_Final = pd.DataFrame(df_RawData.loc[(df_RawData['Date'] == today.day) & (df_RawData['Month'] == today.month)])
            df_Final['DOB'] = df_Final['DOB'].dt.strftime('%d %b')
            df_FinalCopy = df_Final[['EmpID', 'EmpName', 'UserID', 'DOB', 'Team', 'Location', 'TeamLeader']]
            df_Final = df_Final[['EmpID', 'EmpName', 'DOB', 'Team']]
            df_FinalData_List = df_Final.values.tolist()
            if len(df_FinalCopy) != 0 and Copydata == 'Copy':
                CopytoClipboard(df_FinalCopy)
            else:
                pyperclip.copy('')
            
        elif Category == 'DOJ':
            query = """SELECT EmpID, EmpName, UserID, DOJ, Team, Location, TeamLeader FROM tblEmpData
                    WHERE EmpStatus NOT IN ('Abscond', 'Termination', 'Resigned');"""

            conn = sqlite3.connect(ProDBPath)
            df_RawData = pd.read_sql_query(query, conn)
            conn.close()
            
            today = DateEntry1.get_date()
            df_RawData['DOJ'] = pd.to_datetime(df_RawData['DOJ'], format='%d-%m-%Y', errors='coerce')
            df_RawData = df_RawData.loc[df_RawData['DOJ'] <= numpy.datetime64(today)]
            df_RawData['Years'] = today.year - df_RawData['DOJ'].dt.year
            df_RawData['Date'] = df_RawData['DOJ'].dt.day
            df_RawData['Month'] = df_RawData['DOJ'].dt.month
            df_Final = pd.DataFrame(df_RawData.loc[(df_RawData['Date'] == today.day) & (df_RawData['Month'] == today.month)])
            df_Final['DOJ'] = df_Final['DOJ'].dt.strftime('%d-%m-%Y')
            df_FinalCopy = df_Final[['EmpID', 'EmpName', 'UserID', 'DOJ', 'Years', 'Team', 'Location', 'TeamLeader']]
            df_Final = df_Final[['EmpID', 'EmpName', 'DOJ', 'Years', 'Team']]
            df_FinalData_List = df_Final.values.tolist()
            if len(df_FinalCopy) != 0 and Copydata == 'Copy':
                CopytoClipboard(df_FinalCopy)
            else:
                pyperclip.copy('')
                        
        treename.tag_configure("evenrow",background='white')
        treename.tag_configure("oddrow",background='lightblue')
        rowid = 0
        for row in df_FinalData_List:
            if row[0] != None:
                rowid = rowid + 1
                if rowid % 2 == 0:
                    treename.insert("", END, values=row, tags=('oddrow',))
                else:
                    treename.insert("", END, values=row, tags=('evenrow',))

    today = date.today()
    DateLabel = Label(Can1, text="Date",width=8,height=1,fg="#054457", bg="white",font=("Calibri",10,"bold"),anchor='w')
    DateEntry1 = DateEntry(Can1,width=10,bg="white",font=("Calibri",10),date_pattern='dd-mm-yyyy')
    DateEntry1.delete(0, END)
    DateEntry1.set_date(today)
    DateEntry1.bind("<FocusIn>", lambda event: ClearTree(event))
    DateEntry1.bind("<<CalendarSelected>>", lambda event: ClearTree(event))

    DateLabel.place(x=10, y=365)
    DateEntry1.place(x=10, y=385)
    
    Image_Run= PhotoImage(file=r')
    RunButton = Button(Can1, image=Image_Run, width=25, height=25, command=lambda:DateSelected(),bg="white",fg="#054457",font=("Calibri",10,"bold"),cursor='hand2',borderwidth=0)
    RunButton.image = Image_Run
    RunButton.place(x=100, y=380)

    style = ttk.Style()
    style.theme_use('default')
    style.configure("Treeview.Heading",foreground="Black",font=("Calibri",10,"bold"))
    style.configure("Treeview",background='white',foreground="Black",font=("Calibri",9),rowheight=20)
    style.map('Treeview', background=[('selected', 'green')])
    
    arrlbHeader = ["Emp ID", "Name", "DOB", "Team"]
    BirthdayTree = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=6, selectmode='browse')
    BirthdayTree.column("#1", anchor=CENTER, width=50)
    BirthdayTree.heading("#1", text="Emp ID")
    BirthdayTree.column("#2", anchor=W, width=160)
    BirthdayTree.heading("#2", text="Name")
    BirthdayTree.column("#3", anchor=CENTER, width=50)
    BirthdayTree.heading("#3", text="DOB")
    BirthdayTree.column("#4", anchor=W, width=180)
    BirthdayTree.heading("#4", text="Team")
            
    arrSortType = ["num", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        BirthdayTree.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
        BirthdayTree.column(arrlbHeader[iCount], stretch=True)

    BirthdayTree.place(x=10, y=410)

    BirthdayTree_vsb = ttk.Scrollbar(Can1, orient="vertical", command=BirthdayTree.yview)
    BirthdayTree_vsb.place(x=450, y=410, height=140)
    BirthdayTree.configure(yscrollcommand=BirthdayTree_vsb.set)

    arrlbHeader = ["Emp ID", "Name", "DOJ", "Years", "Team"]
    AnniversaryTree = MyTreeview(Can1, columns=arrlbHeader, show="headings", height=6, selectmode='browse')
    AnniversaryTree.column("#1", anchor=CENTER, width=50)
    AnniversaryTree.heading("#1", text="Emp ID")
    AnniversaryTree.column("#2", anchor=W, width=160)
    AnniversaryTree.heading("#2", text="Name")
    AnniversaryTree.column("#3", anchor=CENTER, width=70)
    AnniversaryTree.heading("#3", text="DOJ")
    AnniversaryTree.column("#4", anchor=CENTER, width=50)
    AnniversaryTree.heading("#4", text="Years")
    AnniversaryTree.column("#5", anchor=W, width=180)
    AnniversaryTree.heading("#5", text="Team")
            
    arrSortType = ["num", "name", "name", "name", "name"]
    for iCount in range(len(arrlbHeader)):
        strHdr = arrlbHeader[iCount]
        AnniversaryTree.heading(strHdr, text=strHdr, sort_by=arrSortType[iCount])
        AnniversaryTree.column(arrlbHeader[iCount], stretch=True)

    AnniversaryTree.place(x=490, y=410)

    AnniversaryTree_vsb = ttk.Scrollbar(Can1, orient="vertical", command=AnniversaryTree.yview)
    AnniversaryTree_vsb.place(x=1000, y=410, height=140)
    AnniversaryTree.configure(yscrollcommand=AnniversaryTree_vsb.set)
    
    DateSelected()

    Image_Copy= PhotoImage(file=r')
    Image_Birthday= PhotoImage(file=r')
    Image_Anniversary= PhotoImage(file=r)

    Label_Birthday = Label(Can1,image=Image_Birthday,width=200,height=35,bg="white")
    Label_Anniversary = Label(Can1,image=Image_Anniversary,width=200,height=35,bg="white")

    Label_Birthday.image = Image_Birthday
    Label_Anniversary.image = Image_Anniversary

    Label_Birthday.place(x=150, y=370)
    Label_Anniversary.place(x=640, y=370)

    CopyB1 = Button(Can1, image=Image_Copy, width=26, height=26, command=lambda:CopyTree(BirthdayTree, 'DOB'),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CopyB2 = Button(Can1, image=Image_Copy, width=26, height=26, command=lambda:CopyTree(AnniversaryTree, 'DOJ'),bg="white",font=("Calibri",10,"bold"),borderwidth=1,relief='flat',activebackground='#006E8E',cursor='hand2')
    CopyB1.image = Image_Copy
    CopyB2.image = Image_Copy

    CopyB1.place(x=440, y=380)
    CopyB2.place(x=990, y=380)

def HomePage():
    Home=Tk()
    Home.geometry("1200x600")
    Home.resizable(False,False)
    Home.title("Employee-Database V4.0")
    Home.iconbitmap(ImgPath + '\EQ_HD.ico')
    
    Image1= PhotoImage(file=r')
    Image2= PhotoImage(file=r')
    Image3= PhotoImage(file=r')
    Image4= PhotoImage(file=r')
    Image5= PhotoImage(file=r')
    Image6= PhotoImage(file=r')
    Image7= PhotoImage(file=r')
    
    HomeCan=Canvas(Home,bg="white", width=140, height=600, highlightthickness=0)
    HomeCan.place(x=0, y=0)

    global bNewUser, bPersonalDetails, bRoleChange, bLeaveDetails, bLeaverUpdate, bATR, bHome
    global NewUser_Bg, Personal_Bg, Role_Bg, Leave_Bg, Leaver_Bg, ATR_Bg, Home_Bg

    NewUser_Bg = Frame(HomeCan, background='white', width=135, height=68)
    Personal_Bg = Frame(HomeCan, background='white', width=135, height=68)
    Role_Bg = Frame(HomeCan, background='white', width=135, height=73)
    Leave_Bg = Frame(HomeCan, background='white', width=135, height=68)
    Leaver_Bg = Frame(HomeCan, background='white', width=135, height=68)
    ATR_Bg = Frame(HomeCan, background='white', width=135, height=68)
    Home_Bg = Frame(HomeCan, background='white', width=135, height=68)

    bNewUser = Button(NewUser_Bg, text='New User', image=Image1, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:ButtonChange(Home, 'New User'), borderwidth=0, cursor='hand2')
    bPersonalDetails = Button(Personal_Bg, text='Personal Details', image=Image2, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:ButtonChange(Home, 'Personal'), borderwidth=0, cursor='hand2')
    bRoleChange = Button(Role_Bg, text='Role/Team Change', image=Image3, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=65, command=lambda:ButtonChange(Home, 'Role'), borderwidth=0, cursor='hand2')
    bLeaveDetails = Button(Leave_Bg, text='Leaves', image=Image4, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:ButtonChange(Home, 'Leave'), borderwidth=0, cursor='hand2')
    bLeaverUpdate = Button(Leaver_Bg, text='Attrition', image=Image5, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:ButtonChange(Home, 'Leaver'), borderwidth=0, cursor='hand2')
    bATR = Button(ATR_Bg, text='ATR', image=Image6, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:ButtonChange(Home, 'ATR'), borderwidth=0, cursor='hand2')
    bHome = Button(Home_Bg, text='Home', image=Image7, compound='top', fg='#054457', bg="white", font=("Calibri",11,"bold"), width=128, height=60, command=lambda:ButtonChange(Home, 'Home'), borderwidth=0, cursor='hand2')

    NewUser_Bg.place(x=3,y=10)
    Personal_Bg.place(x=3,y=96)
    Role_Bg.place(x=3,y=182)
    Leave_Bg.place(x=3,y=268)
    Leaver_Bg.place(x=3,y=354)
    ATR_Bg.place(x=3,y=440)
    Home_Bg.place(x=3,y=522)

    bNewUser.place(x=1, y=1)
    bPersonalDetails.place(x=1, y=1)
    bRoleChange.place(x=1, y=1)
    bLeaveDetails.place(x=1, y=1)
    bLeaverUpdate.place(x=1, y=1)
    bATR.place(x=1, y=1)
    bHome.place(x=1, y=1)

    Image_VLine= PhotoImage(file=r')
    global Label_VLine
    
    Label_VLine = Label(Home, image=Image_VLine, width=10, height=64)
    Label_VLine.image = Image_VLine

    Home1(Home)

    Home.protocol('WM_DELETE_WINDOW',lambda:ClosePage(Home))
    Home.mainloop()

########################################################## This is Login Page ########################################################
def WindowCheck():
    WindowsList = []
    def winEnumHandler( hwnd, ctx ):
        if win32gui.IsWindowVisible( hwnd ):
            WindowsList.append(win32gui.GetWindowText( hwnd ))

    win32gui.EnumWindows( winEnumHandler, None )
    return WindowsList

def LoginPage():

    CheckWindow = WindowCheck()

    if "Employee-Database V4.0" in CheckWindow or "Employee Database-Login Page" in CheckWindow:
        messagebox.showerror('Already Opened','This application is already opened! Please check')
    else:
        Var_UserID = getpass.getuser()
        Temp = ViewQueryfun(ProDBPath,"SELECT * from tblUserAccess WHERE UserID = '" + Var_UserID.lower() + "' AND Active = 'Yes';")
        
        if len(Temp) > 0:
            HomePage()
        else:
            Login=Tk()
            Login.geometry("1200x600")
            Login.resizable(False,False)
            Login.title("Employee Database-Login Page")
            messagebox.showerror('User ID not available','You are not authorised to access this application, Please check with Innovation team') 
            Login.destroy()
            Login.mainloop()

def VersionCheck():
    ProjectID = 'EQ2021-002'
    Version = 'V4.0'
    VersionResult = ViewQueryfun(ProDBPath,"SELECT Status from tblVersions WHERE ProjectID = '" + ProjectID + "' AND Version = '" + Version + "';")

    if VersionResult[0][0] == 'Live':
        LoginPage()
    else:
        NewerVersion = ViewQueryfun(ProDBPath,"SELECT Version from tblVersions WHERE ProjectID = '" + ProjectID + "' AND Status = 'Live';")
        messagebox.showerror('Version Check','You are using an older version of this application, Please close and open Newer Version ' + NewerVersion[0][0])
        return False

VersionCheck()